<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="new_registry.rnc" type="compact"?>

<registry>
	<notation>
Copyright (c) 2015-2018 The Khronos Group Inc.

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

------------------------------------------------------------------------

This file, vk.xml, is the Vulkan API Registry. It is a critically important
and normative part of the Vulkan Specification, including a canonical
machine-readable definition of the API, parameter and member validation
language incorporated into the Specification and reference pages, and other
material which is registered by Khronos, such as tags used by extension and
layer authors. The authoritative public version of vk.xml is maintained in
the master branch of the Khronos Vulkan GitHub project. The authoritative
private version is maintained in the 1.0 branch of the member gitlab server.
    </notation>
	<vendorids notation="Vulkan vendor IDs for physical devices without PCI vendor IDs">
		<vendorid name="KHR" id="0x10000" notation="This is the next available Khronos vendor ID"/>
		<vendorid name="VIV" id="0x10001" notation="Vivante vendor ID"/>
		<vendorid name="VSI" id="0x10002" notation="VeriSilicon vendor ID"/>
		<vendorid name="KAZAN" id="0x10003" notation="Kazan Software Renderer"/>
	</vendorids>
	<tags notation="Vulkan vendor/author tags for extensions and layers">
		<tag name="IMG" author="Imagination Technologies" contact="Michael Worcester @michaelworcester"/>
		<tag name="AMD" author="Advanced Micro Devices, Inc." contact="Daniel Rakos @aqnuep"/>
		<tag name="AMDX" author="Advanced Micro Devices, Inc." contact="Daniel Rakos @aqnuep"/>
		<tag name="ARM" author="ARM Limited" contact="Jan-Harald Fredriksen @janharald"/>
		<tag name="FSL" author="Freescale Semiconductor, Inc." contact="Norbert Nopper @FslNopper"/>
		<tag name="BRCM" author="Broadcom Corporation" contact="Graeme Leese @gnl21"/>
		<tag name="NXP" author="NXP Semiconductors N.V." contact="Norbert Nopper @FslNopper"/>
		<tag name="NV" author="NVIDIA Corporation" contact="Daniel Koch @dgkoch"/>
		<tag name="NVX" author="NVIDIA Corporation" contact="Daniel Koch @dgkoch"/>
		<tag name="VIV" author="Vivante Corporation" contact="Yanjun Zhang @yanjunzhang"/>
		<tag name="VSI" author="VeriSilicon Holdings Co., Ltd." contact="Yanjun Zhang @yanjunzhang"/>
		<tag name="KDAB" author="KDAB" contact="Sean Harmer @seanharmer"/>
		<tag name="ANDROID" author="Google, Inc." contact="Jesse Hall @jessehall"/>
		<tag name="CHROMIUM" author="Google, Inc." contact="Jesse Hall @jessehall"/>
		<tag name="GOOGLE" author="Google, Inc." contact="Jesse Hall @jessehall"/>
		<tag name="QCOM" author="Qualcomm Technologies, Inc." contact="Maurice Ribble @mribble"/>
		<tag name="LUNARG" author="LunarG, Inc." contact="Karen Ghavam @KarenGhavam"/>
		<tag name="SAMSUNG" author="Samsung Electronics Co., Ltd." contact="Alon Or-bach @alonorbach"/>
		<tag name="SEC" author="Samsung Electronics Co., Ltd." contact="Alon Or-bach @alonorbach"/>
		<tag name="TIZEN" author="Samsung Electronics Co., Ltd." contact="Alon Or-bach @alonorbach"/>
		<tag name="RENDERDOC" author="RenderDoc (renderdoc.org)" contact="baldurk@baldurk.org"/>
		<tag name="NN" author="Nintendo Co., Ltd." contact="Yasuhiro Yoshioka @yoshioka_yasuhiro"/>
		<tag name="MVK" author="The Brenwill Workshop Ltd." contact="Bill Hollings @billhollings"/>
		<tag name="KHR" author="Khronos" contact="Tom Olson @tom.olson"/>
		<tag name="KHX" author="Khronos" contact="Tom Olson @tom.olson"/>
		<tag name="EXT" author="Multivendor" contact="Jon Leech @oddhack"/>
		<tag name="MESA" author="Mesa open source project" contact="Chad Versace @chadversary, Daniel Stone @fooishbar, David Airlie @airlied, Jason Ekstrand @jekstrand"/>
	</tags>
	<definitions notation="Vulkan type definitions">
		<include name="vk_platform" style="quote" need-ext="true"/>
		<notation>WSI extensions</notation>
		<include name="vulkan.h" style="quote"/>
		<include name="X11/Xlib.h" style="bracket"/>
		<include name="X11/extensions/Xrandr.h" style="bracket"/>
		<include name="android/native_window.h" style="bracket"/>
		<include name="mir_toolkit/client_types.h" style="bracket"/>
		<include name="wayland-client.h" style="bracket"/>
		<include name="windows.h" style="bracket"/>
		<include name="xcb/xcb.h" style="bracket"/>
		<reference name="Display" include="X11/Xlib.h"/>
		<reference name="VisualID" include="X11/Xlib.h"/>
		<reference name="Window" include="X11/Xlib.h"/>
		<reference name="RROutput" include="X11/extensions/Xrandr.h"/>
		<reference name="ANativeWindow" include="android/native_window.h"/>
		<reference name="MirConnection" include="mir_toolkit/client_types.h"/>
		<reference name="MirSurface" include="mir_toolkit/client_types.h"/>
		<reference name="wl_display" include="wayland-client.h"/>
		<reference name="wl_surface" include="wayland-client.h"/>
		<reference name="HINSTANCE" include="windows.h"/>
		<reference name="HWND" include="windows.h"/>
		<reference name="HANDLE" include="windows.h"/>
		<reference name="SECURITY_ATTRIBUTES" include="windows.h"/>
		<reference name="DWORD" include="windows.h"/>
		<reference name="LPCWSTR" include="windows.h"/>
		<reference name="xcb_connection_t" include="xcb/xcb.h"/>
		<reference name="xcb_visualid_t" include="xcb/xcb.h"/>
		<reference name="xcb_window_t" include="xcb/xcb.h"/>
		<define name="VK_MAKE_VERSION">
			<param>major</param>
			<param>minor</param>
			<param>patch</param>
			<c-expression>\
    (((major) &lt;&lt; 22) | ((minor) &lt;&lt; 12) | (patch))</c-expression>
		</define>
		<define name="VK_VERSION_MAJOR">
			<param>version</param>
			<c-expression>((uint32_t)(version) &gt;&gt; 22)</c-expression>
		</define>
		<define name="VK_VERSION_MINOR">
			<param>version</param>
			<c-expression>(((uint32_t)(version) &gt;&gt; 12) &amp; 0x3ff)</c-expression>
		</define>
		<define name="VK_VERSION_PATCH">
			<param>version</param>
			<c-expression>((uint32_t)(version) &amp; 0xfff)</c-expression>
		</define>
		<define name="VK_API_VERSION" disabled="true">
			<comment>DEPRECATED: This define has been removed. Specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION macro, should be used instead.</comment>
			<defref>VK_MAKE_VERSION</defref>
			<c-expression>VK_MAKE_VERSION(1, 0, 0) // Patch version should always be set to 0</c-expression>
		</define>
		<define name="VK_API_VERSION_1_0" disabled="true">
			<comment>Vulkan 1.0 version number
Patch version should always be set to 0</comment>
			<defref>VK_MAKE_VERSION</defref>
			<c-expression>VK_MAKE_VERSION(1, 0, 0)// Patch version should always be set to 0</c-expression>
		</define>
		<define name="VK_HEADER_VERSION" value="69">
			<comment>Version of this file</comment>
		</define>
		<define name="VK_DEFINE_HANDLE">
			<param>object</param>
			<c-expression>typedef struct object##_T* object;</c-expression>
		</define>
		<define name="VK_DEFINE_NON_DISPATCHABLE_HANDLE" replace="true">
			<c-expression>#if !defined(VK_DEFINE_NON_DISPATCHABLE_HANDLE)
#if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) &amp;&amp; !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;
#else
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
#endif
#endif
        </c-expression>
		</define>
		<define name="VK_NULL_HANDLE" value="0"/>
		<typedef name="VkSampleMask" basetype="uint32_t"/>
		<typedef name="VkBool32" basetype="uint32_t"/>
		<typedef name="VkFlags" basetype="uint32_t"/>
		<typedef name="VkDeviceSize" basetype="uint64_t"/>
		<notation>Basic C types, pulled in via vk_platform.h</notation>
		<reference name="void" include="vk_platform"/>
		<reference name="char" include="vk_platform"/>
		<reference name="float" include="vk_platform"/>
		<reference name="uint8_t" include="vk_platform"/>
		<reference name="uint32_t" include="vk_platform"/>
		<reference name="uint64_t" include="vk_platform"/>
		<reference name="int32_t" include="vk_platform"/>
		<reference name="size_t" include="vk_platform"/>
		<reference name="int"/>
		<notation>Bitmask types</notation>
		<bitmask name="VkFramebufferCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkQueryPoolCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkRenderPassCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkSamplerCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineLayoutCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineCacheCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineDepthStencilStateCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineDynamicStateCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineColorBlendStateCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineMultisampleStateCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineRasterizationStateCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineViewportStateCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineTessellationStateCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineInputAssemblyStateCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineVertexInputStateCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkPipelineShaderStageCreateFlags" basetype="VkFlags"/>
		<bitmask enumref="VkDescriptorSetLayoutCreateFlagBits" name="VkDescriptorSetLayoutCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkBufferViewCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkInstanceCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkDeviceCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkDeviceQueueCreateFlags" basetype="VkFlags"/>
		<bitmask enumref="VkQueueFlagBits" name="VkQueueFlags" basetype="VkFlags"/>
		<bitmask enumref="VkMemoryPropertyFlagBits" name="VkMemoryPropertyFlags" basetype="VkFlags"/>
		<bitmask enumref="VkMemoryHeapFlagBits" name="VkMemoryHeapFlags" basetype="VkFlags"/>
		<bitmask enumref="VkAccessFlagBits" name="VkAccessFlags" basetype="VkFlags"/>
		<bitmask enumref="VkBufferUsageFlagBits" name="VkBufferUsageFlags" basetype="VkFlags"/>
		<bitmask enumref="VkBufferCreateFlagBits" name="VkBufferCreateFlags" basetype="VkFlags"/>
		<bitmask enumref="VkShaderStageFlagBits" name="VkShaderStageFlags" basetype="VkFlags"/>
		<bitmask enumref="VkImageUsageFlagBits" name="VkImageUsageFlags" basetype="VkFlags"/>
		<bitmask enumref="VkImageCreateFlagBits" name="VkImageCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkImageViewCreateFlags" basetype="VkFlags"/>
		<bitmask enumref="VkPipelineCreateFlagBits" name="VkPipelineCreateFlags" basetype="VkFlags"/>
		<bitmask enumref="VkColorComponentFlagBits" name="VkColorComponentFlags" basetype="VkFlags"/>
		<bitmask enumref="VkFenceCreateFlagBits" name="VkFenceCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkSemaphoreCreateFlags" basetype="VkFlags"/>
		<bitmask enumref="VkFormatFeatureFlagBits" name="VkFormatFeatureFlags" basetype="VkFlags"/>
		<bitmask enumref="VkQueryControlFlagBits" name="VkQueryControlFlags" basetype="VkFlags"/>
		<bitmask enumref="VkQueryResultFlagBits" name="VkQueryResultFlags" basetype="VkFlags"/>
		<bitmask name="VkShaderModuleCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkEventCreateFlags" basetype="VkFlags"/>
		<bitmask enumref="VkCommandPoolCreateFlagBits" name="VkCommandPoolCreateFlags" basetype="VkFlags"/>
		<bitmask enumref="VkCommandPoolResetFlagBits" name="VkCommandPoolResetFlags" basetype="VkFlags"/>
		<bitmask enumref="VkCommandBufferResetFlagBits" name="VkCommandBufferResetFlags" basetype="VkFlags"/>
		<bitmask enumref="VkCommandBufferUsageFlagBits" name="VkCommandBufferUsageFlags" basetype="VkFlags"/>
		<bitmask enumref="VkQueryPipelineStatisticFlagBits" name="VkQueryPipelineStatisticFlags" basetype="VkFlags"/>
		<bitmask name="VkMemoryMapFlags" basetype="VkFlags"/>
		<bitmask enumref="VkImageAspectFlagBits" name="VkImageAspectFlags" basetype="VkFlags"/>
		<bitmask enumref="VkSparseMemoryBindFlagBits" name="VkSparseMemoryBindFlags" basetype="VkFlags"/>
		<bitmask enumref="VkSparseImageFormatFlagBits" name="VkSparseImageFormatFlags" basetype="VkFlags"/>
		<bitmask enumref="VkSubpassDescriptionFlagBits" name="VkSubpassDescriptionFlags" basetype="VkFlags"/>
		<bitmask enumref="VkPipelineStageFlagBits" name="VkPipelineStageFlags" basetype="VkFlags"/>
		<bitmask enumref="VkSampleCountFlagBits" name="VkSampleCountFlags" basetype="VkFlags"/>
		<bitmask enumref="VkAttachmentDescriptionFlagBits" name="VkAttachmentDescriptionFlags" basetype="VkFlags"/>
		<bitmask enumref="VkStencilFaceFlagBits" name="VkStencilFaceFlags" basetype="VkFlags"/>
		<bitmask enumref="VkCullModeFlagBits" name="VkCullModeFlags" basetype="VkFlags"/>
		<bitmask enumref="VkDescriptorPoolCreateFlagBits" name="VkDescriptorPoolCreateFlags" basetype="VkFlags"/>
		<bitmask name="VkDescriptorPoolResetFlags" basetype="VkFlags"/>
		<bitmask enumref="VkDependencyFlagBits" name="VkDependencyFlags" basetype="VkFlags"/>
		<bitmask enumref="VkIndirectCommandsLayoutUsageFlagBitsNVX" name="VkIndirectCommandsLayoutUsageFlagsNVX" basetype="VkFlags"/>
		<bitmask enumref="VkObjectEntryUsageFlagBitsNVX" name="VkObjectEntryUsageFlagsNVX" basetype="VkFlags"/>
		<bitmask name="VkDescriptorUpdateTemplateCreateFlagsKHR" basetype="VkFlags"/>
		<notation>WSI extensions</notation>
		<bitmask enumref="VkCompositeAlphaFlagBitsKHR" name="VkCompositeAlphaFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkDisplayPlaneAlphaFlagBitsKHR" name="VkDisplayPlaneAlphaFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkSurfaceTransformFlagBitsKHR" name="VkSurfaceTransformFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkSwapchainCreateFlagBitsKHR" name="VkSwapchainCreateFlagsKHR" basetype="VkFlags"/>
		<bitmask name="VkDisplayModeCreateFlagsKHR" basetype="VkFlags"/>
		<bitmask name="VkDisplaySurfaceCreateFlagsKHR" basetype="VkFlags"/>
		<bitmask name="VkAndroidSurfaceCreateFlagsKHR" basetype="VkFlags"/>
		<bitmask name="VkMirSurfaceCreateFlagsKHR" basetype="VkFlags"/>
		<bitmask name="VkViSurfaceCreateFlagsNN" basetype="VkFlags"/>
		<bitmask name="VkWaylandSurfaceCreateFlagsKHR" basetype="VkFlags"/>
		<bitmask name="VkWin32SurfaceCreateFlagsKHR" basetype="VkFlags"/>
		<bitmask name="VkXlibSurfaceCreateFlagsKHR" basetype="VkFlags"/>
		<bitmask name="VkXcbSurfaceCreateFlagsKHR" basetype="VkFlags"/>
		<bitmask name="VkIOSSurfaceCreateFlagsMVK" basetype="VkFlags"/>
		<bitmask name="VkMacOSSurfaceCreateFlagsMVK" basetype="VkFlags"/>
		<bitmask enumref="VkPeerMemoryFeatureFlagBitsKHX" name="VkPeerMemoryFeatureFlagsKHX" basetype="VkFlags"/>
		<bitmask enumref="VkMemoryAllocateFlagBitsKHX" name="VkMemoryAllocateFlagsKHX" basetype="VkFlags"/>
		<bitmask enumref="VkDeviceGroupPresentModeFlagBitsKHX" name="VkDeviceGroupPresentModeFlagsKHX" basetype="VkFlags"/>
		<bitmask enumref="VkDebugReportFlagBitsEXT" name="VkDebugReportFlagsEXT" basetype="VkFlags"/>
		<bitmask name="VkCommandPoolTrimFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkExternalMemoryHandleTypeFlagBitsNV" name="VkExternalMemoryHandleTypeFlagsNV" basetype="VkFlags"/>
		<bitmask enumref="VkExternalMemoryFeatureFlagBitsNV" name="VkExternalMemoryFeatureFlagsNV" basetype="VkFlags"/>
		<bitmask enumref="VkExternalMemoryHandleTypeFlagBitsKHR" name="VkExternalMemoryHandleTypeFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkExternalMemoryFeatureFlagBitsKHR" name="VkExternalMemoryFeatureFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkExternalSemaphoreHandleTypeFlagBitsKHR" name="VkExternalSemaphoreHandleTypeFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkExternalSemaphoreFeatureFlagBitsKHR" name="VkExternalSemaphoreFeatureFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkSemaphoreImportFlagBitsKHR" name="VkSemaphoreImportFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkExternalFenceHandleTypeFlagBitsKHR" name="VkExternalFenceHandleTypeFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkExternalFenceFeatureFlagBitsKHR" name="VkExternalFenceFeatureFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkFenceImportFlagBitsKHR" name="VkFenceImportFlagsKHR" basetype="VkFlags"/>
		<bitmask enumref="VkSurfaceCounterFlagBitsEXT" name="VkSurfaceCounterFlagsEXT" basetype="VkFlags"/>
		<bitmask name="VkPipelineViewportSwizzleStateCreateFlagsNV" basetype="VkFlags"/>
		<bitmask name="VkPipelineDiscardRectangleStateCreateFlagsEXT" basetype="VkFlags"/>
		<bitmask name="VkPipelineCoverageToColorStateCreateFlagsNV" basetype="VkFlags"/>
		<bitmask name="VkPipelineCoverageModulationStateCreateFlagsNV" basetype="VkFlags"/>
		<bitmask name="VkValidationCacheCreateFlagsEXT" basetype="VkFlags"/>
		<bitmask name="VkPipelineRasterizationConservativeStateCreateFlagsEXT" basetype="VkFlags"/>
		<notation>Types which can be void pointers or class pointers, selected at compile time</notation>
		<handle name="VkInstance" type="dispatch"/>
		<handle parent="VkInstance" name="VkPhysicalDevice" type="dispatch"/>
		<handle parent="VkPhysicalDevice" name="VkDevice" type="dispatch"/>
		<handle parent="VkDevice" name="VkQueue" type="dispatch"/>
		<handle parent="VkCommandPool" name="VkCommandBuffer" type="dispatch"/>
		<handle parent="VkDevice" name="VkDeviceMemory" type="nodispatch"/>
		<handle parent="VkDevice" name="VkCommandPool" type="nodispatch"/>
		<handle parent="VkDevice" name="VkBuffer" type="nodispatch"/>
		<handle parent="VkDevice" name="VkBufferView" type="nodispatch"/>
		<handle parent="VkDevice" name="VkImage" type="nodispatch"/>
		<handle parent="VkDevice" name="VkImageView" type="nodispatch"/>
		<handle parent="VkDevice" name="VkShaderModule" type="nodispatch"/>
		<handle parent="VkDevice" name="VkPipeline" type="nodispatch"/>
		<handle parent="VkDevice" name="VkPipelineLayout" type="nodispatch"/>
		<handle parent="VkDevice" name="VkSampler" type="nodispatch"/>
		<handle parent="VkDescriptorPool" name="VkDescriptorSet" type="nodispatch"/>
		<handle parent="VkDevice" name="VkDescriptorSetLayout" type="nodispatch"/>
		<handle parent="VkDevice" name="VkDescriptorPool" type="nodispatch"/>
		<handle parent="VkDevice" name="VkFence" type="nodispatch"/>
		<handle parent="VkDevice" name="VkSemaphore" type="nodispatch"/>
		<handle parent="VkDevice" name="VkEvent" type="nodispatch"/>
		<handle parent="VkDevice" name="VkQueryPool" type="nodispatch"/>
		<handle parent="VkDevice" name="VkFramebuffer" type="nodispatch"/>
		<handle parent="VkDevice" name="VkRenderPass" type="nodispatch"/>
		<handle parent="VkDevice" name="VkPipelineCache" type="nodispatch"/>
		<handle parent="VkDevice" name="VkObjectTableNVX" type="nodispatch"/>
		<handle parent="VkDevice" name="VkIndirectCommandsLayoutNVX" type="nodispatch"/>
		<handle parent="VkDevice" name="VkDescriptorUpdateTemplateKHR" type="nodispatch"/>
		<handle parent="VkDevice" name="VkSamplerYcbcrConversionKHR" type="nodispatch"/>
		<handle parent="VkDevice" name="VkValidationCacheEXT" type="nodispatch"/>
		<notation>WSI extensions</notation>
		<handle name="VkDisplayKHR" type="nodispatch"/>
		<handle parent="VkPhysicalDevice,VkDisplayKHR" name="VkDisplayModeKHR" type="nodispatch"/>
		<handle parent="VkInstance" name="VkSurfaceKHR" type="nodispatch"/>
		<handle parent="VkSurfaceKHR" name="VkSwapchainKHR" type="nodispatch"/>
		<handle parent="VkInstance" name="VkDebugReportCallbackEXT" type="nodispatch"/>
		<notation>Types generated from corresponding enums tags below</notation>
		<enumeration name="VkAttachmentLoadOp"/>
		<enumeration name="VkAttachmentStoreOp"/>
		<enumeration name="VkBlendFactor"/>
		<enumeration name="VkBlendOp"/>
		<enumeration name="VkBorderColor"/>
		<enumeration name="VkFramebufferCreateFlagBits"/>
		<enumeration name="VkQueryPoolCreateFlagBits"/>
		<enumeration name="VkRenderPassCreateFlagBits"/>
		<enumeration name="VkSamplerCreateFlagBits"/>
		<enumeration name="VkPipelineCacheHeaderVersion"/>
		<enumeration name="VkPipelineLayoutCreateFlagBits"/>
		<enumeration name="VkPipelineCacheCreateFlagBits"/>
		<enumeration name="VkPipelineDepthStencilStateCreateFlagBits"/>
		<enumeration name="VkPipelineDynamicStateCreateFlagBits"/>
		<enumeration name="VkPipelineColorBlendStateCreateFlagBits"/>
		<enumeration name="VkPipelineMultisampleStateCreateFlagBits"/>
		<enumeration name="VkPipelineRasterizationStateCreateFlagBits"/>
		<enumeration name="VkPipelineViewportStateCreateFlagBits"/>
		<enumeration name="VkPipelineTessellationStateCreateFlagBits"/>
		<enumeration name="VkPipelineInputAssemblyStateCreateFlagBits"/>
		<enumeration name="VkPipelineVertexInputStateCreateFlagBits"/>
		<enumeration name="VkPipelineShaderStageCreateFlagBits"/>
		<enumeration name="VkDescriptorSetLayoutCreateFlagBits"/>
		<enumeration name="VkBufferViewCreateFlagBits"/>
		<enumeration name="VkInstanceCreateFlagBits"/>
		<enumeration name="VkDeviceQueueCreateFlagBits"/>
		<enumeration name="VkBufferCreateFlagBits"/>
		<enumeration name="VkBufferUsageFlagBits"/>
		<enumeration name="VkColorComponentFlagBits"/>
		<enumeration name="VkComponentSwizzle"/>
		<enumeration name="VkCommandPoolCreateFlagBits"/>
		<enumeration name="VkCommandPoolResetFlagBits"/>
		<enumeration name="VkCommandBufferResetFlagBits"/>
		<enumeration name="VkCommandBufferLevel"/>
		<enumeration name="VkCommandBufferUsageFlagBits"/>
		<enumeration name="VkCompareOp"/>
		<enumeration name="VkCullModeFlagBits"/>
		<enumeration name="VkDescriptorType"/>
		<enumeration name="VkDeviceCreateFlagBits"/>
		<enumeration name="VkDynamicState"/>
		<enumeration name="VkFenceCreateFlagBits"/>
		<enumeration name="VkPolygonMode"/>
		<enumeration name="VkFormat"/>
		<enumeration name="VkFormatFeatureFlagBits"/>
		<enumeration name="VkFrontFace"/>
		<enumeration name="VkImageAspectFlagBits"/>
		<enumeration name="VkImageCreateFlagBits"/>
		<enumeration name="VkImageLayout"/>
		<enumeration name="VkImageTiling"/>
		<enumeration name="VkImageType"/>
		<enumeration name="VkImageUsageFlagBits"/>
		<enumeration name="VkImageViewType"/>
		<enumeration name="VkSharingMode"/>
		<enumeration name="VkIndexType"/>
		<enumeration name="VkLogicOp"/>
		<enumeration name="VkMemoryHeapFlagBits"/>
		<enumeration name="VkAccessFlagBits"/>
		<enumeration name="VkMemoryPropertyFlagBits"/>
		<enumeration name="VkPhysicalDeviceType"/>
		<enumeration name="VkPipelineBindPoint"/>
		<enumeration name="VkPipelineCreateFlagBits"/>
		<enumeration name="VkPrimitiveTopology"/>
		<enumeration name="VkQueryControlFlagBits"/>
		<enumeration name="VkQueryPipelineStatisticFlagBits"/>
		<enumeration name="VkQueryResultFlagBits"/>
		<enumeration name="VkQueryType"/>
		<enumeration name="VkQueueFlagBits"/>
		<enumeration name="VkSubpassContents"/>
		<enumeration name="VkResult"/>
		<enumeration name="VkShaderStageFlagBits"/>
		<enumeration name="VkSparseMemoryBindFlagBits"/>
		<enumeration name="VkStencilFaceFlagBits"/>
		<enumeration name="VkStencilOp"/>
		<enumeration name="VkStructureType"/>
		<enumeration name="VkSystemAllocationScope"/>
		<enumeration name="VkInternalAllocationType"/>
		<enumeration name="VkSamplerAddressMode"/>
		<enumeration name="VkFilter"/>
		<enumeration name="VkSamplerMipmapMode"/>
		<enumeration name="VkVertexInputRate"/>
		<enumeration name="VkPipelineStageFlagBits"/>
		<enumeration name="VkSparseImageFormatFlagBits"/>
		<enumeration name="VkSampleCountFlagBits"/>
		<enumeration name="VkAttachmentDescriptionFlagBits"/>
		<enumeration name="VkDescriptorPoolCreateFlagBits"/>
		<enumeration name="VkDependencyFlagBits"/>
		<enumeration name="VkObjectType"/>
		<notation>Extensions</notation>
		<enumeration name="VkIndirectCommandsLayoutUsageFlagBitsNVX"/>
		<enumeration name="VkIndirectCommandsTokenTypeNVX"/>
		<enumeration name="VkObjectEntryUsageFlagBitsNVX"/>
		<enumeration name="VkObjectEntryTypeNVX"/>
		<enumeration name="VkDescriptorUpdateTemplateTypeKHR"/>
		<enumeration name="VkViewportCoordinateSwizzleNV"/>
		<enumeration name="VkDiscardRectangleModeEXT"/>
		<enumeration name="VkSubpassDescriptionFlagBits"/>
		<enumeration name="VkPointClippingBehaviorKHR"/>
		<enumeration name="VkCoverageModulationModeNV"/>
		<enumeration name="VkValidationCacheHeaderVersionEXT"/>
		<enumeration name="VkShaderInfoTypeAMD"/>
		<enumeration name="VkQueueGlobalPriorityEXT"/>
		<enumeration name="VkConservativeRasterizationModeEXT"/>
		<notation>WSI extensions</notation>
		<enumeration name="VkColorSpaceKHR"/>
		<enumeration name="VkCompositeAlphaFlagBitsKHR"/>
		<enumeration name="VkDisplayPlaneAlphaFlagBitsKHR"/>
		<enumeration name="VkPresentModeKHR"/>
		<enumeration name="VkSurfaceTransformFlagBitsKHR"/>
		<enumeration name="VkDebugReportFlagBitsEXT"/>
		<enumeration name="VkDebugReportObjectTypeEXT"/>
		<enumeration name="VkRasterizationOrderAMD"/>
		<enumeration name="VkExternalMemoryHandleTypeFlagBitsNV"/>
		<enumeration name="VkExternalMemoryFeatureFlagBitsNV"/>
		<enumeration name="VkValidationCheckEXT"/>
		<enumeration name="VkExternalMemoryHandleTypeFlagBitsKHR"/>
		<enumeration name="VkExternalMemoryFeatureFlagBitsKHR"/>
		<enumeration name="VkExternalSemaphoreHandleTypeFlagBitsKHR"/>
		<enumeration name="VkExternalSemaphoreFeatureFlagBitsKHR"/>
		<enumeration name="VkSemaphoreImportFlagBitsKHR"/>
		<enumeration name="VkExternalFenceHandleTypeFlagBitsKHR"/>
		<enumeration name="VkExternalFenceFeatureFlagBitsKHR"/>
		<enumeration name="VkFenceImportFlagBitsKHR"/>
		<enumeration name="VkSurfaceCounterFlagBitsEXT"/>
		<enumeration name="VkDisplayPowerStateEXT"/>
		<enumeration name="VkDeviceEventTypeEXT"/>
		<enumeration name="VkDisplayEventTypeEXT"/>
		<enumeration name="VkPeerMemoryFeatureFlagBitsKHX"/>
		<enumeration name="VkMemoryAllocateFlagBitsKHX"/>
		<enumeration name="VkDeviceGroupPresentModeFlagBitsKHX"/>
		<enumeration name="VkSwapchainCreateFlagBitsKHR"/>
		<enumeration name="VkTessellationDomainOriginKHR"/>
		<enumeration name="VkSamplerYcbcrModelConversionKHR"/>
		<enumeration name="VkSamplerYcbcrRangeKHR"/>
		<enumeration name="VkChromaLocationKHR"/>
		<enumeration name="VkSamplerReductionModeEXT"/>
		<enumeration name="VkBlendOverlapEXT"/>
		<notation>The PFN_vk*Function types are used by VkAllocationCallbacks below</notation>
		<funcptr name="PFN_vkInternalAllocationNotification">
			<return-type basetype="void"/>
			<param name="pUserData" basetype="void" reference="pointer"/>
			<param basetype="size_t" name="size"/>
			<param basetype="VkInternalAllocationType" name="allocationType"/>
			<param basetype="VkSystemAllocationScope" name="allocationScope"/>
		</funcptr>
		<funcptr name="PFN_vkInternalFreeNotification">
			<return-type basetype="void"/>
			<param name="pUserData" basetype="void" reference="pointer"/>
			<param basetype="size_t" name="size"/>
			<param basetype="VkInternalAllocationType" name="allocationType"/>
			<param basetype="VkSystemAllocationScope" name="allocationScope"/>
		</funcptr>
		<funcptr name="PFN_vkReallocationFunction">
			<return-type basetype="void" reference="pointer"/>
			<param name="pUserData" basetype="void" reference="pointer"/>
			<param name="pOriginal" basetype="void" reference="pointer"/>
			<param basetype="size_t" name="size"/>
			<param basetype="size_t" name="alignment"/>
			<param basetype="VkSystemAllocationScope" name="allocationScope"/>
		</funcptr>
		<funcptr name="PFN_vkAllocationFunction">
			<return-type basetype="void" reference="pointer"/>
			<param name="pUserData" basetype="void" reference="pointer"/>
			<param basetype="size_t" name="size"/>
			<param basetype="size_t" name="alignment"/>
			<param basetype="VkSystemAllocationScope" name="allocationScope"/>
		</funcptr>
		<funcptr name="PFN_vkFreeFunction">
			<return-type basetype="void"/>
			<param name="pUserData" basetype="void" reference="pointer"/>
			<param name="pMemory" basetype="void" reference="pointer"/>
		</funcptr>
		<notation>The PFN_vkVoidFunction type are used by VkGet*ProcAddr below</notation>
		<funcptr name="PFN_vkVoidFunction">
			<return-type basetype="void"/>
		</funcptr>
		<notation>The PFN_vkDebugReportCallbackEXT type are used by the DEBUG_REPORT extension</notation>
		<funcptr name="PFN_vkDebugReportCallbackEXT">
			<return-type basetype="VkBool32"/>
			<param basetype="VkDebugReportFlagsEXT" name="flags"/>
			<param basetype="VkDebugReportObjectTypeEXT" name="objectType"/>
			<param basetype="uint64_t" name="object"/>
			<param basetype="size_t" name="location"/>
			<param basetype="int32_t" name="messageCode"/>
			<param name="pLayerPrefix" const="true" basetype="char" reference="pointer"/>
			<param name="pMessage" const="true" basetype="char" reference="pointer"/>
			<param name="pUserData" basetype="void" reference="pointer"/>
		</funcptr>
		<notation>Struct types</notation>
		<struct name="VkOffset2D">
			<member basetype="int32_t" name="x"/>
			<member basetype="int32_t" name="y"/>
		</struct>
		<struct name="VkOffset3D">
			<member basetype="int32_t" name="x"/>
			<member basetype="int32_t" name="y"/>
			<member basetype="int32_t" name="z"/>
		</struct>
		<struct name="VkExtent2D">
			<member basetype="uint32_t" name="width"/>
			<member basetype="uint32_t" name="height"/>
		</struct>
		<struct name="VkExtent3D">
			<member basetype="uint32_t" name="width"/>
			<member basetype="uint32_t" name="height"/>
			<member basetype="uint32_t" name="depth"/>
		</struct>
		<struct name="VkViewport">
			<member basetype="float" name="x"/>
			<member basetype="float" name="y"/>
			<member basetype="float" name="width"/>
			<member basetype="float" name="height"/>
			<member basetype="float" name="minDepth"/>
			<member basetype="float" name="maxDepth"/>
		</struct>
		<struct name="VkRect2D">
			<member basetype="VkOffset2D" name="offset"/>
			<member basetype="VkExtent2D" name="extent"/>
		</struct>
		<struct name="VkClearRect">
			<member basetype="VkRect2D" name="rect"/>
			<member basetype="uint32_t" name="baseArrayLayer"/>
			<member basetype="uint32_t" name="layerCount"/>
		</struct>
		<struct name="VkComponentMapping">
			<member basetype="VkComponentSwizzle" name="r"/>
			<member basetype="VkComponentSwizzle" name="g"/>
			<member basetype="VkComponentSwizzle" name="b"/>
			<member basetype="VkComponentSwizzle" name="a"/>
		</struct>
		<struct name="VkPhysicalDeviceProperties" is-return="true">
			<member basetype="uint32_t" name="apiVersion"/>
			<member basetype="uint32_t" name="driverVersion"/>
			<member basetype="uint32_t" name="vendorID"/>
			<member basetype="uint32_t" name="deviceID"/>
			<member basetype="VkPhysicalDeviceType" name="deviceType"/>
			<member name="deviceName" size-enumref="VK_MAX_PHYSICAL_DEVICE_NAME_SIZE" basetype="char" array="static"/>
			<member name="pipelineCacheUUID" size-enumref="VK_UUID_SIZE" basetype="uint8_t" array="static"/>
			<member basetype="VkPhysicalDeviceLimits" name="limits"/>
			<member basetype="VkPhysicalDeviceSparseProperties" name="sparseProperties"/>
		</struct>
		<struct name="VkExtensionProperties" is-return="true">
			<member name="extensionName" size-enumref="VK_MAX_EXTENSION_NAME_SIZE" basetype="char" array="static">
				<notation>extension name</notation>
			</member>
			<member basetype="uint32_t" name="specVersion">
				<notation>version of the extension specification implemented</notation>
			</member>
		</struct>
		<struct name="VkLayerProperties" is-return="true">
			<member name="layerName" size-enumref="VK_MAX_EXTENSION_NAME_SIZE" basetype="char" array="static">
				<notation>layer name</notation>
			</member>
			<member basetype="uint32_t" name="specVersion">
				<notation>version of the layer specification implemented</notation>
			</member>
			<member basetype="uint32_t" name="implementationVersion">
				<notation>build or release version of the layer&apos;s library</notation>
			</member>
			<member name="description" size-enumref="VK_MAX_DESCRIPTION_SIZE" basetype="char" array="static">
				<notation>Free-form description of the layer</notation>
			</member>
		</struct>
		<struct name="VkApplicationInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_APPLICATION_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member array="dynamic" null-terminate="true" optional="true" name="pApplicationName" reference="pointer" const="true" basetype="char"/>
			<member basetype="uint32_t" name="applicationVersion"/>
			<member array="dynamic" null-terminate="true" optional="true" name="pEngineName" reference="pointer" const="true" basetype="char"/>
			<member basetype="uint32_t" name="engineVersion"/>
			<member basetype="uint32_t" name="apiVersion"/>
		</struct>
		<struct name="VkAllocationCallbacks">
			<member name="pUserData" reference="pointer" basetype="void" optional="true"/>
			<member basetype="PFN_vkAllocationFunction" name="pfnAllocation"/>
			<member basetype="PFN_vkReallocationFunction" name="pfnReallocation"/>
			<member basetype="PFN_vkFreeFunction" name="pfnFree"/>
			<member name="pfnInternalAllocation" basetype="PFN_vkInternalAllocationNotification" optional="true"/>
			<member name="pfnInternalFree" basetype="PFN_vkInternalFreeNotification" optional="true"/>
		</struct>
		<struct name="VkDeviceQueueCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkDeviceQueueCreateFlags" optional="true"/>
			<member basetype="uint32_t" name="queueFamilyIndex"/>
			<member basetype="uint32_t" name="queueCount"/>
			<member array="dynamic" reference="pointer" size="queueCount" name="pQueuePriorities" const="true" basetype="float"/>
		</struct>
		<struct name="VkDeviceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkDeviceCreateFlags" optional="true"/>
			<member basetype="uint32_t" name="queueCreateInfoCount"/>
			<member array="dynamic" reference="pointer" size="queueCreateInfoCount" name="pQueueCreateInfos" const="true" basetype="VkDeviceQueueCreateInfo"/>
			<member name="enabledLayerCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" null-terminate="true" reference="pointer-const-pointer" size="enabledLayerCount" name="ppEnabledLayerNames" const="true" basetype="char">
				<notation>Ordered list of layer names to be enabled</notation>
			</member>
			<member name="enabledExtensionCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" null-terminate="true" reference="pointer-const-pointer" size="enabledExtensionCount" name="ppEnabledExtensionNames" const="true" basetype="char"/>
			<member name="pEnabledFeatures" optional="true" reference="pointer" const="true" basetype="VkPhysicalDeviceFeatures"/>
		</struct>
		<struct name="VkInstanceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkInstanceCreateFlags" optional="true"/>
			<member name="pApplicationInfo" optional="true" reference="pointer" const="true" basetype="VkApplicationInfo"/>
			<member name="enabledLayerCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" null-terminate="true" reference="pointer-const-pointer" size="enabledLayerCount" name="ppEnabledLayerNames" const="true" basetype="char">
				<notation>Ordered list of layer names to be enabled</notation>
			</member>
			<member name="enabledExtensionCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" null-terminate="true" reference="pointer-const-pointer" size="enabledExtensionCount" name="ppEnabledExtensionNames" const="true" basetype="char">
				<notation>Extension names to be enabled</notation>
			</member>
		</struct>
		<struct name="VkQueueFamilyProperties" is-return="true">
			<member name="queueFlags" basetype="VkQueueFlags" optional="true">
				<notation>Queue flags</notation>
			</member>
			<member basetype="uint32_t" name="queueCount"/>
			<member basetype="uint32_t" name="timestampValidBits"/>
			<member basetype="VkExtent3D" name="minImageTransferGranularity">
				<notation>Minimum alignment requirement for image transfers</notation>
			</member>
		</struct>
		<struct name="VkPhysicalDeviceMemoryProperties" is-return="true">
			<member basetype="uint32_t" name="memoryTypeCount"/>
			<member name="memoryTypes" size-enumref="VK_MAX_MEMORY_TYPES" basetype="VkMemoryType" array="static"/>
			<member basetype="uint32_t" name="memoryHeapCount"/>
			<member name="memoryHeaps" size-enumref="VK_MAX_MEMORY_HEAPS" basetype="VkMemoryHeap" array="static"/>
		</struct>
		<struct name="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDeviceSize" name="allocationSize">
				<notation>Size of memory allocation</notation>
			</member>
			<member basetype="uint32_t" name="memoryTypeIndex">
				<notation>Index of the of the memory type to allocate from</notation>
			</member>
		</struct>
		<struct name="VkMemoryRequirements" is-return="true">
			<member basetype="VkDeviceSize" name="size">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkDeviceSize" name="alignment">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="uint32_t" name="memoryTypeBits">
				<notation>Bitmask of the allowed memory type indices into memoryTypes[] for this object</notation>
			</member>
		</struct>
		<struct name="VkSparseImageFormatProperties" is-return="true">
			<member name="aspectMask" basetype="VkImageAspectFlags" optional="true"/>
			<member basetype="VkExtent3D" name="imageGranularity"/>
			<member name="flags" basetype="VkSparseImageFormatFlags" optional="true"/>
		</struct>
		<struct name="VkSparseImageMemoryRequirements" is-return="true">
			<member basetype="VkSparseImageFormatProperties" name="formatProperties"/>
			<member basetype="uint32_t" name="imageMipTailFirstLod"/>
			<member basetype="VkDeviceSize" name="imageMipTailSize">
				<notation>Specified in bytes, must be a multiple of sparse block size in bytes / alignment</notation>
			</member>
			<member basetype="VkDeviceSize" name="imageMipTailOffset">
				<notation>Specified in bytes, must be a multiple of sparse block size in bytes / alignment</notation>
			</member>
			<member basetype="VkDeviceSize" name="imageMipTailStride">
				<notation>Specified in bytes, must be a multiple of sparse block size in bytes / alignment</notation>
			</member>
		</struct>
		<struct name="VkMemoryType" is-return="true">
			<member name="propertyFlags" basetype="VkMemoryPropertyFlags" optional="true">
				<notation>Memory properties of this memory type</notation>
			</member>
			<member basetype="uint32_t" name="heapIndex">
				<notation>Index of the memory heap allocations of this memory type are taken from</notation>
			</member>
		</struct>
		<struct name="VkMemoryHeap" is-return="true">
			<member basetype="VkDeviceSize" name="size">
				<notation>Available memory in the heap</notation>
			</member>
			<member name="flags" basetype="VkMemoryHeapFlags" optional="true">
				<notation>Flags for the heap</notation>
			</member>
		</struct>
		<struct name="VkMappedMemoryRange">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDeviceMemory" name="memory">
				<notation>Mapped memory object</notation>
			</member>
			<member basetype="VkDeviceSize" name="offset">
				<notation>Offset within the memory object where the range starts</notation>
			</member>
			<member basetype="VkDeviceSize" name="size">
				<notation>Size of the range within the memory object</notation>
			</member>
		</struct>
		<struct name="VkFormatProperties" is-return="true">
			<member name="linearTilingFeatures" basetype="VkFormatFeatureFlags" optional="true">
				<notation>Format features in case of linear tiling</notation>
			</member>
			<member name="optimalTilingFeatures" basetype="VkFormatFeatureFlags" optional="true">
				<notation>Format features in case of optimal tiling</notation>
			</member>
			<member name="bufferFeatures" basetype="VkFormatFeatureFlags" optional="true">
				<notation>Format features supported by buffers</notation>
			</member>
		</struct>
		<struct name="VkImageFormatProperties" is-return="true">
			<member basetype="VkExtent3D" name="maxExtent">
				<notation>max image dimensions for this resource type</notation>
			</member>
			<member basetype="uint32_t" name="maxMipLevels">
				<notation>max number of mipmap levels for this resource type</notation>
			</member>
			<member basetype="uint32_t" name="maxArrayLayers">
				<notation>max array size for this resource type</notation>
			</member>
			<member name="sampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported sample counts for this resource type</notation>
			</member>
			<member basetype="VkDeviceSize" name="maxResourceSize">
				<notation>max size (in bytes) of this resource type</notation>
			</member>
		</struct>
		<struct name="VkDescriptorBufferInfo">
			<member basetype="VkBuffer" name="buffer">
				<notation>Buffer used for this descriptor slot when the descriptor is UNIFORM_BUFFER[_DYNAMIC] or STORAGE_BUFFER[_DYNAMIC]. VK_NULL_HANDLE otherwise.</notation>
			</member>
			<member basetype="VkDeviceSize" name="offset">
				<notation>Base offset from buffer start in bytes to update in the descriptor set.</notation>
			</member>
			<member basetype="VkDeviceSize" name="range">
				<notation>Size in bytes of the buffer resource for this descriptor update.</notation>
			</member>
		</struct>
		<struct name="VkDescriptorImageInfo">
			<member name="sampler" auto-validity="false" basetype="VkSampler">
				<notation>Sampler to write to the descriptor in case it is a SAMPLER or COMBINED_IMAGE_SAMPLER descriptor. Ignored otherwise.</notation>
			</member>
			<member name="imageView" auto-validity="false" basetype="VkImageView">
				<notation>Image view to write to the descriptor in case it is a SAMPLED_IMAGE, STORAGE_IMAGE, COMBINED_IMAGE_SAMPLER, or INPUT_ATTACHMENT descriptor. Ignored otherwise.</notation>
			</member>
			<member name="imageLayout" auto-validity="false" basetype="VkImageLayout">
				<notation>Layout the image is expected to be in when accessed using this descriptor (only used if imageView is not VK_NULL_HANDLE).</notation>
			</member>
		</struct>
		<struct name="VkWriteDescriptorSet">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="dstSet" auto-validity="false" basetype="VkDescriptorSet">
				<notation>Destination descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="dstBinding">
				<notation>Binding within the destination descriptor set to write</notation>
			</member>
			<member basetype="uint32_t" name="dstArrayElement">
				<notation>Array element within the destination binding to write</notation>
			</member>
			<member basetype="uint32_t" name="descriptorCount">
				<notation>Number of descriptors to write (determines the size of the array pointed by pDescriptors)</notation>
			</member>
			<member basetype="VkDescriptorType" name="descriptorType">
				<notation>Descriptor type to write (determines which members of the array pointed by pDescriptors are going to be used)</notation>
			</member>
			<member array="dynamic" name="pImageInfo" reference="pointer" size="descriptorCount" auto-validity="false" const="true" basetype="VkDescriptorImageInfo">
				<notation>Sampler, image view, and layout for SAMPLER, COMBINED_IMAGE_SAMPLER, {SAMPLED,STORAGE}_IMAGE, and INPUT_ATTACHMENT descriptor types.</notation>
			</member>
			<member array="dynamic" name="pBufferInfo" reference="pointer" size="descriptorCount" auto-validity="false" const="true" basetype="VkDescriptorBufferInfo">
				<notation>Raw buffer, size, and offset for {UNIFORM,STORAGE}_BUFFER[_DYNAMIC] descriptor types.</notation>
			</member>
			<member array="dynamic" name="pTexelBufferView" reference="pointer" size="descriptorCount" auto-validity="false" const="true" basetype="VkBufferView">
				<notation>Buffer view to write to the descriptor for {UNIFORM,STORAGE}_TEXEL_BUFFER descriptor types.</notation>
			</member>
		</struct>
		<struct name="VkCopyDescriptorSet">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDescriptorSet" name="srcSet">
				<notation>Source descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="srcBinding">
				<notation>Binding within the source descriptor set to copy from</notation>
			</member>
			<member basetype="uint32_t" name="srcArrayElement">
				<notation>Array element within the source binding to copy from</notation>
			</member>
			<member basetype="VkDescriptorSet" name="dstSet">
				<notation>Destination descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="dstBinding">
				<notation>Binding within the destination descriptor set to copy to</notation>
			</member>
			<member basetype="uint32_t" name="dstArrayElement">
				<notation>Array element within the destination binding to copy to</notation>
			</member>
			<member basetype="uint32_t" name="descriptorCount">
				<notation>Number of descriptors to write (determines the size of the array pointed by pDescriptors)</notation>
			</member>
		</struct>
		<struct name="VkBufferCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkBufferCreateFlags" optional="true">
				<notation>Buffer creation flags</notation>
			</member>
			<member basetype="VkDeviceSize" name="size">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkBufferUsageFlags" name="usage">
				<notation>Buffer usage flags</notation>
			</member>
			<member basetype="VkSharingMode" name="sharingMode"/>
			<member name="queueFamilyIndexCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" name="pQueueFamilyIndices" reference="pointer" size="queueFamilyIndexCount" auto-validity="false" const="true" basetype="uint32_t"/>
		</struct>
		<struct name="VkBufferViewCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkBufferViewCreateFlags" optional="true"/>
			<member basetype="VkBuffer" name="buffer"/>
			<member basetype="VkFormat" name="format">
				<notation>Optionally specifies format of elements</notation>
			</member>
			<member basetype="VkDeviceSize" name="offset">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkDeviceSize" name="range">
				<notation>View size specified in bytes</notation>
			</member>
		</struct>
		<struct name="VkImageSubresource">
			<member basetype="VkImageAspectFlags" name="aspectMask"/>
			<member basetype="uint32_t" name="mipLevel"/>
			<member basetype="uint32_t" name="arrayLayer"/>
		</struct>
		<struct name="VkImageSubresourceLayers">
			<member basetype="VkImageAspectFlags" name="aspectMask"/>
			<member basetype="uint32_t" name="mipLevel"/>
			<member basetype="uint32_t" name="baseArrayLayer"/>
			<member basetype="uint32_t" name="layerCount"/>
		</struct>
		<struct name="VkImageSubresourceRange">
			<member basetype="VkImageAspectFlags" name="aspectMask"/>
			<member basetype="uint32_t" name="baseMipLevel"/>
			<member basetype="uint32_t" name="levelCount"/>
			<member basetype="uint32_t" name="baseArrayLayer"/>
			<member basetype="uint32_t" name="layerCount"/>
		</struct>
		<struct name="VkMemoryBarrier">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_BARRIER"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="srcAccessMask" basetype="VkAccessFlags" optional="true">
				<notation>Memory accesses from the source of the dependency to synchronize</notation>
			</member>
			<member name="dstAccessMask" basetype="VkAccessFlags" optional="true">
				<notation>Memory accesses from the destination of the dependency to synchronize</notation>
			</member>
		</struct>
		<struct name="VkBufferMemoryBarrier">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="srcAccessMask" basetype="VkAccessFlags" optional="true">
				<notation>Memory accesses from the source of the dependency to synchronize</notation>
			</member>
			<member name="dstAccessMask" basetype="VkAccessFlags" optional="true">
				<notation>Memory accesses from the destination of the dependency to synchronize</notation>
			</member>
			<member basetype="uint32_t" name="srcQueueFamilyIndex">
				<notation>Queue family to transition ownership from</notation>
			</member>
			<member basetype="uint32_t" name="dstQueueFamilyIndex">
				<notation>Queue family to transition ownership to</notation>
			</member>
			<member basetype="VkBuffer" name="buffer">
				<notation>Buffer to sync</notation>
			</member>
			<member basetype="VkDeviceSize" name="offset">
				<notation>Offset within the buffer to sync</notation>
			</member>
			<member basetype="VkDeviceSize" name="size">
				<notation>Amount of bytes to sync</notation>
			</member>
		</struct>
		<struct name="VkImageMemoryBarrier">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="srcAccessMask" basetype="VkAccessFlags" optional="true">
				<notation>Memory accesses from the source of the dependency to synchronize</notation>
			</member>
			<member name="dstAccessMask" basetype="VkAccessFlags" optional="true">
				<notation>Memory accesses from the destination of the dependency to synchronize</notation>
			</member>
			<member basetype="VkImageLayout" name="oldLayout">
				<notation>Current layout of the image</notation>
			</member>
			<member basetype="VkImageLayout" name="newLayout">
				<notation>New layout to transition the image to</notation>
			</member>
			<member basetype="uint32_t" name="srcQueueFamilyIndex">
				<notation>Queue family to transition ownership from</notation>
			</member>
			<member basetype="uint32_t" name="dstQueueFamilyIndex">
				<notation>Queue family to transition ownership to</notation>
			</member>
			<member basetype="VkImage" name="image">
				<notation>Image to sync</notation>
			</member>
			<member basetype="VkImageSubresourceRange" name="subresourceRange">
				<notation>Subresource range to sync</notation>
			</member>
		</struct>
		<struct name="VkImageCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkImageCreateFlags" optional="true">
				<notation>Image creation flags</notation>
			</member>
			<member basetype="VkImageType" name="imageType"/>
			<member basetype="VkFormat" name="format"/>
			<member basetype="VkExtent3D" name="extent"/>
			<member basetype="uint32_t" name="mipLevels"/>
			<member basetype="uint32_t" name="arrayLayers"/>
			<member basetype="VkSampleCountFlagBits" name="samples"/>
			<member basetype="VkImageTiling" name="tiling"/>
			<member basetype="VkImageUsageFlags" name="usage">
				<notation>Image usage flags</notation>
			</member>
			<member basetype="VkSharingMode" name="sharingMode">
				<notation>Cross-queue-family sharing mode</notation>
			</member>
			<member name="queueFamilyIndexCount" basetype="uint32_t" optional="true">
				<notation>Number of queue families to share across</notation>
			</member>
			<member array="dynamic" name="pQueueFamilyIndices" reference="pointer" size="queueFamilyIndexCount" auto-validity="false" const="true" basetype="uint32_t">
				<notation>Array of queue family indices to share across</notation>
			</member>
			<member basetype="VkImageLayout" name="initialLayout">
				<notation>Initial image layout for all subresources</notation>
			</member>
		</struct>
		<struct name="VkSubresourceLayout" is-return="true">
			<member basetype="VkDeviceSize" name="offset">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkDeviceSize" name="size">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkDeviceSize" name="rowPitch">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkDeviceSize" name="arrayPitch">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkDeviceSize" name="depthPitch">
				<notation>Specified in bytes</notation>
			</member>
		</struct>
		<struct name="VkImageViewCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkImageViewCreateFlags" optional="true"/>
			<member basetype="VkImage" name="image"/>
			<member basetype="VkImageViewType" name="viewType"/>
			<member basetype="VkFormat" name="format"/>
			<member basetype="VkComponentMapping" name="components"/>
			<member basetype="VkImageSubresourceRange" name="subresourceRange"/>
		</struct>
		<struct name="VkBufferCopy">
			<member basetype="VkDeviceSize" name="srcOffset">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkDeviceSize" name="dstOffset">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkDeviceSize" name="size">
				<notation>Specified in bytes</notation>
			</member>
		</struct>
		<struct name="VkSparseMemoryBind">
			<member basetype="VkDeviceSize" name="resourceOffset">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="VkDeviceSize" name="size">
				<notation>Specified in bytes</notation>
			</member>
			<member name="memory" basetype="VkDeviceMemory" optional="true"/>
			<member basetype="VkDeviceSize" name="memoryOffset">
				<notation>Specified in bytes</notation>
			</member>
			<member name="flags" basetype="VkSparseMemoryBindFlags" optional="true"/>
		</struct>
		<struct name="VkSparseImageMemoryBind">
			<member basetype="VkImageSubresource" name="subresource"/>
			<member basetype="VkOffset3D" name="offset"/>
			<member basetype="VkExtent3D" name="extent"/>
			<member name="memory" basetype="VkDeviceMemory" optional="true"/>
			<member basetype="VkDeviceSize" name="memoryOffset">
				<notation>Specified in bytes</notation>
			</member>
			<member name="flags" basetype="VkSparseMemoryBindFlags" optional="true"/>
		</struct>
		<struct name="VkSparseBufferMemoryBindInfo">
			<member basetype="VkBuffer" name="buffer"/>
			<member basetype="uint32_t" name="bindCount"/>
			<member array="dynamic" reference="pointer" size="bindCount" name="pBinds" const="true" basetype="VkSparseMemoryBind"/>
		</struct>
		<struct name="VkSparseImageOpaqueMemoryBindInfo">
			<member basetype="VkImage" name="image"/>
			<member basetype="uint32_t" name="bindCount"/>
			<member array="dynamic" reference="pointer" size="bindCount" name="pBinds" const="true" basetype="VkSparseMemoryBind"/>
		</struct>
		<struct name="VkSparseImageMemoryBindInfo">
			<member basetype="VkImage" name="image"/>
			<member basetype="uint32_t" name="bindCount"/>
			<member array="dynamic" reference="pointer" size="bindCount" name="pBinds" const="true" basetype="VkSparseImageMemoryBind"/>
		</struct>
		<struct name="VkBindSparseInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="waitSemaphoreCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="waitSemaphoreCount" name="pWaitSemaphores" const="true" basetype="VkSemaphore"/>
			<member name="bufferBindCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="bufferBindCount" name="pBufferBinds" const="true" basetype="VkSparseBufferMemoryBindInfo"/>
			<member name="imageOpaqueBindCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="imageOpaqueBindCount" name="pImageOpaqueBinds" const="true" basetype="VkSparseImageOpaqueMemoryBindInfo"/>
			<member name="imageBindCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="imageBindCount" name="pImageBinds" const="true" basetype="VkSparseImageMemoryBindInfo"/>
			<member name="signalSemaphoreCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="signalSemaphoreCount" name="pSignalSemaphores" const="true" basetype="VkSemaphore"/>
		</struct>
		<struct name="VkImageCopy">
			<member basetype="VkImageSubresourceLayers" name="srcSubresource"/>
			<member basetype="VkOffset3D" name="srcOffset">
				<notation>Specified in pixels for both compressed and uncompressed images</notation>
			</member>
			<member basetype="VkImageSubresourceLayers" name="dstSubresource"/>
			<member basetype="VkOffset3D" name="dstOffset">
				<notation>Specified in pixels for both compressed and uncompressed images</notation>
			</member>
			<member basetype="VkExtent3D" name="extent">
				<notation>Specified in pixels for both compressed and uncompressed images</notation>
			</member>
		</struct>
		<struct name="VkImageBlit">
			<member basetype="VkImageSubresourceLayers" name="srcSubresource"/>
			<member name="srcOffsets" size="2" basetype="VkOffset3D" array="static">
				<notation>Specified in pixels for both compressed and uncompressed images</notation>
			</member>
			<member basetype="VkImageSubresourceLayers" name="dstSubresource"/>
			<member name="dstOffsets" size="2" basetype="VkOffset3D" array="static">
				<notation>Specified in pixels for both compressed and uncompressed images</notation>
			</member>
		</struct>
		<struct name="VkBufferImageCopy">
			<member basetype="VkDeviceSize" name="bufferOffset">
				<notation>Specified in bytes</notation>
			</member>
			<member basetype="uint32_t" name="bufferRowLength">
				<notation>Specified in texels</notation>
			</member>
			<member basetype="uint32_t" name="bufferImageHeight"/>
			<member basetype="VkImageSubresourceLayers" name="imageSubresource"/>
			<member basetype="VkOffset3D" name="imageOffset">
				<notation>Specified in pixels for both compressed and uncompressed images</notation>
			</member>
			<member basetype="VkExtent3D" name="imageExtent">
				<notation>Specified in pixels for both compressed and uncompressed images</notation>
			</member>
		</struct>
		<struct name="VkImageResolve">
			<member basetype="VkImageSubresourceLayers" name="srcSubresource"/>
			<member basetype="VkOffset3D" name="srcOffset"/>
			<member basetype="VkImageSubresourceLayers" name="dstSubresource"/>
			<member basetype="VkOffset3D" name="dstOffset"/>
			<member basetype="VkExtent3D" name="extent"/>
		</struct>
		<struct name="VkShaderModuleCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkShaderModuleCreateFlags" optional="true"/>
			<member basetype="size_t" name="codeSize">
				<notation>Specified in bytes</notation>
			</member>
			<member array="dynamic" name="pCode" reference="pointer" size="latexmath:[codeSize \over 4]" c-size="codeSize / 4" const="true" basetype="uint32_t">
				<notation>Binary code of size codeSize</notation>
			</member>
		</struct>
		<struct name="VkDescriptorSetLayoutBinding">
			<member basetype="uint32_t" name="binding">
				<notation>Binding number for this entry</notation>
			</member>
			<member basetype="VkDescriptorType" name="descriptorType">
				<notation>Type of the descriptors in this binding</notation>
			</member>
			<member name="descriptorCount" basetype="uint32_t" optional="true">
				<notation>Number of descriptors in this binding</notation>
			</member>
			<member name="stageFlags" auto-validity="false" basetype="VkShaderStageFlags">
				<notation>Shader stages this binding is visible to</notation>
			</member>
			<member array="dynamic" name="pImmutableSamplers" reference="pointer" optional="true" size="descriptorCount" auto-validity="false" const="true" basetype="VkSampler">
				<notation>Immutable samplers (used if descriptor type is SAMPLER or COMBINED_IMAGE_SAMPLER, is either NULL or contains count number of elements)</notation>
			</member>
		</struct>
		<struct name="VkDescriptorSetLayoutCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkDescriptorSetLayoutCreateFlags" optional="true"/>
			<member name="bindingCount" basetype="uint32_t" optional="true">
				<notation>Number of bindings in the descriptor set layout</notation>
			</member>
			<member array="dynamic" reference="pointer" size="bindingCount" name="pBindings" const="true" basetype="VkDescriptorSetLayoutBinding">
				<notation>Array of descriptor set layout bindings</notation>
			</member>
		</struct>
		<struct name="VkDescriptorPoolSize">
			<member basetype="VkDescriptorType" name="type"/>
			<member basetype="uint32_t" name="descriptorCount"/>
		</struct>
		<struct name="VkDescriptorPoolCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkDescriptorPoolCreateFlags" optional="true"/>
			<member basetype="uint32_t" name="maxSets"/>
			<member basetype="uint32_t" name="poolSizeCount"/>
			<member array="dynamic" reference="pointer" size="poolSizeCount" name="pPoolSizes" const="true" basetype="VkDescriptorPoolSize"/>
		</struct>
		<struct name="VkDescriptorSetAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDescriptorPool" name="descriptorPool"/>
			<member basetype="uint32_t" name="descriptorSetCount"/>
			<member array="dynamic" reference="pointer" size="descriptorSetCount" name="pSetLayouts" const="true" basetype="VkDescriptorSetLayout"/>
		</struct>
		<struct name="VkSpecializationMapEntry">
			<member basetype="uint32_t" name="constantID">
				<notation>The SpecConstant ID specified in the BIL</notation>
			</member>
			<member basetype="uint32_t" name="offset">
				<notation>Offset of the value in the data block</notation>
			</member>
			<member basetype="size_t" name="size">
				<notation>Size in bytes of the SpecConstant</notation>
			</member>
		</struct>
		<struct name="VkSpecializationInfo">
			<member name="mapEntryCount" basetype="uint32_t" optional="true">
				<notation>Number of entries in the map</notation>
			</member>
			<member array="dynamic" name="pMapEntries" reference="pointer" size="mapEntryCount" auto-validity="false" const="true" basetype="VkSpecializationMapEntry">
				<notation>Array of map entries</notation>
			</member>
			<member name="dataSize" basetype="size_t" optional="true">
				<notation>Size in bytes of pData</notation>
			</member>
			<member array="dynamic" reference="pointer" size="dataSize" name="pData" const="true" basetype="void">
				<notation>Pointer to SpecConstant data</notation>
			</member>
		</struct>
		<struct name="VkPipelineShaderStageCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineShaderStageCreateFlags" optional="true"/>
			<member basetype="VkShaderStageFlagBits" name="stage">
				<notation>Shader stage</notation>
			</member>
			<member basetype="VkShaderModule" name="module">
				<notation>Module containing entry point</notation>
			</member>
			<member array="dynamic" null-terminate="true" reference="pointer" name="pName" basetype="char" const="true">
				<notation>Null-terminated entry point name</notation>
			</member>
			<member name="pSpecializationInfo" optional="true" reference="pointer" const="true" basetype="VkSpecializationInfo"/>
		</struct>
		<struct name="VkComputePipelineCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineCreateFlags" optional="true">
				<notation>Pipeline creation flags</notation>
			</member>
			<member basetype="VkPipelineShaderStageCreateInfo" name="stage"/>
			<member basetype="VkPipelineLayout" name="layout">
				<notation>Interface layout of the pipeline</notation>
			</member>
			<member name="basePipelineHandle" auto-validity="false" basetype="VkPipeline" optional="true">
				<notation>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of</notation>
			</member>
			<member basetype="int32_t" name="basePipelineIndex">
				<notation>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of</notation>
			</member>
		</struct>
		<struct name="VkVertexInputBindingDescription">
			<member basetype="uint32_t" name="binding">
				<notation>Vertex buffer binding id</notation>
			</member>
			<member basetype="uint32_t" name="stride">
				<notation>Distance between vertices in bytes (0 = no advancement)</notation>
			</member>
			<member basetype="VkVertexInputRate" name="inputRate">
				<notation>The rate at which the vertex data is consumed</notation>
			</member>
		</struct>
		<struct name="VkVertexInputAttributeDescription">
			<member basetype="uint32_t" name="location">
				<notation>location of the shader vertex attrib</notation>
			</member>
			<member basetype="uint32_t" name="binding">
				<notation>Vertex buffer binding id</notation>
			</member>
			<member basetype="VkFormat" name="format">
				<notation>format of source data</notation>
			</member>
			<member basetype="uint32_t" name="offset">
				<notation>Offset of first element in bytes from base of vertex</notation>
			</member>
		</struct>
		<struct name="VkPipelineVertexInputStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineVertexInputStateCreateFlags" optional="true"/>
			<member name="vertexBindingDescriptionCount" basetype="uint32_t" optional="true">
				<notation>number of bindings</notation>
			</member>
			<member array="dynamic" reference="pointer" size="vertexBindingDescriptionCount" name="pVertexBindingDescriptions" const="true" basetype="VkVertexInputBindingDescription"/>
			<member name="vertexAttributeDescriptionCount" basetype="uint32_t" optional="true">
				<notation>number of attributes</notation>
			</member>
			<member array="dynamic" reference="pointer" size="vertexAttributeDescriptionCount" name="pVertexAttributeDescriptions" const="true" basetype="VkVertexInputAttributeDescription"/>
		</struct>
		<struct name="VkPipelineInputAssemblyStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineInputAssemblyStateCreateFlags" optional="true"/>
			<member basetype="VkPrimitiveTopology" name="topology"/>
			<member basetype="VkBool32" name="primitiveRestartEnable"/>
		</struct>
		<struct name="VkPipelineTessellationStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineTessellationStateCreateFlags" optional="true"/>
			<member basetype="uint32_t" name="patchControlPoints"/>
		</struct>
		<struct name="VkPipelineViewportStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineViewportStateCreateFlags" optional="true"/>
			<member basetype="uint32_t" name="viewportCount"/>
			<member array="dynamic" name="pViewports" reference="pointer" optional="true" size="viewportCount" auto-validity="false" const="true" basetype="VkViewport"/>
			<member basetype="uint32_t" name="scissorCount"/>
			<member array="dynamic" name="pScissors" reference="pointer" optional="true" size="scissorCount" auto-validity="false" const="true" basetype="VkRect2D"/>
		</struct>
		<struct name="VkPipelineRasterizationStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineRasterizationStateCreateFlags" optional="true"/>
			<member basetype="VkBool32" name="depthClampEnable"/>
			<member basetype="VkBool32" name="rasterizerDiscardEnable"/>
			<member basetype="VkPolygonMode" name="polygonMode">
				<notation>optional (GL45)</notation>
			</member>
			<member name="cullMode" basetype="VkCullModeFlags" optional="true"/>
			<member basetype="VkFrontFace" name="frontFace"/>
			<member basetype="VkBool32" name="depthBiasEnable"/>
			<member basetype="float" name="depthBiasConstantFactor"/>
			<member basetype="float" name="depthBiasClamp"/>
			<member basetype="float" name="depthBiasSlopeFactor"/>
			<member basetype="float" name="lineWidth"/>
		</struct>
		<struct name="VkPipelineMultisampleStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineMultisampleStateCreateFlags" optional="true"/>
			<member basetype="VkSampleCountFlagBits" name="rasterizationSamples">
				<notation>Number of samples used for rasterization</notation>
			</member>
			<member basetype="VkBool32" name="sampleShadingEnable">
				<notation>optional (GL45)</notation>
			</member>
			<member basetype="float" name="minSampleShading">
				<notation>optional (GL45)</notation>
			</member>
			<member array="dynamic" name="pSampleMask" reference="pointer" optional="true" size="latexmath:[\lceil{\mathit{rasterizationSamples} \over 32}\rceil]" c-size="(rasterizationSamples + 31) / 32" const="true" basetype="VkSampleMask">
				<notation>Array of sampleMask words</notation>
			</member>
			<member basetype="VkBool32" name="alphaToCoverageEnable"/>
			<member basetype="VkBool32" name="alphaToOneEnable"/>
		</struct>
		<struct name="VkPipelineColorBlendAttachmentState">
			<member basetype="VkBool32" name="blendEnable"/>
			<member basetype="VkBlendFactor" name="srcColorBlendFactor"/>
			<member basetype="VkBlendFactor" name="dstColorBlendFactor"/>
			<member basetype="VkBlendOp" name="colorBlendOp"/>
			<member basetype="VkBlendFactor" name="srcAlphaBlendFactor"/>
			<member basetype="VkBlendFactor" name="dstAlphaBlendFactor"/>
			<member basetype="VkBlendOp" name="alphaBlendOp"/>
			<member name="colorWriteMask" basetype="VkColorComponentFlags" optional="true"/>
		</struct>
		<struct name="VkPipelineColorBlendStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineColorBlendStateCreateFlags" optional="true"/>
			<member basetype="VkBool32" name="logicOpEnable"/>
			<member name="logicOp" auto-validity="false" basetype="VkLogicOp"/>
			<member name="attachmentCount" basetype="uint32_t" optional="true">
				<notation># of pAttachments</notation>
			</member>
			<member array="dynamic" reference="pointer" size="attachmentCount" name="pAttachments" const="true" basetype="VkPipelineColorBlendAttachmentState"/>
			<member name="blendConstants" size="4" basetype="float" array="static"/>
		</struct>
		<struct name="VkPipelineDynamicStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineDynamicStateCreateFlags" optional="true"/>
			<member basetype="uint32_t" name="dynamicStateCount"/>
			<member array="dynamic" reference="pointer" size="dynamicStateCount" name="pDynamicStates" const="true" basetype="VkDynamicState"/>
		</struct>
		<struct name="VkStencilOpState">
			<member basetype="VkStencilOp" name="failOp"/>
			<member basetype="VkStencilOp" name="passOp"/>
			<member basetype="VkStencilOp" name="depthFailOp"/>
			<member basetype="VkCompareOp" name="compareOp"/>
			<member basetype="uint32_t" name="compareMask"/>
			<member basetype="uint32_t" name="writeMask"/>
			<member basetype="uint32_t" name="reference"/>
		</struct>
		<struct name="VkPipelineDepthStencilStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineDepthStencilStateCreateFlags" optional="true"/>
			<member basetype="VkBool32" name="depthTestEnable"/>
			<member basetype="VkBool32" name="depthWriteEnable"/>
			<member basetype="VkCompareOp" name="depthCompareOp"/>
			<member basetype="VkBool32" name="depthBoundsTestEnable">
				<notation>optional (depth_bounds_test)</notation>
			</member>
			<member basetype="VkBool32" name="stencilTestEnable"/>
			<member basetype="VkStencilOpState" name="front"/>
			<member basetype="VkStencilOpState" name="back"/>
			<member basetype="float" name="minDepthBounds"/>
			<member basetype="float" name="maxDepthBounds"/>
		</struct>
		<struct name="VkGraphicsPipelineCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineCreateFlags" optional="true">
				<notation>Pipeline creation flags</notation>
			</member>
			<member basetype="uint32_t" name="stageCount"/>
			<member array="dynamic" reference="pointer" size="stageCount" name="pStages" const="true" basetype="VkPipelineShaderStageCreateInfo">
				<notation>One entry for each active shader stage</notation>
			</member>
			<member name="pVertexInputState" const="true" basetype="VkPipelineVertexInputStateCreateInfo" reference="pointer"/>
			<member name="pInputAssemblyState" const="true" basetype="VkPipelineInputAssemblyStateCreateInfo" reference="pointer"/>
			<member name="pTessellationState" optional="true" reference="pointer" auto-validity="false" const="true" basetype="VkPipelineTessellationStateCreateInfo"/>
			<member name="pViewportState" optional="true" reference="pointer" auto-validity="false" const="true" basetype="VkPipelineViewportStateCreateInfo"/>
			<member name="pRasterizationState" const="true" basetype="VkPipelineRasterizationStateCreateInfo" reference="pointer"/>
			<member name="pMultisampleState" optional="true" reference="pointer" auto-validity="false" const="true" basetype="VkPipelineMultisampleStateCreateInfo"/>
			<member name="pDepthStencilState" optional="true" reference="pointer" auto-validity="false" const="true" basetype="VkPipelineDepthStencilStateCreateInfo"/>
			<member name="pColorBlendState" optional="true" reference="pointer" auto-validity="false" const="true" basetype="VkPipelineColorBlendStateCreateInfo"/>
			<member name="pDynamicState" optional="true" reference="pointer" const="true" basetype="VkPipelineDynamicStateCreateInfo"/>
			<member basetype="VkPipelineLayout" name="layout">
				<notation>Interface layout of the pipeline</notation>
			</member>
			<member basetype="VkRenderPass" name="renderPass"/>
			<member basetype="uint32_t" name="subpass"/>
			<member name="basePipelineHandle" auto-validity="false" basetype="VkPipeline" optional="true">
				<notation>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of</notation>
			</member>
			<member basetype="int32_t" name="basePipelineIndex">
				<notation>If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of</notation>
			</member>
		</struct>
		<struct name="VkPipelineCacheCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineCacheCreateFlags" optional="true"/>
			<member name="initialDataSize" basetype="size_t" optional="true">
				<notation>Size of initial data to populate cache, in bytes</notation>
			</member>
			<member array="dynamic" reference="pointer" size="initialDataSize" name="pInitialData" const="true" basetype="void">
				<notation>Initial data to populate cache</notation>
			</member>
		</struct>
		<struct name="VkPushConstantRange">
			<member basetype="VkShaderStageFlags" name="stageFlags">
				<notation>Which stages use the range</notation>
			</member>
			<member basetype="uint32_t" name="offset">
				<notation>Start of the range, in bytes</notation>
			</member>
			<member basetype="uint32_t" name="size">
				<notation>Size of the range, in bytes</notation>
			</member>
		</struct>
		<struct name="VkPipelineLayoutCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineLayoutCreateFlags" optional="true"/>
			<member name="setLayoutCount" basetype="uint32_t" optional="true">
				<notation>Number of descriptor sets interfaced by the pipeline</notation>
			</member>
			<member array="dynamic" reference="pointer" size="setLayoutCount" name="pSetLayouts" const="true" basetype="VkDescriptorSetLayout">
				<notation>Array of setCount number of descriptor set layout objects defining the layout of the</notation>
			</member>
			<member name="pushConstantRangeCount" basetype="uint32_t" optional="true">
				<notation>Number of push-constant ranges used by the pipeline</notation>
			</member>
			<member array="dynamic" reference="pointer" size="pushConstantRangeCount" name="pPushConstantRanges" const="true" basetype="VkPushConstantRange">
				<notation>Array of pushConstantRangeCount number of ranges used by various shader stages</notation>
			</member>
		</struct>
		<struct name="VkSamplerCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkSamplerCreateFlags" optional="true"/>
			<member basetype="VkFilter" name="magFilter">
				<notation>Filter mode for magnification</notation>
			</member>
			<member basetype="VkFilter" name="minFilter">
				<notation>Filter mode for minifiation</notation>
			</member>
			<member basetype="VkSamplerMipmapMode" name="mipmapMode">
				<notation>Mipmap selection mode</notation>
			</member>
			<member basetype="VkSamplerAddressMode" name="addressModeU"/>
			<member basetype="VkSamplerAddressMode" name="addressModeV"/>
			<member basetype="VkSamplerAddressMode" name="addressModeW"/>
			<member basetype="float" name="mipLodBias"/>
			<member basetype="VkBool32" name="anisotropyEnable"/>
			<member basetype="float" name="maxAnisotropy"/>
			<member basetype="VkBool32" name="compareEnable"/>
			<member name="compareOp" auto-validity="false" basetype="VkCompareOp"/>
			<member basetype="float" name="minLod"/>
			<member basetype="float" name="maxLod"/>
			<member name="borderColor" auto-validity="false" basetype="VkBorderColor"/>
			<member basetype="VkBool32" name="unnormalizedCoordinates"/>
		</struct>
		<struct name="VkCommandPoolCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkCommandPoolCreateFlags" optional="true">
				<notation>Command pool creation flags</notation>
			</member>
			<member basetype="uint32_t" name="queueFamilyIndex"/>
		</struct>
		<struct name="VkCommandBufferAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkCommandPool" name="commandPool"/>
			<member basetype="VkCommandBufferLevel" name="level"/>
			<member basetype="uint32_t" name="commandBufferCount"/>
		</struct>
		<struct name="VkCommandBufferInheritanceInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="renderPass" auto-validity="false" basetype="VkRenderPass" optional="true">
				<notation>Render pass for secondary command buffers</notation>
			</member>
			<member basetype="uint32_t" name="subpass"/>
			<member name="framebuffer" auto-validity="false" basetype="VkFramebuffer" optional="true">
				<notation>Framebuffer for secondary command buffers</notation>
			</member>
			<member basetype="VkBool32" name="occlusionQueryEnable">
				<notation>Whether this secondary command buffer may be executed during an occlusion query</notation>
			</member>
			<member name="queryFlags" auto-validity="false" basetype="VkQueryControlFlags" optional="true">
				<notation>Query flags used by this secondary command buffer, if executed during an occlusion query</notation>
			</member>
			<member name="pipelineStatistics" auto-validity="false" basetype="VkQueryPipelineStatisticFlags" optional="true">
				<notation>Pipeline statistics that may be counted for this secondary command buffer</notation>
			</member>
		</struct>
		<struct name="VkCommandBufferBeginInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkCommandBufferUsageFlags" optional="true">
				<notation>Command buffer usage flags</notation>
			</member>
			<member name="pInheritanceInfo" optional="true" reference="pointer" auto-validity="false" const="true" basetype="VkCommandBufferInheritanceInfo">
				<notation>Pointer to inheritance info for secondary command buffers</notation>
			</member>
		</struct>
		<struct name="VkRenderPassBeginInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkRenderPass" name="renderPass"/>
			<member basetype="VkFramebuffer" name="framebuffer"/>
			<member basetype="VkRect2D" name="renderArea"/>
			<member name="clearValueCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" name="pClearValues" reference="pointer" size="clearValueCount" auto-validity="false" const="true" basetype="VkClearValue"/>
		</struct>
		<union name="VkClearColorValue" notation="// Union allowing specification of floating point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared.">
			<member name="float32" size="4" basetype="float" array="static"/>
			<member name="int32" size="4" basetype="int32_t" array="static"/>
			<member name="uint32" size="4" basetype="uint32_t" array="static"/>
		</union>
		<struct name="VkClearDepthStencilValue">
			<member basetype="float" name="depth"/>
			<member basetype="uint32_t" name="stencil"/>
		</struct>
		<union name="VkClearValue" notation="// Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared.">
			<member basetype="VkClearColorValue" name="color"/>
			<member basetype="VkClearDepthStencilValue" name="depthStencil"/>
		</union>
		<struct name="VkClearAttachment">
			<member basetype="VkImageAspectFlags" name="aspectMask"/>
			<member basetype="uint32_t" name="colorAttachment"/>
			<member basetype="VkClearValue" name="clearValue"/>
		</struct>
		<struct name="VkAttachmentDescription">
			<member name="flags" basetype="VkAttachmentDescriptionFlags" optional="true"/>
			<member basetype="VkFormat" name="format"/>
			<member basetype="VkSampleCountFlagBits" name="samples"/>
			<member basetype="VkAttachmentLoadOp" name="loadOp">
				<notation>Load operation for color or depth data</notation>
			</member>
			<member basetype="VkAttachmentStoreOp" name="storeOp">
				<notation>Store operation for color or depth data</notation>
			</member>
			<member basetype="VkAttachmentLoadOp" name="stencilLoadOp">
				<notation>Load operation for stencil data</notation>
			</member>
			<member basetype="VkAttachmentStoreOp" name="stencilStoreOp">
				<notation>Store operation for stencil data</notation>
			</member>
			<member basetype="VkImageLayout" name="initialLayout"/>
			<member basetype="VkImageLayout" name="finalLayout"/>
		</struct>
		<struct name="VkAttachmentReference">
			<member basetype="uint32_t" name="attachment"/>
			<member basetype="VkImageLayout" name="layout"/>
		</struct>
		<struct name="VkSubpassDescription">
			<member name="flags" basetype="VkSubpassDescriptionFlags" optional="true"/>
			<member basetype="VkPipelineBindPoint" name="pipelineBindPoint">
				<notation>Must be VK_PIPELINE_BIND_POINT_GRAPHICS for now</notation>
			</member>
			<member name="inputAttachmentCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="inputAttachmentCount" name="pInputAttachments" const="true" basetype="VkAttachmentReference"/>
			<member name="colorAttachmentCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="colorAttachmentCount" name="pColorAttachments" const="true" basetype="VkAttachmentReference"/>
			<member array="dynamic" name="pResolveAttachments" optional="true" size="colorAttachmentCount" reference="pointer" const="true" basetype="VkAttachmentReference"/>
			<member name="pDepthStencilAttachment" optional="true" reference="pointer" const="true" basetype="VkAttachmentReference"/>
			<member name="preserveAttachmentCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="preserveAttachmentCount" name="pPreserveAttachments" const="true" basetype="uint32_t"/>
		</struct>
		<struct name="VkSubpassDependency">
			<member basetype="uint32_t" name="srcSubpass"/>
			<member basetype="uint32_t" name="dstSubpass"/>
			<member basetype="VkPipelineStageFlags" name="srcStageMask"/>
			<member basetype="VkPipelineStageFlags" name="dstStageMask"/>
			<member name="srcAccessMask" basetype="VkAccessFlags" optional="true">
				<notation>Memory accesses from the source of the dependency to synchronize</notation>
			</member>
			<member name="dstAccessMask" basetype="VkAccessFlags" optional="true">
				<notation>Memory accesses from the destination of the dependency to synchronize</notation>
			</member>
			<member name="dependencyFlags" basetype="VkDependencyFlags" optional="true"/>
		</struct>
		<struct name="VkRenderPassCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkRenderPassCreateFlags" optional="true"/>
			<member name="attachmentCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="attachmentCount" name="pAttachments" const="true" basetype="VkAttachmentDescription"/>
			<member basetype="uint32_t" name="subpassCount"/>
			<member array="dynamic" reference="pointer" size="subpassCount" name="pSubpasses" const="true" basetype="VkSubpassDescription"/>
			<member name="dependencyCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="dependencyCount" name="pDependencies" const="true" basetype="VkSubpassDependency"/>
		</struct>
		<struct name="VkEventCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EVENT_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkEventCreateFlags" optional="true">
				<notation>Event creation flags</notation>
			</member>
		</struct>
		<struct name="VkFenceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_FENCE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkFenceCreateFlags" optional="true">
				<notation>Fence creation flags</notation>
			</member>
		</struct>
		<struct name="VkPhysicalDeviceFeatures">
			<member basetype="VkBool32" name="robustBufferAccess">
				<notation>out of bounds buffer accesses are well defined</notation>
			</member>
			<member basetype="VkBool32" name="fullDrawIndexUint32">
				<notation>full 32-bit range of indices for indexed draw calls</notation>
			</member>
			<member basetype="VkBool32" name="imageCubeArray">
				<notation>image views which are arrays of cube maps</notation>
			</member>
			<member basetype="VkBool32" name="independentBlend">
				<notation>blending operations are controlled per-attachment</notation>
			</member>
			<member basetype="VkBool32" name="geometryShader">
				<notation>geometry stage</notation>
			</member>
			<member basetype="VkBool32" name="tessellationShader">
				<notation>tessellation control and evaluation stage</notation>
			</member>
			<member basetype="VkBool32" name="sampleRateShading">
				<notation>per-sample shading and interpolation</notation>
			</member>
			<member basetype="VkBool32" name="dualSrcBlend">
				<notation>blend operations which take two sources</notation>
			</member>
			<member basetype="VkBool32" name="logicOp">
				<notation>logic operations</notation>
			</member>
			<member basetype="VkBool32" name="multiDrawIndirect">
				<notation>multi draw indirect</notation>
			</member>
			<member basetype="VkBool32" name="drawIndirectFirstInstance">
				<notation>indirect draws can use non-zero firstInstance</notation>
			</member>
			<member basetype="VkBool32" name="depthClamp">
				<notation>depth clamping</notation>
			</member>
			<member basetype="VkBool32" name="depthBiasClamp">
				<notation>depth bias clamping</notation>
			</member>
			<member basetype="VkBool32" name="fillModeNonSolid">
				<notation>point and wireframe fill modes</notation>
			</member>
			<member basetype="VkBool32" name="depthBounds">
				<notation>depth bounds test</notation>
			</member>
			<member basetype="VkBool32" name="wideLines">
				<notation>lines with width greater than 1</notation>
			</member>
			<member basetype="VkBool32" name="largePoints">
				<notation>points with size greater than 1</notation>
			</member>
			<member basetype="VkBool32" name="alphaToOne">
				<notation>the fragment alpha component can be forced to maximum representable alpha value</notation>
			</member>
			<member basetype="VkBool32" name="multiViewport">
				<notation>viewport arrays</notation>
			</member>
			<member basetype="VkBool32" name="samplerAnisotropy">
				<notation>anisotropic sampler filtering</notation>
			</member>
			<member basetype="VkBool32" name="textureCompressionETC2">
				<notation>ETC texture compression formats</notation>
			</member>
			<member basetype="VkBool32" name="textureCompressionASTC_LDR">
				<notation>ASTC LDR texture compression formats</notation>
			</member>
			<member basetype="VkBool32" name="textureCompressionBC">
				<notation>BC1-7 texture compressed formats</notation>
			</member>
			<member basetype="VkBool32" name="occlusionQueryPrecise">
				<notation>precise occlusion queries returning actual sample counts</notation>
			</member>
			<member basetype="VkBool32" name="pipelineStatisticsQuery">
				<notation>pipeline statistics query</notation>
			</member>
			<member basetype="VkBool32" name="vertexPipelineStoresAndAtomics">
				<notation>stores and atomic ops on storage buffers and images are supported in vertex, tessellation, and geometry stages</notation>
			</member>
			<member basetype="VkBool32" name="fragmentStoresAndAtomics">
				<notation>stores and atomic ops on storage buffers and images are supported in the fragment stage</notation>
			</member>
			<member basetype="VkBool32" name="shaderTessellationAndGeometryPointSize">
				<notation>tessellation and geometry stages can export point size</notation>
			</member>
			<member basetype="VkBool32" name="shaderImageGatherExtended">
				<notation>image gather with run-time values and independent offsets</notation>
			</member>
			<member basetype="VkBool32" name="shaderStorageImageExtendedFormats">
				<notation>the extended set of formats can be used for storage images</notation>
			</member>
			<member basetype="VkBool32" name="shaderStorageImageMultisample">
				<notation>multisample images can be used for storage images</notation>
			</member>
			<member basetype="VkBool32" name="shaderStorageImageReadWithoutFormat">
				<notation>read from storage image does not require format qualifier</notation>
			</member>
			<member basetype="VkBool32" name="shaderStorageImageWriteWithoutFormat">
				<notation>write to storage image does not require format qualifier</notation>
			</member>
			<member basetype="VkBool32" name="shaderUniformBufferArrayDynamicIndexing">
				<notation>arrays of uniform buffers can be accessed with dynamically uniform indices</notation>
			</member>
			<member basetype="VkBool32" name="shaderSampledImageArrayDynamicIndexing">
				<notation>arrays of sampled images can be accessed with dynamically uniform indices</notation>
			</member>
			<member basetype="VkBool32" name="shaderStorageBufferArrayDynamicIndexing">
				<notation>arrays of storage buffers can be accessed with dynamically uniform indices</notation>
			</member>
			<member basetype="VkBool32" name="shaderStorageImageArrayDynamicIndexing">
				<notation>arrays of storage images can be accessed with dynamically uniform indices</notation>
			</member>
			<member basetype="VkBool32" name="shaderClipDistance">
				<notation>clip distance in shaders</notation>
			</member>
			<member basetype="VkBool32" name="shaderCullDistance">
				<notation>cull distance in shaders</notation>
			</member>
			<member basetype="VkBool32" name="shaderFloat64">
				<notation>64-bit floats (doubles) in shaders</notation>
			</member>
			<member basetype="VkBool32" name="shaderInt64">
				<notation>64-bit integers in shaders</notation>
			</member>
			<member basetype="VkBool32" name="shaderInt16">
				<notation>16-bit integers in shaders</notation>
			</member>
			<member basetype="VkBool32" name="shaderResourceResidency">
				<notation>shader can use texture operations that return resource residency information (requires sparseNonResident support)</notation>
			</member>
			<member basetype="VkBool32" name="shaderResourceMinLod">
				<notation>shader can use texture operations that specify minimum resource LOD</notation>
			</member>
			<member basetype="VkBool32" name="sparseBinding">
				<notation>Sparse resources support: Resource memory can be managed at opaque page level rather than object level</notation>
			</member>
			<member basetype="VkBool32" name="sparseResidencyBuffer">
				<notation>Sparse resources support: GPU can access partially resident buffers </notation>
			</member>
			<member basetype="VkBool32" name="sparseResidencyImage2D">
				<notation>Sparse resources support: GPU can access partially resident 2D (non-MSAA non-depth/stencil) images </notation>
			</member>
			<member basetype="VkBool32" name="sparseResidencyImage3D">
				<notation>Sparse resources support: GPU can access partially resident 3D images </notation>
			</member>
			<member basetype="VkBool32" name="sparseResidency2Samples">
				<notation>Sparse resources support: GPU can access partially resident MSAA 2D images with 2 samples</notation>
			</member>
			<member basetype="VkBool32" name="sparseResidency4Samples">
				<notation>Sparse resources support: GPU can access partially resident MSAA 2D images with 4 samples</notation>
			</member>
			<member basetype="VkBool32" name="sparseResidency8Samples">
				<notation>Sparse resources support: GPU can access partially resident MSAA 2D images with 8 samples</notation>
			</member>
			<member basetype="VkBool32" name="sparseResidency16Samples">
				<notation>Sparse resources support: GPU can access partially resident MSAA 2D images with 16 samples</notation>
			</member>
			<member basetype="VkBool32" name="sparseResidencyAliased">
				<notation>Sparse resources support: GPU can correctly access data aliased into multiple locations (opt-in)</notation>
			</member>
			<member basetype="VkBool32" name="variableMultisampleRate">
				<notation>multisample rate must be the same for all pipelines in a subpass</notation>
			</member>
			<member basetype="VkBool32" name="inheritedQueries">
				<notation>Queries may be inherited from primary to secondary command buffers</notation>
			</member>
		</struct>
		<struct name="VkPhysicalDeviceSparseProperties" is-return="true">
			<member basetype="VkBool32" name="residencyStandard2DBlockShape">
				<notation>Sparse resources support: GPU will access all 2D (single sample) sparse resources using the standard sparse image block shapes (based on pixel format)</notation>
			</member>
			<member basetype="VkBool32" name="residencyStandard2DMultisampleBlockShape">
				<notation>Sparse resources support: GPU will access all 2D (multisample) sparse resources using the standard sparse image block shapes (based on pixel format)</notation>
			</member>
			<member basetype="VkBool32" name="residencyStandard3DBlockShape">
				<notation>Sparse resources support: GPU will access all 3D sparse resources using the standard sparse image block shapes (based on pixel format)</notation>
			</member>
			<member basetype="VkBool32" name="residencyAlignedMipSize">
				<notation>Sparse resources support: Images with mip level dimensions that are NOT a multiple of the sparse image block dimensions will be placed in the mip tail</notation>
			</member>
			<member basetype="VkBool32" name="residencyNonResidentStrict">
				<notation>Sparse resources support: GPU can consistently access non-resident regions of a resource, all reads return as if data is 0, writes are discarded</notation>
			</member>
		</struct>
		<struct name="VkPhysicalDeviceLimits" is-return="true">
			<notation>resource maximum sizes</notation>
			<member basetype="uint32_t" name="maxImageDimension1D">
				<notation>max 1D image dimension</notation>
			</member>
			<member basetype="uint32_t" name="maxImageDimension2D">
				<notation>max 2D image dimension</notation>
			</member>
			<member basetype="uint32_t" name="maxImageDimension3D">
				<notation>max 3D image dimension</notation>
			</member>
			<member basetype="uint32_t" name="maxImageDimensionCube">
				<notation>max cubemap image dimension</notation>
			</member>
			<member basetype="uint32_t" name="maxImageArrayLayers">
				<notation>max layers for image arrays</notation>
			</member>
			<member basetype="uint32_t" name="maxTexelBufferElements">
				<notation>max texel buffer size (fstexels)</notation>
			</member>
			<member basetype="uint32_t" name="maxUniformBufferRange">
				<notation>max uniform buffer range (bytes)</notation>
			</member>
			<member basetype="uint32_t" name="maxStorageBufferRange">
				<notation>max storage buffer range (bytes)</notation>
			</member>
			<member basetype="uint32_t" name="maxPushConstantsSize">
				<notation>max size of the push constants pool (bytes)</notation>
			</member>
			<notation>memory limits</notation>
			<member basetype="uint32_t" name="maxMemoryAllocationCount">
				<notation>max number of device memory allocations supported</notation>
			</member>
			<member basetype="uint32_t" name="maxSamplerAllocationCount">
				<notation>max number of samplers that can be allocated on a device</notation>
			</member>
			<member basetype="VkDeviceSize" name="bufferImageGranularity">
				<notation>Granularity (in bytes) at which buffers and images can be bound to adjacent memory for simultaneous usage</notation>
			</member>
			<member basetype="VkDeviceSize" name="sparseAddressSpaceSize">
				<notation>Total address space available for sparse allocations (bytes)</notation>
			</member>
			<notation>descriptor set limits</notation>
			<member basetype="uint32_t" name="maxBoundDescriptorSets">
				<notation>max number of descriptors sets that can be bound to a pipeline</notation>
			</member>
			<member basetype="uint32_t" name="maxPerStageDescriptorSamplers">
				<notation>max number of samplers allowed per-stage in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxPerStageDescriptorUniformBuffers">
				<notation>max number of uniform buffers allowed per-stage in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxPerStageDescriptorStorageBuffers">
				<notation>max number of storage buffers allowed per-stage in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxPerStageDescriptorSampledImages">
				<notation>max number of sampled images allowed per-stage in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxPerStageDescriptorStorageImages">
				<notation>max number of storage images allowed per-stage in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxPerStageDescriptorInputAttachments">
				<notation>max number of input attachments allowed per-stage in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxPerStageResources">
				<notation>max number of resources allowed by a single stage</notation>
			</member>
			<member basetype="uint32_t" name="maxDescriptorSetSamplers">
				<notation>max number of samplers allowed in all stages in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxDescriptorSetUniformBuffers">
				<notation>max number of uniform buffers allowed in all stages in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxDescriptorSetUniformBuffersDynamic">
				<notation>max number of dynamic uniform buffers allowed in all stages in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxDescriptorSetStorageBuffers">
				<notation>max number of storage buffers allowed in all stages in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxDescriptorSetStorageBuffersDynamic">
				<notation>max number of dynamic storage buffers allowed in all stages in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxDescriptorSetSampledImages">
				<notation>max number of sampled images allowed in all stages in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxDescriptorSetStorageImages">
				<notation>max number of storage images allowed in all stages in a descriptor set</notation>
			</member>
			<member basetype="uint32_t" name="maxDescriptorSetInputAttachments">
				<notation>max number of input attachments allowed in all stages in a descriptor set</notation>
			</member>
			<notation>vertex stage limits</notation>
			<member basetype="uint32_t" name="maxVertexInputAttributes">
				<notation>max number of vertex input attribute slots</notation>
			</member>
			<member basetype="uint32_t" name="maxVertexInputBindings">
				<notation>max number of vertex input binding slots</notation>
			</member>
			<member basetype="uint32_t" name="maxVertexInputAttributeOffset">
				<notation>max vertex input attribute offset added to vertex buffer offset</notation>
			</member>
			<member basetype="uint32_t" name="maxVertexInputBindingStride">
				<notation>max vertex input binding stride</notation>
			</member>
			<member basetype="uint32_t" name="maxVertexOutputComponents">
				<notation>max number of output components written by vertex shader</notation>
			</member>
			<notation>tessellation control stage limits</notation>
			<member basetype="uint32_t" name="maxTessellationGenerationLevel">
				<notation>max level supported by tessellation primitive generator</notation>
			</member>
			<member basetype="uint32_t" name="maxTessellationPatchSize">
				<notation>max patch size (vertices)</notation>
			</member>
			<member basetype="uint32_t" name="maxTessellationControlPerVertexInputComponents">
				<notation>max number of input components per-vertex in TCS</notation>
			</member>
			<member basetype="uint32_t" name="maxTessellationControlPerVertexOutputComponents">
				<notation>max number of output components per-vertex in TCS</notation>
			</member>
			<member basetype="uint32_t" name="maxTessellationControlPerPatchOutputComponents">
				<notation>max number of output components per-patch in TCS</notation>
			</member>
			<member basetype="uint32_t" name="maxTessellationControlTotalOutputComponents">
				<notation>max total number of per-vertex and per-patch output components in TCS</notation>
			</member>
			<notation>tessellation evaluation stage limits</notation>
			<member basetype="uint32_t" name="maxTessellationEvaluationInputComponents">
				<notation>max number of input components per vertex in TES</notation>
			</member>
			<member basetype="uint32_t" name="maxTessellationEvaluationOutputComponents">
				<notation>max number of output components per vertex in TES</notation>
			</member>
			<notation>geometry stage limits</notation>
			<member basetype="uint32_t" name="maxGeometryShaderInvocations">
				<notation>max invocation count supported in geometry shader</notation>
			</member>
			<member basetype="uint32_t" name="maxGeometryInputComponents">
				<notation>max number of input components read in geometry stage</notation>
			</member>
			<member basetype="uint32_t" name="maxGeometryOutputComponents">
				<notation>max number of output components written in geometry stage</notation>
			</member>
			<member basetype="uint32_t" name="maxGeometryOutputVertices">
				<notation>max number of vertices that can be emitted in geometry stage</notation>
			</member>
			<member basetype="uint32_t" name="maxGeometryTotalOutputComponents">
				<notation>max total number of components (all vertices) written in geometry stage</notation>
			</member>
			<notation>fragment stage limits</notation>
			<member basetype="uint32_t" name="maxFragmentInputComponents">
				<notation>max number of input compontents read in fragment stage</notation>
			</member>
			<member basetype="uint32_t" name="maxFragmentOutputAttachments">
				<notation>max number of output attachments written in fragment stage</notation>
			</member>
			<member basetype="uint32_t" name="maxFragmentDualSrcAttachments">
				<notation>max number of output attachments written when using dual source blending</notation>
			</member>
			<member basetype="uint32_t" name="maxFragmentCombinedOutputResources">
				<notation>max total number of storage buffers, storage images and output buffers</notation>
			</member>
			<notation>compute stage limits</notation>
			<member basetype="uint32_t" name="maxComputeSharedMemorySize">
				<notation>max total storage size of work group local storage (bytes)</notation>
			</member>
			<member name="maxComputeWorkGroupCount" size="3" basetype="uint32_t" array="static">
				<notation>max num of compute work groups that may be dispatched by a single command (x,y,z)</notation>
			</member>
			<member basetype="uint32_t" name="maxComputeWorkGroupInvocations">
				<notation>max total compute invocations in a single local work group</notation>
			</member>
			<member name="maxComputeWorkGroupSize" size="3" basetype="uint32_t" array="static">
				<notation>max local size of a compute work group (x,y,z)</notation>
			</member>
			<member basetype="uint32_t" name="subPixelPrecisionBits">
				<notation>number bits of subpixel precision in screen x and y</notation>
			</member>
			<member basetype="uint32_t" name="subTexelPrecisionBits">
				<notation>number bits of precision for selecting texel weights</notation>
			</member>
			<member basetype="uint32_t" name="mipmapPrecisionBits">
				<notation>number bits of precision for selecting mipmap weights</notation>
			</member>
			<member basetype="uint32_t" name="maxDrawIndexedIndexValue">
				<notation>max index value for indexed draw calls (for 32-bit indices)</notation>
			</member>
			<member basetype="uint32_t" name="maxDrawIndirectCount">
				<notation>max draw count for indirect draw calls</notation>
			</member>
			<member basetype="float" name="maxSamplerLodBias">
				<notation>max absolute sampler LOD bias</notation>
			</member>
			<member basetype="float" name="maxSamplerAnisotropy">
				<notation>max degree of sampler anisotropy</notation>
			</member>
			<member basetype="uint32_t" name="maxViewports">
				<notation>max number of active viewports</notation>
			</member>
			<member name="maxViewportDimensions" size="2" basetype="uint32_t" array="static">
				<notation>max viewport dimensions (x,y)</notation>
			</member>
			<member name="viewportBoundsRange" size="2" basetype="float" array="static">
				<notation>viewport bounds range (min,max)</notation>
			</member>
			<member basetype="uint32_t" name="viewportSubPixelBits">
				<notation>number bits of subpixel precision for viewport</notation>
			</member>
			<member basetype="size_t" name="minMemoryMapAlignment">
				<notation>min required alignment of pointers returned by MapMemory (bytes)</notation>
			</member>
			<member basetype="VkDeviceSize" name="minTexelBufferOffsetAlignment">
				<notation>min required alignment for texel buffer offsets (bytes) </notation>
			</member>
			<member basetype="VkDeviceSize" name="minUniformBufferOffsetAlignment">
				<notation>min required alignment for uniform buffer sizes and offsets (bytes)</notation>
			</member>
			<member basetype="VkDeviceSize" name="minStorageBufferOffsetAlignment">
				<notation>min required alignment for storage buffer offsets (bytes)</notation>
			</member>
			<member basetype="int32_t" name="minTexelOffset">
				<notation>min texel offset for OpTextureSampleOffset</notation>
			</member>
			<member basetype="uint32_t" name="maxTexelOffset">
				<notation>max texel offset for OpTextureSampleOffset</notation>
			</member>
			<member basetype="int32_t" name="minTexelGatherOffset">
				<notation>min texel offset for OpTextureGatherOffset</notation>
			</member>
			<member basetype="uint32_t" name="maxTexelGatherOffset">
				<notation>max texel offset for OpTextureGatherOffset</notation>
			</member>
			<member basetype="float" name="minInterpolationOffset">
				<notation>furthest negative offset for interpolateAtOffset</notation>
			</member>
			<member basetype="float" name="maxInterpolationOffset">
				<notation>furthest positive offset for interpolateAtOffset</notation>
			</member>
			<member basetype="uint32_t" name="subPixelInterpolationOffsetBits">
				<notation>number of subpixel bits for interpolateAtOffset</notation>
			</member>
			<member basetype="uint32_t" name="maxFramebufferWidth">
				<notation>max width for a framebuffer</notation>
			</member>
			<member basetype="uint32_t" name="maxFramebufferHeight">
				<notation>max height for a framebuffer</notation>
			</member>
			<member basetype="uint32_t" name="maxFramebufferLayers">
				<notation>max layer count for a layered framebuffer</notation>
			</member>
			<member name="framebufferColorSampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported color sample counts for a framebuffer</notation>
			</member>
			<member name="framebufferDepthSampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported depth sample counts for a framebuffer</notation>
			</member>
			<member name="framebufferStencilSampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported stencil sample counts for a framebuffer</notation>
			</member>
			<member name="framebufferNoAttachmentsSampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported sample counts for a framebuffer with no attachments</notation>
			</member>
			<member basetype="uint32_t" name="maxColorAttachments">
				<notation>max number of color attachments per subpass</notation>
			</member>
			<member name="sampledImageColorSampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported color sample counts for a non-integer sampled image</notation>
			</member>
			<member name="sampledImageIntegerSampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported sample counts for an integer image</notation>
			</member>
			<member name="sampledImageDepthSampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported depth sample counts for a sampled image</notation>
			</member>
			<member name="sampledImageStencilSampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported stencil sample counts for a sampled image</notation>
			</member>
			<member name="storageImageSampleCounts" basetype="VkSampleCountFlags" optional="true">
				<notation>supported sample counts for a storage image</notation>
			</member>
			<member basetype="uint32_t" name="maxSampleMaskWords">
				<notation>max number of sample mask words</notation>
			</member>
			<member basetype="VkBool32" name="timestampComputeAndGraphics">
				<notation>timestamps on graphics and compute queues</notation>
			</member>
			<member basetype="float" name="timestampPeriod">
				<notation>number of nanoseconds it takes for timestamp query value to increment by 1</notation>
			</member>
			<member basetype="uint32_t" name="maxClipDistances">
				<notation>max number of clip distances</notation>
			</member>
			<member basetype="uint32_t" name="maxCullDistances">
				<notation>max number of cull distances</notation>
			</member>
			<member basetype="uint32_t" name="maxCombinedClipAndCullDistances">
				<notation>max combined number of user clipping</notation>
			</member>
			<member basetype="uint32_t" name="discreteQueuePriorities">
				<notation>distinct queue priorities available </notation>
			</member>
			<member name="pointSizeRange" size="2" basetype="float" array="static">
				<notation>range (min,max) of supported point sizes</notation>
			</member>
			<member name="lineWidthRange" size="2" basetype="float" array="static">
				<notation>range (min,max) of supported line widths</notation>
			</member>
			<member basetype="float" name="pointSizeGranularity">
				<notation>granularity of supported point sizes</notation>
			</member>
			<member basetype="float" name="lineWidthGranularity">
				<notation>granularity of supported line widths</notation>
			</member>
			<member basetype="VkBool32" name="strictLines">
				<notation>line rasterization follows preferred rules</notation>
			</member>
			<member basetype="VkBool32" name="standardSampleLocations">
				<notation>supports standard sample locations for all supported sample counts</notation>
			</member>
			<member basetype="VkDeviceSize" name="optimalBufferCopyOffsetAlignment">
				<notation>optimal offset of buffer copies</notation>
			</member>
			<member basetype="VkDeviceSize" name="optimalBufferCopyRowPitchAlignment">
				<notation>optimal pitch of buffer copies</notation>
			</member>
			<member basetype="VkDeviceSize" name="nonCoherentAtomSize">
				<notation>minimum size and alignment for non-coherent host-mapped device memory access</notation>
			</member>
		</struct>
		<struct name="VkSemaphoreCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkSemaphoreCreateFlags" optional="true">
				<notation>Semaphore creation flags</notation>
			</member>
		</struct>
		<struct name="VkQueryPoolCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkQueryPoolCreateFlags" optional="true"/>
			<member basetype="VkQueryType" name="queryType"/>
			<member basetype="uint32_t" name="queryCount"/>
			<member name="pipelineStatistics" auto-validity="false" basetype="VkQueryPipelineStatisticFlags" optional="true">
				<notation>Optional</notation>
			</member>
		</struct>
		<struct name="VkFramebufferCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkFramebufferCreateFlags" optional="true"/>
			<member basetype="VkRenderPass" name="renderPass"/>
			<member name="attachmentCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="attachmentCount" name="pAttachments" const="true" basetype="VkImageView"/>
			<member basetype="uint32_t" name="width"/>
			<member basetype="uint32_t" name="height"/>
			<member basetype="uint32_t" name="layers"/>
		</struct>
		<struct name="VkDrawIndirectCommand">
			<member basetype="uint32_t" name="vertexCount"/>
			<member basetype="uint32_t" name="instanceCount"/>
			<member basetype="uint32_t" name="firstVertex"/>
			<member basetype="uint32_t" name="firstInstance"/>
		</struct>
		<struct name="VkDrawIndexedIndirectCommand">
			<member basetype="uint32_t" name="indexCount"/>
			<member basetype="uint32_t" name="instanceCount"/>
			<member basetype="uint32_t" name="firstIndex"/>
			<member basetype="int32_t" name="vertexOffset"/>
			<member basetype="uint32_t" name="firstInstance"/>
		</struct>
		<struct name="VkDispatchIndirectCommand">
			<member basetype="uint32_t" name="x"/>
			<member basetype="uint32_t" name="y"/>
			<member basetype="uint32_t" name="z"/>
		</struct>
		<struct name="VkSubmitInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SUBMIT_INFO"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="waitSemaphoreCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="waitSemaphoreCount" name="pWaitSemaphores" const="true" basetype="VkSemaphore"/>
			<member array="dynamic" reference="pointer" size="waitSemaphoreCount" name="pWaitDstStageMask" const="true" basetype="VkPipelineStageFlags"/>
			<member name="commandBufferCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="commandBufferCount" name="pCommandBuffers" const="true" basetype="VkCommandBuffer"/>
			<member name="signalSemaphoreCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="signalSemaphoreCount" name="pSignalSemaphores" const="true" basetype="VkSemaphore"/>
		</struct>
		<notation>WSI extensions</notation>
		<struct name="VkDisplayPropertiesKHR" is-return="true">
			<member basetype="VkDisplayKHR" name="display">
				<notation>Handle of the display object</notation>
			</member>
			<member array="dynamic" null-terminate="true" reference="pointer" name="displayName" basetype="char" const="true">
				<notation>Name of the display</notation>
			</member>
			<member basetype="VkExtent2D" name="physicalDimensions">
				<notation>In millimeters?</notation>
			</member>
			<member basetype="VkExtent2D" name="physicalResolution">
				<notation>Max resolution for CRT?</notation>
			</member>
			<member name="supportedTransforms" basetype="VkSurfaceTransformFlagsKHR" optional="true">
				<notation>one or more bits from VkSurfaceTransformFlagsKHR</notation>
			</member>
			<member basetype="VkBool32" name="planeReorderPossible">
				<notation>VK_TRUE if the overlay plane&apos;s z-order can be changed on this display.</notation>
			</member>
			<member basetype="VkBool32" name="persistentContent">
				<notation>VK_TRUE if this is a &quot;smart&quot; display that supports self-refresh/internal buffering.</notation>
			</member>
		</struct>
		<struct name="VkDisplayPlanePropertiesKHR" is-return="true">
			<member basetype="VkDisplayKHR" name="currentDisplay">
				<notation>Display the plane is currently associated with.  Will be VK_NULL_HANDLE if the plane is not in use.</notation>
			</member>
			<member basetype="uint32_t" name="currentStackIndex">
				<notation>Current z-order of the plane.</notation>
			</member>
		</struct>
		<struct name="VkDisplayModeParametersKHR">
			<member basetype="VkExtent2D" name="visibleRegion">
				<notation>Visible scanout region.</notation>
			</member>
			<member basetype="uint32_t" name="refreshRate">
				<notation>Number of times per second the display is updated.</notation>
			</member>
		</struct>
		<struct name="VkDisplayModePropertiesKHR" is-return="true">
			<member basetype="VkDisplayModeKHR" name="displayMode">
				<notation>Handle of this display mode.</notation>
			</member>
			<member basetype="VkDisplayModeParametersKHR" name="parameters">
				<notation>The parameters this mode uses.</notation>
			</member>
		</struct>
		<struct name="VkDisplayModeCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkDisplayModeCreateFlagsKHR" optional="true"/>
			<member basetype="VkDisplayModeParametersKHR" name="parameters">
				<notation>The parameters this mode uses.</notation>
			</member>
		</struct>
		<struct name="VkDisplayPlaneCapabilitiesKHR" is-return="true">
			<member name="supportedAlpha" basetype="VkDisplayPlaneAlphaFlagsKHR" optional="true">
				<notation>Types of alpha blending supported, if any.</notation>
			</member>
			<member basetype="VkOffset2D" name="minSrcPosition">
				<notation>Does the plane have any position and extent restrictions?</notation>
			</member>
			<member basetype="VkOffset2D" name="maxSrcPosition"/>
			<member basetype="VkExtent2D" name="minSrcExtent"/>
			<member basetype="VkExtent2D" name="maxSrcExtent"/>
			<member basetype="VkOffset2D" name="minDstPosition"/>
			<member basetype="VkOffset2D" name="maxDstPosition"/>
			<member basetype="VkExtent2D" name="minDstExtent"/>
			<member basetype="VkExtent2D" name="maxDstExtent"/>
		</struct>
		<struct name="VkDisplaySurfaceCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkDisplaySurfaceCreateFlagsKHR" optional="true"/>
			<member basetype="VkDisplayModeKHR" name="displayMode">
				<notation>The mode to use when displaying this surface</notation>
			</member>
			<member basetype="uint32_t" name="planeIndex">
				<notation>The plane on which this surface appears.  Must be between 0 and the value returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR() in pPropertyCount.</notation>
			</member>
			<member basetype="uint32_t" name="planeStackIndex">
				<notation>The z-order of the plane.</notation>
			</member>
			<member basetype="VkSurfaceTransformFlagBitsKHR" name="transform">
				<notation>Transform to apply to the images as part of the scanout operation</notation>
			</member>
			<member basetype="float" name="globalAlpha">
				<notation>Global alpha value.  Must be between 0 and 1, inclusive.  Ignored if alphaMode is not VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR</notation>
			</member>
			<member basetype="VkDisplayPlaneAlphaFlagBitsKHR" name="alphaMode">
				<notation>What type of alpha blending to use.  Must be a bit from vkGetDisplayPlanePropertiesKHR::supportedAlpha.</notation>
			</member>
			<member basetype="VkExtent2D" name="imageExtent">
				<notation>size of the images to use with this surface</notation>
			</member>
		</struct>
		<struct name="VkDisplayPresentInfoKHR" extends="VkPresentInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="VkRect2D" name="srcRect">
				<notation>Rectangle within the presentable image to read pixel data from when presenting to the display.</notation>
			</member>
			<member basetype="VkRect2D" name="dstRect">
				<notation>Rectangle within the current display mode&apos;s visible region to display srcRectangle in.</notation>
			</member>
			<member basetype="VkBool32" name="persistent">
				<notation>For smart displays, use buffered mode.  If the display properties member &quot;persistentMode&quot; is VK_FALSE, this member must always be VK_FALSE.</notation>
			</member>
		</struct>
		<struct name="VkSurfaceCapabilitiesKHR" is-return="true">
			<member basetype="uint32_t" name="minImageCount">
				<notation>Supported minimum number of images for the surface</notation>
			</member>
			<member basetype="uint32_t" name="maxImageCount">
				<notation>Supported maximum number of images for the surface, 0 for unlimited</notation>
			</member>
			<member basetype="VkExtent2D" name="currentExtent">
				<notation>Current image width and height for the surface, (0, 0) if undefined</notation>
			</member>
			<member basetype="VkExtent2D" name="minImageExtent">
				<notation>Supported minimum image width and height for the surface</notation>
			</member>
			<member basetype="VkExtent2D" name="maxImageExtent">
				<notation>Supported maximum image width and height for the surface</notation>
			</member>
			<member basetype="uint32_t" name="maxImageArrayLayers">
				<notation>Supported maximum number of image layers for the surface</notation>
			</member>
			<member name="supportedTransforms" basetype="VkSurfaceTransformFlagsKHR" optional="true">
				<notation>1 or more bits representing the transforms supported</notation>
			</member>
			<member basetype="VkSurfaceTransformFlagBitsKHR" name="currentTransform">
				<notation>The surface&apos;s current transform relative to the device&apos;s natural orientation</notation>
			</member>
			<member name="supportedCompositeAlpha" basetype="VkCompositeAlphaFlagsKHR" optional="true">
				<notation>1 or more bits representing the alpha compositing modes supported</notation>
			</member>
			<member name="supportedUsageFlags" basetype="VkImageUsageFlags" optional="true">
				<notation>Supported image usage flags for the surface</notation>
			</member>
		</struct>
		<struct name="VkAndroidSurfaceCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkAndroidSurfaceCreateFlagsKHR" optional="true"/>
			<member name="window" auto-validity="false" basetype="ANativeWindow" reference="pointer"/>
		</struct>
		<struct name="VkMirSurfaceCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkMirSurfaceCreateFlagsKHR" optional="true"/>
			<member name="connection" auto-validity="false" basetype="MirConnection" reference="pointer"/>
			<member name="mirSurface" auto-validity="false" basetype="MirSurface" reference="pointer"/>
		</struct>
		<struct name="VkViSurfaceCreateInfoNN">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkViSurfaceCreateFlagsNN" optional="true"/>
			<member name="window" auto-validity="false" basetype="void" reference="pointer"/>
		</struct>
		<struct name="VkWaylandSurfaceCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkWaylandSurfaceCreateFlagsKHR" optional="true"/>
			<member name="display" struct="true" reference="pointer" auto-validity="false" basetype="wl_display"/>
			<member name="surface" struct="true" reference="pointer" auto-validity="false" basetype="wl_surface"/>
		</struct>
		<struct name="VkWin32SurfaceCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkWin32SurfaceCreateFlagsKHR" optional="true"/>
			<member basetype="HINSTANCE" name="hinstance"/>
			<member basetype="HWND" name="hwnd"/>
		</struct>
		<struct name="VkXlibSurfaceCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkXlibSurfaceCreateFlagsKHR" optional="true"/>
			<member name="dpy" auto-validity="false" basetype="Display" reference="pointer"/>
			<member basetype="Window" name="window"/>
		</struct>
		<struct name="VkXcbSurfaceCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkXcbSurfaceCreateFlagsKHR" optional="true"/>
			<member name="connection" auto-validity="false" basetype="xcb_connection_t" reference="pointer"/>
			<member basetype="xcb_window_t" name="window"/>
		</struct>
		<struct name="VkSurfaceFormatKHR" is-return="true">
			<member basetype="VkFormat" name="format">
				<notation>Supported pair of rendering format</notation>
			</member>
			<member basetype="VkColorSpaceKHR" name="colorSpace">
				<notation>and color space for the surface</notation>
			</member>
		</struct>
		<struct name="VkSwapchainCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkSwapchainCreateFlagsKHR" optional="true"/>
			<member basetype="VkSurfaceKHR" name="surface">
				<notation>The swapchain&apos;s target surface</notation>
			</member>
			<member basetype="uint32_t" name="minImageCount">
				<notation>Minimum number of presentation images the application needs</notation>
			</member>
			<member basetype="VkFormat" name="imageFormat">
				<notation>Format of the presentation images</notation>
			</member>
			<member basetype="VkColorSpaceKHR" name="imageColorSpace">
				<notation>Colorspace of the presentation images</notation>
			</member>
			<member basetype="VkExtent2D" name="imageExtent">
				<notation>Dimensions of the presentation images</notation>
			</member>
			<member basetype="uint32_t" name="imageArrayLayers">
				<notation>Determines the number of views for multiview/stereo presentation</notation>
			</member>
			<member basetype="VkImageUsageFlags" name="imageUsage">
				<notation>Bits indicating how the presentation images will be used</notation>
			</member>
			<member basetype="VkSharingMode" name="imageSharingMode">
				<notation>Sharing mode used for the presentation images</notation>
			</member>
			<member name="queueFamilyIndexCount" basetype="uint32_t" optional="true">
				<notation>Number of queue families having access to the images in case of concurrent sharing mode</notation>
			</member>
			<member array="dynamic" name="pQueueFamilyIndices" reference="pointer" size="queueFamilyIndexCount" auto-validity="false" const="true" basetype="uint32_t">
				<notation>Array of queue family indices having access to the images in case of concurrent sharing mode</notation>
			</member>
			<member basetype="VkSurfaceTransformFlagBitsKHR" name="preTransform">
				<notation>The transform, relative to the device&apos;s natural orientation, applied to the image content prior to presentation</notation>
			</member>
			<member basetype="VkCompositeAlphaFlagBitsKHR" name="compositeAlpha">
				<notation>The alpha blending mode used when compositing this surface with other surfaces in the window system</notation>
			</member>
			<member basetype="VkPresentModeKHR" name="presentMode">
				<notation>Which presentation mode to use for presents on this swap chain</notation>
			</member>
			<member basetype="VkBool32" name="clipped">
				<notation>Specifies whether presentable images may be affected by window clip regions</notation>
			</member>
			<member name="oldSwapchain" basetype="VkSwapchainKHR" optional="true">
				<notation>Existing swap chain to replace, if any</notation>
			</member>
		</struct>
		<struct name="VkPresentInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PRESENT_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="waitSemaphoreCount" basetype="uint32_t" optional="true">
				<notation>Number of semaphores to wait for before presenting</notation>
			</member>
			<member array="dynamic" reference="pointer" size="waitSemaphoreCount" name="pWaitSemaphores" const="true" basetype="VkSemaphore">
				<notation>Semaphores to wait for before presenting</notation>
			</member>
			<member basetype="uint32_t" name="swapchainCount">
				<notation>Number of swapchains to present in this call</notation>
			</member>
			<member array="dynamic" reference="pointer" size="swapchainCount" name="pSwapchains" const="true" basetype="VkSwapchainKHR">
				<notation>Swapchains to present an image from</notation>
			</member>
			<member array="dynamic" reference="pointer" size="swapchainCount" name="pImageIndices" const="true" basetype="uint32_t">
				<notation>Indices of which presentable images to present</notation>
			</member>
			<member array="dynamic" optional="true" size="swapchainCount" name="pResults" basetype="VkResult" reference="pointer">
				<notation>Optional (i.e. if non-NULL) VkResult for each swapchain</notation>
			</member>
		</struct>
		<struct name="VkDebugReportCallbackCreateInfoEXT" extends="VkInstanceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkDebugReportFlagsEXT" optional="true">
				<notation>Indicates which events call this callback</notation>
			</member>
			<member basetype="PFN_vkDebugReportCallbackEXT" name="pfnCallback">
				<notation>Function pointer of a callback function</notation>
			</member>
			<member name="pUserData" reference="pointer" basetype="void" optional="true">
				<notation>User data provided to callback function</notation>
			</member>
		</struct>
		<struct name="VkValidationFlagsEXT" extends="VkInstanceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT">
				<notation>Must be VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT</notation>
			</member>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="disabledValidationCheckCount">
				<notation>Number of validation checks to disable</notation>
			</member>
			<member array="dynamic" reference="pointer" size="disabledValidationCheckCount" basetype="VkValidationCheckEXT" name="pDisabledValidationChecks">
				<notation>Validation checks to disable</notation>
			</member>
		</struct>
		<struct name="VkPipelineRasterizationStateRasterizationOrderAMD" extends="VkPipelineRasterizationStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="VkRasterizationOrderAMD" name="rasterizationOrder">
				<notation>Rasterization order to use for the pipeline</notation>
			</member>
		</struct>
		<struct name="VkDebugMarkerObjectNameInfoEXT">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDebugReportObjectTypeEXT" name="objectType">
				<notation>The type of the object</notation>
			</member>
			<member basetype="uint64_t" name="object">
				<notation>The handle of the object, cast to uint64_t</notation>
			</member>
			<member array="dynamic" null-terminate="true" reference="pointer" name="pObjectName" basetype="char" const="true">
				<notation>Name to apply to the object</notation>
			</member>
		</struct>
		<struct name="VkDebugMarkerObjectTagInfoEXT">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDebugReportObjectTypeEXT" name="objectType">
				<notation>The type of the object</notation>
			</member>
			<member basetype="uint64_t" name="object">
				<notation>The handle of the object, cast to uint64_t</notation>
			</member>
			<member basetype="uint64_t" name="tagName">
				<notation>The name of the tag to set on the object</notation>
			</member>
			<member basetype="size_t" name="tagSize">
				<notation>The length in bytes of the tag data</notation>
			</member>
			<member array="dynamic" reference="pointer" size="tagSize" name="pTag" const="true" basetype="void">
				<notation>Tag data to attach to the object</notation>
			</member>
		</struct>
		<struct name="VkDebugMarkerMarkerInfoEXT">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member array="dynamic" null-terminate="true" reference="pointer" name="pMarkerName" basetype="char" const="true">
				<notation>Name of the debug marker</notation>
			</member>
			<member array="static" optional="true" size="4" basetype="float" name="color">
				<notation>Optional color for debug marker</notation>
			</member>
		</struct>
		<struct name="VkDedicatedAllocationImageCreateInfoNV" extends="VkImageCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="VkBool32" name="dedicatedAllocation">
				<notation>Whether this image uses a dedicated allocation</notation>
			</member>
		</struct>
		<struct name="VkDedicatedAllocationBufferCreateInfoNV" extends="VkBufferCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="VkBool32" name="dedicatedAllocation">
				<notation>Whether this buffer uses a dedicated allocation</notation>
			</member>
		</struct>
		<struct name="VkDedicatedAllocationMemoryAllocateInfoNV" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="image" basetype="VkImage" optional="true">
				<notation>Image that this allocation will be bound to</notation>
			</member>
			<member name="buffer" basetype="VkBuffer" optional="true">
				<notation>Buffer that this allocation will be bound to</notation>
			</member>
		</struct>
		<struct name="VkExternalImageFormatPropertiesNV" is-return="true">
			<member basetype="VkImageFormatProperties" name="imageFormatProperties"/>
			<member name="externalMemoryFeatures" basetype="VkExternalMemoryFeatureFlagsNV" optional="true"/>
			<member name="exportFromImportedHandleTypes" basetype="VkExternalMemoryHandleTypeFlagsNV" optional="true"/>
			<member name="compatibleHandleTypes" basetype="VkExternalMemoryHandleTypeFlagsNV" optional="true"/>
		</struct>
		<struct name="VkExternalMemoryImageCreateInfoNV" extends="VkImageCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handleTypes" basetype="VkExternalMemoryHandleTypeFlagsNV" optional="true"/>
		</struct>
		<struct name="VkExportMemoryAllocateInfoNV" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handleTypes" basetype="VkExternalMemoryHandleTypeFlagsNV" optional="true"/>
		</struct>
		<struct name="VkImportMemoryWin32HandleInfoNV" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handleType" basetype="VkExternalMemoryHandleTypeFlagsNV" optional="true"/>
			<member name="handle" basetype="HANDLE" optional="true"/>
		</struct>
		<struct name="VkExportMemoryWin32HandleInfoNV" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="pAttributes" optional="true" reference="pointer" const="true" basetype="SECURITY_ATTRIBUTES"/>
			<member name="dwAccess" basetype="DWORD" optional="true"/>
		</struct>
		<struct name="VkWin32KeyedMutexAcquireReleaseInfoNV" extends="VkSubmitInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="acquireCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="acquireCount" name="pAcquireSyncs" const="true" basetype="VkDeviceMemory"/>
			<member array="dynamic" reference="pointer" size="acquireCount" name="pAcquireKeys" const="true" basetype="uint64_t"/>
			<member array="dynamic" reference="pointer" size="acquireCount" name="pAcquireTimeoutMilliseconds" const="true" basetype="uint32_t"/>
			<member name="releaseCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="releaseCount" name="pReleaseSyncs" const="true" basetype="VkDeviceMemory"/>
			<member array="dynamic" reference="pointer" size="releaseCount" name="pReleaseKeys" const="true" basetype="uint64_t"/>
		</struct>
		<struct name="VkDeviceGeneratedCommandsFeaturesNVX">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="computeBindingPointSupport"/>
		</struct>
		<struct name="VkDeviceGeneratedCommandsLimitsNVX">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="maxIndirectCommandsLayoutTokenCount"/>
			<member basetype="uint32_t" name="maxObjectEntryCounts"/>
			<member basetype="uint32_t" name="minSequenceCountBufferOffsetAlignment"/>
			<member basetype="uint32_t" name="minSequenceIndexBufferOffsetAlignment"/>
			<member basetype="uint32_t" name="minCommandsTokenBufferOffsetAlignment"/>
		</struct>
		<struct name="VkIndirectCommandsTokenNVX">
			<member basetype="VkIndirectCommandsTokenTypeNVX" name="tokenType"/>
			<member basetype="VkBuffer" name="buffer">
				<notation>buffer containing tableEntries and additional data for indirectCommands</notation>
			</member>
			<member basetype="VkDeviceSize" name="offset">
				<notation>offset from the base address of the buffer</notation>
			</member>
		</struct>
		<struct name="VkIndirectCommandsLayoutTokenNVX">
			<member basetype="VkIndirectCommandsTokenTypeNVX" name="tokenType"/>
			<member basetype="uint32_t" name="bindingUnit">
				<notation>Binding unit for vertex attribute / descriptor set, offset for pushconstants</notation>
			</member>
			<member basetype="uint32_t" name="dynamicCount">
				<notation>Number of variable dynamic values for descriptor set / push constants</notation>
			</member>
			<member basetype="uint32_t" name="divisor">
				<notation>Rate the which the array is advanced per element (must be power of 2, minimum 1)</notation>
			</member>
		</struct>
		<struct name="VkIndirectCommandsLayoutCreateInfoNVX">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkPipelineBindPoint" name="pipelineBindPoint"/>
			<member basetype="VkIndirectCommandsLayoutUsageFlagsNVX" name="flags"/>
			<member basetype="uint32_t" name="tokenCount"/>
			<member array="dynamic" reference="pointer" size="tokenCount" name="pTokens" const="true" basetype="VkIndirectCommandsLayoutTokenNVX"/>
		</struct>
		<struct name="VkCmdProcessCommandsInfoNVX">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member sync="true" basetype="VkObjectTableNVX" name="objectTable"/>
			<member basetype="VkIndirectCommandsLayoutNVX" name="indirectCommandsLayout"/>
			<member basetype="uint32_t" name="indirectCommandsTokenCount"/>
			<member array="dynamic" reference="pointer" size="indirectCommandsTokenCount" name="pIndirectCommandsTokens" const="true" basetype="VkIndirectCommandsTokenNVX"/>
			<member basetype="uint32_t" name="maxSequencesCount"/>
			<member sync="true" name="targetCommandBuffer" basetype="VkCommandBuffer" optional="true"/>
			<member name="sequencesCountBuffer" basetype="VkBuffer" optional="true"/>
			<member name="sequencesCountOffset" basetype="VkDeviceSize" optional="true"/>
			<member name="sequencesIndexBuffer" basetype="VkBuffer" optional="true"/>
			<member name="sequencesIndexOffset" basetype="VkDeviceSize" optional="true"/>
		</struct>
		<struct name="VkCmdReserveSpaceForCommandsInfoNVX">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member sync="true" basetype="VkObjectTableNVX" name="objectTable"/>
			<member basetype="VkIndirectCommandsLayoutNVX" name="indirectCommandsLayout"/>
			<member basetype="uint32_t" name="maxSequencesCount"/>
		</struct>
		<struct name="VkObjectTableCreateInfoNVX">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="objectCount"/>
			<member array="dynamic" reference="pointer" size="objectCount" name="pObjectEntryTypes" const="true" basetype="VkObjectEntryTypeNVX"/>
			<member array="dynamic" reference="pointer" size="objectCount" name="pObjectEntryCounts" const="true" basetype="uint32_t"/>
			<member array="dynamic" reference="pointer" size="objectCount" name="pObjectEntryUsageFlags" const="true" basetype="VkObjectEntryUsageFlagsNVX"/>
			<member basetype="uint32_t" name="maxUniformBuffersPerDescriptor"/>
			<member basetype="uint32_t" name="maxStorageBuffersPerDescriptor"/>
			<member basetype="uint32_t" name="maxStorageImagesPerDescriptor"/>
			<member basetype="uint32_t" name="maxSampledImagesPerDescriptor"/>
			<member basetype="uint32_t" name="maxPipelineLayouts"/>
		</struct>
		<struct name="VkObjectTableEntryNVX">
			<member basetype="VkObjectEntryTypeNVX" name="type"/>
			<member basetype="VkObjectEntryUsageFlagsNVX" name="flags"/>
		</struct>
		<struct name="VkObjectTablePipelineEntryNVX">
			<member basetype="VkObjectEntryTypeNVX" name="type"/>
			<member basetype="VkObjectEntryUsageFlagsNVX" name="flags"/>
			<member basetype="VkPipeline" name="pipeline"/>
		</struct>
		<struct name="VkObjectTableDescriptorSetEntryNVX">
			<member basetype="VkObjectEntryTypeNVX" name="type"/>
			<member basetype="VkObjectEntryUsageFlagsNVX" name="flags"/>
			<member basetype="VkPipelineLayout" name="pipelineLayout"/>
			<member basetype="VkDescriptorSet" name="descriptorSet"/>
		</struct>
		<struct name="VkObjectTableVertexBufferEntryNVX">
			<member basetype="VkObjectEntryTypeNVX" name="type"/>
			<member basetype="VkObjectEntryUsageFlagsNVX" name="flags"/>
			<member basetype="VkBuffer" name="buffer"/>
		</struct>
		<struct name="VkObjectTableIndexBufferEntryNVX">
			<member basetype="VkObjectEntryTypeNVX" name="type"/>
			<member basetype="VkObjectEntryUsageFlagsNVX" name="flags"/>
			<member basetype="VkBuffer" name="buffer"/>
			<member basetype="VkIndexType" name="indexType"/>
		</struct>
		<struct name="VkObjectTablePushConstantEntryNVX">
			<member basetype="VkObjectEntryTypeNVX" name="type"/>
			<member basetype="VkObjectEntryUsageFlagsNVX" name="flags"/>
			<member basetype="VkPipelineLayout" name="pipelineLayout"/>
			<member basetype="VkShaderStageFlags" name="stageFlags"/>
		</struct>
		<struct name="VkPhysicalDeviceFeatures2KHR" extends="VkDeviceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkPhysicalDeviceFeatures" name="features"/>
		</struct>
		<struct name="VkPhysicalDeviceProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkPhysicalDeviceProperties" name="properties"/>
		</struct>
		<struct name="VkFormatProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkFormatProperties" name="formatProperties"/>
		</struct>
		<struct name="VkImageFormatProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkImageFormatProperties" name="imageFormatProperties"/>
		</struct>
		<struct name="VkPhysicalDeviceImageFormatInfo2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkFormat" name="format"/>
			<member basetype="VkImageType" name="type"/>
			<member basetype="VkImageTiling" name="tiling"/>
			<member basetype="VkImageUsageFlags" name="usage"/>
			<member name="flags" basetype="VkImageCreateFlags" optional="true"/>
		</struct>
		<struct name="VkQueueFamilyProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkQueueFamilyProperties" name="queueFamilyProperties"/>
		</struct>
		<struct name="VkPhysicalDeviceMemoryProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkPhysicalDeviceMemoryProperties" name="memoryProperties"/>
		</struct>
		<struct name="VkSparseImageFormatProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkSparseImageFormatProperties" name="properties"/>
		</struct>
		<struct name="VkPhysicalDeviceSparseImageFormatInfo2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkFormat" name="format"/>
			<member basetype="VkImageType" name="type"/>
			<member basetype="VkSampleCountFlagBits" name="samples"/>
			<member basetype="VkImageUsageFlags" name="usage"/>
			<member basetype="VkImageTiling" name="tiling"/>
		</struct>
		<struct name="VkPhysicalDevicePushDescriptorPropertiesKHR" extends="VkPhysicalDeviceProperties2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="maxPushDescriptors"/>
		</struct>
		<struct name="VkPresentRegionsKHR" extends="VkPresentInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="uint32_t" name="swapchainCount">
				<notation>Copy of VkPresentInfoKHR::swapchainCount</notation>
			</member>
			<member array="dynamic" name="pRegions" optional="true" size="swapchainCount" reference="pointer" const="true" basetype="VkPresentRegionKHR">
				<notation>The regions that have changed</notation>
			</member>
		</struct>
		<struct name="VkPresentRegionKHR">
			<member name="rectangleCount" basetype="uint32_t" optional="true">
				<notation>Number of rectangles in pRectangles</notation>
			</member>
			<member array="dynamic" name="pRectangles" optional="true" size="rectangleCount" reference="pointer" const="true" basetype="VkRectLayerKHR">
				<notation>Array of rectangles that have changed in a swapchain&apos;s image(s)</notation>
			</member>
		</struct>
		<struct name="VkRectLayerKHR">
			<member basetype="VkOffset2D" name="offset">
				<notation>upper-left corner of a rectangle that has not changed, in pixels of a presentation images</notation>
			</member>
			<member basetype="VkExtent2D" name="extent">
				<notation>Dimensions of a rectangle that has not changed, in pixels of a presentation images</notation>
			</member>
			<member basetype="uint32_t" name="layer">
				<notation>Layer of a swapchain&apos;s image(s), for stereoscopic-3D images</notation>
			</member>
		</struct>
		<struct name="VkPhysicalDeviceVariablePointerFeaturesKHR" extends="VkPhysicalDeviceFeatures2KHR,VkDeviceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="variablePointersStorageBuffer"/>
			<member basetype="VkBool32" name="variablePointers"/>
		</struct>
		<struct name="VkExternalMemoryPropertiesKHR" is-return="true">
			<member basetype="VkExternalMemoryFeatureFlagsKHR" name="externalMemoryFeatures"/>
			<member name="exportFromImportedHandleTypes" basetype="VkExternalMemoryHandleTypeFlagsKHR" optional="true"/>
			<member basetype="VkExternalMemoryHandleTypeFlagsKHR" name="compatibleHandleTypes"/>
		</struct>
		<struct name="VkPhysicalDeviceExternalImageFormatInfoKHR" extends="VkPhysicalDeviceImageFormatInfo2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="handleType" basetype="VkExternalMemoryHandleTypeFlagBitsKHR" optional="true"/>
		</struct>
		<struct name="VkExternalImageFormatPropertiesKHR" extends="VkImageFormatProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkExternalMemoryPropertiesKHR" name="externalMemoryProperties"/>
		</struct>
		<struct name="VkPhysicalDeviceExternalBufferInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkBufferCreateFlags" optional="true"/>
			<member basetype="VkBufferUsageFlags" name="usage"/>
			<member basetype="VkExternalMemoryHandleTypeFlagBitsKHR" name="handleType"/>
		</struct>
		<struct name="VkExternalBufferPropertiesKHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkExternalMemoryPropertiesKHR" name="externalMemoryProperties"/>
		</struct>
		<struct name="VkPhysicalDeviceIDPropertiesKHR" extends="VkPhysicalDeviceProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member name="deviceUUID" size-enumref="VK_UUID_SIZE" basetype="uint8_t" array="static"/>
			<member name="driverUUID" size-enumref="VK_UUID_SIZE" basetype="uint8_t" array="static"/>
			<member name="deviceLUID" size-enumref="VK_LUID_SIZE_KHR" basetype="uint8_t" array="static"/>
			<member basetype="uint32_t" name="deviceNodeMask"/>
			<member basetype="VkBool32" name="deviceLUIDValid"/>
		</struct>
		<struct name="VkExternalMemoryImageCreateInfoKHR" extends="VkImageCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkExternalMemoryHandleTypeFlagsKHR" name="handleTypes"/>
		</struct>
		<struct name="VkExternalMemoryBufferCreateInfoKHR" extends="VkBufferCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handleTypes" basetype="VkExternalMemoryHandleTypeFlagsKHR" optional="true"/>
		</struct>
		<struct name="VkExportMemoryAllocateInfoKHR" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handleTypes" basetype="VkExternalMemoryHandleTypeFlagsKHR" optional="true"/>
		</struct>
		<struct name="VkImportMemoryWin32HandleInfoKHR" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handleType" basetype="VkExternalMemoryHandleTypeFlagBitsKHR" optional="true"/>
			<member name="handle" basetype="HANDLE" optional="true"/>
			<member name="name" basetype="LPCWSTR" optional="true"/>
		</struct>
		<struct name="VkExportMemoryWin32HandleInfoKHR" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="pAttributes" optional="true" reference="pointer" const="true" basetype="SECURITY_ATTRIBUTES"/>
			<member basetype="DWORD" name="dwAccess"/>
			<member basetype="LPCWSTR" name="name"/>
		</struct>
		<struct name="VkMemoryWin32HandlePropertiesKHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="memoryTypeBits"/>
		</struct>
		<struct name="VkMemoryGetWin32HandleInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDeviceMemory" name="memory"/>
			<member basetype="VkExternalMemoryHandleTypeFlagBitsKHR" name="handleType"/>
		</struct>
		<struct name="VkImportMemoryFdInfoKHR" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handleType" basetype="VkExternalMemoryHandleTypeFlagBitsKHR" optional="true"/>
			<member basetype="int" name="fd"/>
		</struct>
		<struct name="VkMemoryFdPropertiesKHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="memoryTypeBits"/>
		</struct>
		<struct name="VkMemoryGetFdInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDeviceMemory" name="memory"/>
			<member basetype="VkExternalMemoryHandleTypeFlagBitsKHR" name="handleType"/>
		</struct>
		<struct name="VkWin32KeyedMutexAcquireReleaseInfoKHR" extends="VkSubmitInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="acquireCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="acquireCount" name="pAcquireSyncs" const="true" basetype="VkDeviceMemory"/>
			<member array="dynamic" reference="pointer" size="acquireCount" name="pAcquireKeys" const="true" basetype="uint64_t"/>
			<member array="dynamic" reference="pointer" size="acquireCount" name="pAcquireTimeouts" const="true" basetype="uint32_t"/>
			<member name="releaseCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="releaseCount" name="pReleaseSyncs" const="true" basetype="VkDeviceMemory"/>
			<member array="dynamic" reference="pointer" size="releaseCount" name="pReleaseKeys" const="true" basetype="uint64_t"/>
		</struct>
		<struct name="VkPhysicalDeviceExternalSemaphoreInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkExternalSemaphoreHandleTypeFlagBitsKHR" name="handleType"/>
		</struct>
		<struct name="VkExternalSemaphorePropertiesKHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkExternalSemaphoreHandleTypeFlagsKHR" name="exportFromImportedHandleTypes"/>
			<member basetype="VkExternalSemaphoreHandleTypeFlagsKHR" name="compatibleHandleTypes"/>
			<member name="externalSemaphoreFeatures" basetype="VkExternalSemaphoreFeatureFlagsKHR" optional="true"/>
		</struct>
		<struct name="VkExportSemaphoreCreateInfoKHR" extends="VkSemaphoreCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handleTypes" basetype="VkExternalSemaphoreHandleTypeFlagsKHR" optional="true"/>
		</struct>
		<struct name="VkImportSemaphoreWin32HandleInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member sync="true" basetype="VkSemaphore" name="semaphore"/>
			<member name="flags" basetype="VkSemaphoreImportFlagsKHR" optional="true"/>
			<member name="handleType" basetype="VkExternalSemaphoreHandleTypeFlagBitsKHR" optional="true"/>
			<member name="handle" basetype="HANDLE" optional="true"/>
			<member name="name" basetype="LPCWSTR" optional="true"/>
		</struct>
		<struct name="VkExportSemaphoreWin32HandleInfoKHR" extends="VkSemaphoreCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="pAttributes" optional="true" reference="pointer" const="true" basetype="SECURITY_ATTRIBUTES"/>
			<member basetype="DWORD" name="dwAccess"/>
			<member basetype="LPCWSTR" name="name"/>
		</struct>
		<struct name="VkD3D12FenceSubmitInfoKHR" extends="VkSubmitInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="waitSemaphoreValuesCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" name="pWaitSemaphoreValues" optional="true" size="waitSemaphoreValuesCount" reference="pointer" const="true" basetype="uint64_t"/>
			<member name="signalSemaphoreValuesCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" name="pSignalSemaphoreValues" optional="true" size="signalSemaphoreValuesCount" reference="pointer" const="true" basetype="uint64_t"/>
		</struct>
		<struct name="VkSemaphoreGetWin32HandleInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkSemaphore" name="semaphore"/>
			<member basetype="VkExternalSemaphoreHandleTypeFlagBitsKHR" name="handleType"/>
		</struct>
		<struct name="VkImportSemaphoreFdInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member sync="true" basetype="VkSemaphore" name="semaphore"/>
			<member name="flags" basetype="VkSemaphoreImportFlagsKHR" optional="true"/>
			<member basetype="VkExternalSemaphoreHandleTypeFlagBitsKHR" name="handleType"/>
			<member basetype="int" name="fd"/>
		</struct>
		<struct name="VkSemaphoreGetFdInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkSemaphore" name="semaphore"/>
			<member basetype="VkExternalSemaphoreHandleTypeFlagBitsKHR" name="handleType"/>
		</struct>
		<struct name="VkPhysicalDeviceExternalFenceInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkExternalFenceHandleTypeFlagBitsKHR" name="handleType"/>
		</struct>
		<struct name="VkExternalFencePropertiesKHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkExternalFenceHandleTypeFlagsKHR" name="exportFromImportedHandleTypes"/>
			<member basetype="VkExternalFenceHandleTypeFlagsKHR" name="compatibleHandleTypes"/>
			<member name="externalFenceFeatures" basetype="VkExternalFenceFeatureFlagsKHR" optional="true"/>
		</struct>
		<struct name="VkExportFenceCreateInfoKHR" extends="VkFenceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handleTypes" basetype="VkExternalFenceHandleTypeFlagsKHR" optional="true"/>
		</struct>
		<struct name="VkImportFenceWin32HandleInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member sync="true" basetype="VkFence" name="fence"/>
			<member name="flags" basetype="VkFenceImportFlagsKHR" optional="true"/>
			<member name="handleType" basetype="VkExternalFenceHandleTypeFlagBitsKHR" optional="true"/>
			<member name="handle" basetype="HANDLE" optional="true"/>
			<member name="name" basetype="LPCWSTR" optional="true"/>
		</struct>
		<struct name="VkExportFenceWin32HandleInfoKHR" extends="VkFenceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="pAttributes" optional="true" reference="pointer" const="true" basetype="SECURITY_ATTRIBUTES"/>
			<member basetype="DWORD" name="dwAccess"/>
			<member basetype="LPCWSTR" name="name"/>
		</struct>
		<struct name="VkFenceGetWin32HandleInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkFence" name="fence"/>
			<member basetype="VkExternalFenceHandleTypeFlagBitsKHR" name="handleType"/>
		</struct>
		<struct name="VkImportFenceFdInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member sync="true" basetype="VkFence" name="fence"/>
			<member name="flags" basetype="VkFenceImportFlagsKHR" optional="true"/>
			<member basetype="VkExternalFenceHandleTypeFlagBitsKHR" name="handleType"/>
			<member basetype="int" name="fd"/>
		</struct>
		<struct name="VkFenceGetFdInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkFence" name="fence"/>
			<member basetype="VkExternalFenceHandleTypeFlagBitsKHR" name="handleType"/>
		</struct>
		<struct name="VkPhysicalDeviceMultiviewFeaturesKHX" extends="VkPhysicalDeviceFeatures2KHR,VkDeviceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHX"/>
			<member name="pNext" auto-validity="false" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="multiview">
				<notation>Multiple views in a renderpass</notation>
			</member>
			<member basetype="VkBool32" name="multiviewGeometryShader">
				<notation>Multiple views in a renderpass w/ geometry shader</notation>
			</member>
			<member basetype="VkBool32" name="multiviewTessellationShader">
				<notation>Multiple views in a renderpass w/ tessellation shader</notation>
			</member>
		</struct>
		<struct name="VkPhysicalDeviceMultiviewPropertiesKHX" extends="VkPhysicalDeviceProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHX"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="maxMultiviewViewCount">
				<notation>max number of views in a subpass</notation>
			</member>
			<member basetype="uint32_t" name="maxMultiviewInstanceIndex">
				<notation>max instance index for a draw in a multiview subpass</notation>
			</member>
		</struct>
		<struct name="VkRenderPassMultiviewCreateInfoKHX" extends="VkRenderPassCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="subpassCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="subpassCount" name="pViewMasks" const="true" basetype="uint32_t"/>
			<member name="dependencyCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="dependencyCount" name="pViewOffsets" const="true" basetype="int32_t"/>
			<member name="correlationMaskCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="correlationMaskCount" name="pCorrelationMasks" const="true" basetype="uint32_t"/>
		</struct>
		<struct name="VkSurfaceCapabilities2EXT" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="minImageCount">
				<notation>Supported minimum number of images for the surface</notation>
			</member>
			<member basetype="uint32_t" name="maxImageCount">
				<notation>Supported maximum number of images for the surface, 0 for unlimited</notation>
			</member>
			<member basetype="VkExtent2D" name="currentExtent">
				<notation>Current image width and height for the surface, (0, 0) if undefined</notation>
			</member>
			<member basetype="VkExtent2D" name="minImageExtent">
				<notation>Supported minimum image width and height for the surface</notation>
			</member>
			<member basetype="VkExtent2D" name="maxImageExtent">
				<notation>Supported maximum image width and height for the surface</notation>
			</member>
			<member basetype="uint32_t" name="maxImageArrayLayers">
				<notation>Supported maximum number of image layers for the surface</notation>
			</member>
			<member name="supportedTransforms" basetype="VkSurfaceTransformFlagsKHR" optional="true">
				<notation>1 or more bits representing the transforms supported</notation>
			</member>
			<member basetype="VkSurfaceTransformFlagBitsKHR" name="currentTransform">
				<notation>The surface&apos;s current transform relative to the device&apos;s natural orientation</notation>
			</member>
			<member name="supportedCompositeAlpha" basetype="VkCompositeAlphaFlagsKHR" optional="true">
				<notation>1 or more bits representing the alpha compositing modes supported</notation>
			</member>
			<member name="supportedUsageFlags" basetype="VkImageUsageFlags" optional="true">
				<notation>Supported image usage flags for the surface</notation>
			</member>
			<member name="supportedSurfaceCounters" basetype="VkSurfaceCounterFlagsEXT" optional="true"/>
		</struct>
		<struct name="VkDisplayPowerInfoEXT">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDisplayPowerStateEXT" name="powerState"/>
		</struct>
		<struct name="VkDeviceEventInfoEXT">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDeviceEventTypeEXT" name="deviceEvent"/>
		</struct>
		<struct name="VkDisplayEventInfoEXT">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkDisplayEventTypeEXT" name="displayEvent"/>
		</struct>
		<struct name="VkSwapchainCounterCreateInfoEXT" extends="VkSwapchainCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="surfaceCounters" basetype="VkSurfaceCounterFlagsEXT" optional="true"/>
		</struct>
		<struct name="VkPhysicalDeviceGroupPropertiesKHX" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHX"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="physicalDeviceCount"/>
			<member name="physicalDevices" size-enumref="VK_MAX_DEVICE_GROUP_SIZE_KHX" basetype="VkPhysicalDevice" array="static"/>
			<member basetype="VkBool32" name="subsetAllocation"/>
		</struct>
		<struct name="VkMemoryAllocateFlagsInfoKHX" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="flags" basetype="VkMemoryAllocateFlagsKHX" optional="true"/>
			<member basetype="uint32_t" name="deviceMask"/>
		</struct>
		<struct name="VkBindBufferMemoryInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkBuffer" name="buffer"/>
			<member basetype="VkDeviceMemory" name="memory"/>
			<member basetype="VkDeviceSize" name="memoryOffset"/>
		</struct>
		<struct name="VkBindBufferMemoryDeviceGroupInfoKHX" extends="VkBindBufferMemoryInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="deviceIndexCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="deviceIndexCount" name="pDeviceIndices" const="true" basetype="uint32_t"/>
		</struct>
		<struct name="VkBindImageMemoryInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkImage" name="image"/>
			<member name="memory" auto-validity="false" basetype="VkDeviceMemory"/>
			<member basetype="VkDeviceSize" name="memoryOffset"/>
		</struct>
		<struct name="VkBindImageMemoryDeviceGroupInfoKHX" extends="VkBindImageMemoryInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="deviceIndexCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="deviceIndexCount" name="pDeviceIndices" const="true" basetype="uint32_t"/>
			<member name="SFRRectCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="SFRRectCount" name="pSFRRects" const="true" basetype="VkRect2D"/>
		</struct>
		<struct name="VkDeviceGroupRenderPassBeginInfoKHX" extends="VkRenderPassBeginInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="uint32_t" name="deviceMask"/>
			<member name="deviceRenderAreaCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="deviceRenderAreaCount" name="pDeviceRenderAreas" const="true" basetype="VkRect2D"/>
		</struct>
		<struct name="VkDeviceGroupCommandBufferBeginInfoKHX" extends="VkCommandBufferBeginInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="uint32_t" name="deviceMask"/>
		</struct>
		<struct name="VkDeviceGroupSubmitInfoKHX" extends="VkSubmitInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="waitSemaphoreCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="waitSemaphoreCount" name="pWaitSemaphoreDeviceIndices" const="true" basetype="uint32_t"/>
			<member name="commandBufferCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="commandBufferCount" name="pCommandBufferDeviceMasks" const="true" basetype="uint32_t"/>
			<member name="signalSemaphoreCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="signalSemaphoreCount" name="pSignalSemaphoreDeviceIndices" const="true" basetype="uint32_t"/>
		</struct>
		<struct name="VkDeviceGroupBindSparseInfoKHX" extends="VkBindSparseInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="uint32_t" name="resourceDeviceIndex"/>
			<member basetype="uint32_t" name="memoryDeviceIndex"/>
		</struct>
		<struct name="VkDeviceGroupPresentCapabilitiesKHX" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="presentMask" size-enumref="VK_MAX_DEVICE_GROUP_SIZE_KHX" basetype="uint32_t" array="static"/>
			<member basetype="VkDeviceGroupPresentModeFlagsKHX" name="modes"/>
		</struct>
		<struct name="VkImageSwapchainCreateInfoKHX" extends="VkImageCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="swapchain" basetype="VkSwapchainKHR" optional="true"/>
		</struct>
		<struct name="VkBindImageMemorySwapchainInfoKHX" extends="VkBindImageMemoryInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member sync="true" basetype="VkSwapchainKHR" name="swapchain"/>
			<member basetype="uint32_t" name="imageIndex"/>
		</struct>
		<struct name="VkAcquireNextImageInfoKHX">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHX"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member sync="true" basetype="VkSwapchainKHR" name="swapchain"/>
			<member basetype="uint64_t" name="timeout"/>
			<member sync="true" name="semaphore" basetype="VkSemaphore" optional="true"/>
			<member sync="true" name="fence" basetype="VkFence" optional="true"/>
			<member basetype="uint32_t" name="deviceMask"/>
		</struct>
		<struct name="VkDeviceGroupPresentInfoKHX" extends="VkPresentInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="swapchainCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="swapchainCount" name="pDeviceMasks" const="true" basetype="uint32_t"/>
			<member basetype="VkDeviceGroupPresentModeFlagBitsKHX" name="mode"/>
		</struct>
		<struct name="VkDeviceGroupDeviceCreateInfoKHX" extends="VkDeviceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member name="physicalDeviceCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="physicalDeviceCount" name="pPhysicalDevices" const="true" basetype="VkPhysicalDevice"/>
		</struct>
		<struct name="VkDeviceGroupSwapchainCreateInfoKHX" extends="VkSwapchainCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHX"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="VkDeviceGroupPresentModeFlagsKHX" name="modes"/>
		</struct>
		<struct name="VkDescriptorUpdateTemplateEntryKHR">
			<member basetype="uint32_t" name="dstBinding">
				<notation>Binding within the destination descriptor set to write</notation>
			</member>
			<member basetype="uint32_t" name="dstArrayElement">
				<notation>Array element within the destination binding to write</notation>
			</member>
			<member basetype="uint32_t" name="descriptorCount">
				<notation>Number of descriptors to write</notation>
			</member>
			<member basetype="VkDescriptorType" name="descriptorType">
				<notation>Descriptor type to write</notation>
			</member>
			<member basetype="size_t" name="offset">
				<notation>Offset into pData where the descriptors to update are stored</notation>
			</member>
			<member basetype="size_t" name="stride">
				<notation>Stride between two descriptors in pData when writing more than one descriptor</notation>
			</member>
		</struct>
		<struct name="VkDescriptorUpdateTemplateCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkDescriptorUpdateTemplateCreateFlagsKHR" optional="true"/>
			<member basetype="uint32_t" name="descriptorUpdateEntryCount">
				<notation>Number of descriptor update entries to use for the update template</notation>
			</member>
			<member array="dynamic" reference="pointer" size="descriptorUpdateEntryCount" name="pDescriptorUpdateEntries" const="true" basetype="VkDescriptorUpdateTemplateEntryKHR">
				<notation>Descriptor update entries for the template</notation>
			</member>
			<member basetype="VkDescriptorUpdateTemplateTypeKHR" name="templateType"/>
			<member name="descriptorSetLayout" basetype="VkDescriptorSetLayout" optional="true"/>
			<member name="pipelineBindPoint" basetype="VkPipelineBindPoint" optional="true"/>
			<member name="pipelineLayout" basetype="VkPipelineLayout" optional="true">
				<notation>If used for push descriptors, this is the only allowed layout</notation>
			</member>
			<member name="set" basetype="uint32_t" optional="true"/>
		</struct>
		<struct name="VkXYColorEXT" notation="Chromaticity coordinate">
			<member basetype="float" name="x"/>
			<member basetype="float" name="y"/>
		</struct>
		<struct name="VkHdrMetadataEXT">
			<notation>Display primary in chromaticity coordinates</notation>
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_HDR_METADATA_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<notation> From SMPTE 2086</notation>
			<member basetype="VkXYColorEXT" name="displayPrimaryRed">
				<notation>Display primary&apos;s Red</notation>
			</member>
			<member basetype="VkXYColorEXT" name="displayPrimaryGreen">
				<notation>Display primary&apos;s Green</notation>
			</member>
			<member basetype="VkXYColorEXT" name="displayPrimaryBlue">
				<notation>Display primary&apos;s Blue</notation>
			</member>
			<member basetype="VkXYColorEXT" name="whitePoint">
				<notation>Display primary&apos;s Blue</notation>
			</member>
			<member basetype="float" name="maxLuminance">
				<notation>Display maximum luminance</notation>
			</member>
			<member basetype="float" name="minLuminance">
				<notation>Display minimum luminance</notation>
			</member>
			<notation> From CTA 861.3</notation>
			<member basetype="float" name="maxContentLightLevel">
				<notation>Content maximum luminance</notation>
			</member>
			<member basetype="float" name="maxFrameAverageLightLevel"/>
		</struct>
		<struct name="VkRefreshCycleDurationGOOGLE">
			<member basetype="uint64_t" name="refreshDuration">
				<notation>Number of nanoseconds from the start of one refresh cycle to the next</notation>
			</member>
		</struct>
		<struct name="VkPastPresentationTimingGOOGLE">
			<member basetype="uint32_t" name="presentID">
				<notation>Application-provided identifier, previously given to vkQueuePresentKHR</notation>
			</member>
			<member basetype="uint64_t" name="desiredPresentTime">
				<notation>Earliest time an image should have been presented, previously given to vkQueuePresentKHR</notation>
			</member>
			<member basetype="uint64_t" name="actualPresentTime">
				<notation>Time the image was actually displayed</notation>
			</member>
			<member basetype="uint64_t" name="earliestPresentTime">
				<notation>Earliest time the image could have been displayed</notation>
			</member>
			<member basetype="uint64_t" name="presentMargin">
				<notation>How early vkQueuePresentKHR was processed vs. how soon it needed to be and make earliestPresentTime</notation>
			</member>
		</struct>
		<struct name="VkPresentTimesInfoGOOGLE" extends="VkPresentInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="uint32_t" name="swapchainCount">
				<notation>Copy of VkPresentInfoKHR::swapchainCount</notation>
			</member>
			<member array="dynamic" name="pTimes" optional="true" size="swapchainCount" reference="pointer" const="true" basetype="VkPresentTimeGOOGLE">
				<notation>The earliest times to present images</notation>
			</member>
		</struct>
		<struct name="VkPresentTimeGOOGLE">
			<member basetype="uint32_t" name="presentID">
				<notation>Application-provided identifier</notation>
			</member>
			<member basetype="uint64_t" name="desiredPresentTime">
				<notation>Earliest time an image should be presented</notation>
			</member>
		</struct>
		<struct name="VkIOSSurfaceCreateInfoMVK">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkIOSSurfaceCreateFlagsMVK" optional="true"/>
			<member name="pView" reference="pointer" auto-validity="false" const="true" basetype="void"/>
		</struct>
		<struct name="VkMacOSSurfaceCreateInfoMVK">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkMacOSSurfaceCreateFlagsMVK" optional="true"/>
			<member name="pView" reference="pointer" auto-validity="false" const="true" basetype="void"/>
		</struct>
		<struct name="VkViewportWScalingNV">
			<member basetype="float" name="xcoeff"/>
			<member basetype="float" name="ycoeff"/>
		</struct>
		<struct name="VkPipelineViewportWScalingStateCreateInfoNV" extends="VkPipelineViewportStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="VkBool32" name="viewportWScalingEnable"/>
			<member basetype="uint32_t" name="viewportCount"/>
			<member array="dynamic" name="pViewportWScalings" reference="pointer" size="viewportCount" auto-validity="false" const="true" basetype="VkViewportWScalingNV"/>
		</struct>
		<struct name="VkViewportSwizzleNV">
			<member basetype="VkViewportCoordinateSwizzleNV" name="x"/>
			<member basetype="VkViewportCoordinateSwizzleNV" name="y"/>
			<member basetype="VkViewportCoordinateSwizzleNV" name="z"/>
			<member basetype="VkViewportCoordinateSwizzleNV" name="w"/>
		</struct>
		<struct name="VkPipelineViewportSwizzleStateCreateInfoNV" extends="VkPipelineViewportStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineViewportSwizzleStateCreateFlagsNV" optional="true"/>
			<member basetype="uint32_t" name="viewportCount"/>
			<member array="dynamic" name="pViewportSwizzles" reference="pointer" optional="true" size="viewportCount" auto-validity="false" const="true" basetype="VkViewportSwizzleNV"/>
		</struct>
		<struct name="VkPhysicalDeviceDiscardRectanglePropertiesEXT" extends="VkPhysicalDeviceProperties2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="maxDiscardRectangles">
				<notation>max number of active discard rectangles</notation>
			</member>
		</struct>
		<struct name="VkPipelineDiscardRectangleStateCreateInfoEXT" extends="VkGraphicsPipelineCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineDiscardRectangleStateCreateFlagsEXT" optional="true"/>
			<member basetype="VkDiscardRectangleModeEXT" name="discardRectangleMode"/>
			<member name="discardRectangleCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" name="pDiscardRectangles" reference="pointer" optional="true" size="discardRectangleCount" auto-validity="false" const="true" basetype="VkRect2D"/>
		</struct>
		<struct name="VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX" extends="VkPhysicalDeviceProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="perViewPositionAllComponents"/>
		</struct>
		<struct name="VkInputAttachmentAspectReferenceKHR">
			<member basetype="uint32_t" name="subpass"/>
			<member basetype="uint32_t" name="inputAttachmentIndex"/>
			<member basetype="VkImageAspectFlags" name="aspectMask"/>
		</struct>
		<struct name="VkRenderPassInputAttachmentAspectCreateInfoKHR" extends="VkRenderPassCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="aspectReferenceCount"/>
			<member array="dynamic" reference="pointer" size="aspectReferenceCount" name="pAspectReferences" const="true" basetype="VkInputAttachmentAspectReferenceKHR"/>
		</struct>
		<struct name="VkPhysicalDeviceSurfaceInfo2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkSurfaceKHR" name="surface"/>
		</struct>
		<struct name="VkSurfaceCapabilities2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkSurfaceCapabilitiesKHR" name="surfaceCapabilities"/>
		</struct>
		<struct name="VkSurfaceFormat2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkSurfaceFormatKHR" name="surfaceFormat"/>
		</struct>
		<struct name="VkSharedPresentSurfaceCapabilitiesKHR" extends="VkSurfaceCapabilities2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR"/>
			<member name="pNext" auto-validity="false" basetype="void" reference="pointer"/>
			<member name="sharedPresentSupportedUsageFlags" basetype="VkImageUsageFlags" optional="true">
				<notation>Supported image usage flags if swapchain created using a shared present mode</notation>
			</member>
		</struct>
		<struct name="VkPhysicalDevice16BitStorageFeaturesKHR" extends="VkPhysicalDeviceFeatures2KHR,VkDeviceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR"/>
			<member name="pNext" auto-validity="false" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="storageBuffer16BitAccess">
				<notation>16-bit integer/floating-point variables supported in BufferBlock</notation>
			</member>
			<member basetype="VkBool32" name="uniformAndStorageBuffer16BitAccess">
				<notation>16-bit integer/floating-point variables supported in BufferBlock and Block</notation>
			</member>
			<member basetype="VkBool32" name="storagePushConstant16">
				<notation>16-bit integer/floating-point variables supported in PushConstant</notation>
			</member>
			<member basetype="VkBool32" name="storageInputOutput16">
				<notation>16-bit integer/floating-point variables supported in shader inputs and outputs</notation>
			</member>
		</struct>
		<struct name="VkBufferMemoryRequirementsInfo2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkBuffer" name="buffer"/>
		</struct>
		<struct name="VkImageMemoryRequirementsInfo2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkImage" name="image"/>
		</struct>
		<struct name="VkImageSparseMemoryRequirementsInfo2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkImage" name="image"/>
		</struct>
		<struct name="VkMemoryRequirements2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkMemoryRequirements" name="memoryRequirements"/>
		</struct>
		<struct name="VkSparseImageMemoryRequirements2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkSparseImageMemoryRequirements" name="memoryRequirements"/>
		</struct>
		<struct name="VkPhysicalDevicePointClippingPropertiesKHR" extends="VkPhysicalDeviceProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkPointClippingBehaviorKHR" name="pointClippingBehavior"/>
		</struct>
		<struct name="VkMemoryDedicatedRequirementsKHR" extends="VkMemoryRequirements2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="prefersDedicatedAllocation"/>
			<member basetype="VkBool32" name="requiresDedicatedAllocation"/>
		</struct>
		<struct name="VkMemoryDedicatedAllocateInfoKHR" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="image" basetype="VkImage" optional="true">
				<notation>Image that this allocation will be bound to</notation>
			</member>
			<member name="buffer" basetype="VkBuffer" optional="true">
				<notation>Buffer that this allocation will be bound to</notation>
			</member>
		</struct>
		<struct name="VkImageViewUsageCreateInfoKHR" extends="VkImageViewCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkImageUsageFlags" name="usage"/>
		</struct>
		<struct name="VkPipelineTessellationDomainOriginStateCreateInfoKHR" extends="VkPipelineTessellationStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkTessellationDomainOriginKHR" name="domainOrigin"/>
		</struct>
		<struct name="VkSamplerYcbcrConversionInfoKHR" extends="VkSamplerCreateInfo,VkImageViewCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="VkSamplerYcbcrConversionKHR" name="conversion"/>
		</struct>
		<struct name="VkSamplerYcbcrConversionCreateInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkFormat" name="format"/>
			<member basetype="VkSamplerYcbcrModelConversionKHR" name="ycbcrModel"/>
			<member basetype="VkSamplerYcbcrRangeKHR" name="ycbcrRange"/>
			<member basetype="VkComponentMapping" name="components"/>
			<member basetype="VkChromaLocationKHR" name="xChromaOffset"/>
			<member basetype="VkChromaLocationKHR" name="yChromaOffset"/>
			<member basetype="VkFilter" name="chromaFilter"/>
			<member basetype="VkBool32" name="forceExplicitReconstruction"/>
		</struct>
		<struct name="VkBindImagePlaneMemoryInfoKHR" extends="VkBindImageMemoryInfoKHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="VkImageAspectFlagBits" name="planeAspect"/>
		</struct>
		<struct name="VkImagePlaneMemoryRequirementsInfoKHR" extends="VkImageMemoryRequirementsInfo2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR"/>
			<member name="pNext" reference="pointer" auto-validity="false" const="true" basetype="void"/>
			<member basetype="VkImageAspectFlagBits" name="planeAspect"/>
		</struct>
		<struct name="VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR" extends="VkPhysicalDeviceFeatures2KHR,VkDeviceCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR"/>
			<member name="pNext" auto-validity="false" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="samplerYcbcrConversion">
				<notation>Sampler color conversion supported</notation>
			</member>
		</struct>
		<struct name="VkSamplerYcbcrConversionImageFormatPropertiesKHR" extends="VkImageFormatProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR"/>
			<member name="pNext" auto-validity="false" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="combinedImageSamplerDescriptorCount"/>
		</struct>
		<struct name="VkTextureLODGatherFormatPropertiesAMD" extends="VkImageFormatProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="supportsTextureGatherLODBiasAMD"/>
		</struct>
		<struct name="VkPipelineCoverageToColorStateCreateInfoNV" extends="VkPipelineMultisampleStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineCoverageToColorStateCreateFlagsNV" optional="true"/>
			<member basetype="VkBool32" name="coverageToColorEnable"/>
			<member name="coverageToColorLocation" basetype="uint32_t" optional="true"/>
		</struct>
		<struct name="VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT" extends="VkPhysicalDeviceProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="filterMinmaxSingleComponentFormats"/>
			<member basetype="VkBool32" name="filterMinmaxImageComponentMapping"/>
		</struct>
		<struct name="VkSampleLocationEXT">
			<member basetype="float" name="x"/>
			<member basetype="float" name="y"/>
		</struct>
		<struct name="VkSampleLocationsInfoEXT" extends="VkImageMemoryBarrier">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkSampleCountFlagBits" name="sampleLocationsPerPixel"/>
			<member basetype="VkExtent2D" name="sampleLocationGridSize"/>
			<member basetype="uint32_t" name="sampleLocationsCount"/>
			<member array="dynamic" reference="pointer" size="sampleLocationsCount" name="pSampleLocations" const="true" basetype="VkSampleLocationEXT"/>
		</struct>
		<struct name="VkAttachmentSampleLocationsEXT">
			<member basetype="uint32_t" name="attachmentIndex"/>
			<member basetype="VkSampleLocationsInfoEXT" name="sampleLocationsInfo"/>
		</struct>
		<struct name="VkSubpassSampleLocationsEXT">
			<member basetype="uint32_t" name="subpassIndex"/>
			<member basetype="VkSampleLocationsInfoEXT" name="sampleLocationsInfo"/>
		</struct>
		<struct name="VkRenderPassSampleLocationsBeginInfoEXT" extends="VkRenderPassBeginInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="attachmentInitialSampleLocationsCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="attachmentInitialSampleLocationsCount" name="pAttachmentInitialSampleLocations" const="true" basetype="VkAttachmentSampleLocationsEXT"/>
			<member name="postSubpassSampleLocationsCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="postSubpassSampleLocationsCount" name="pPostSubpassSampleLocations" const="true" basetype="VkSubpassSampleLocationsEXT"/>
		</struct>
		<struct name="VkPipelineSampleLocationsStateCreateInfoEXT" extends="VkPipelineMultisampleStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="sampleLocationsEnable"/>
			<member basetype="VkSampleLocationsInfoEXT" name="sampleLocationsInfo"/>
		</struct>
		<struct name="VkPhysicalDeviceSampleLocationsPropertiesEXT" extends="VkPhysicalDeviceProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkSampleCountFlags" name="sampleLocationSampleCounts"/>
			<member basetype="VkExtent2D" name="maxSampleLocationGridSize"/>
			<member name="sampleLocationCoordinateRange" size="2" basetype="float" array="static"/>
			<member basetype="uint32_t" name="sampleLocationSubPixelBits"/>
			<member basetype="VkBool32" name="variableSampleLocations"/>
		</struct>
		<struct name="VkMultisamplePropertiesEXT" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkExtent2D" name="maxSampleLocationGridSize"/>
		</struct>
		<struct name="VkSamplerReductionModeCreateInfoEXT" extends="VkSamplerCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkSamplerReductionModeEXT" name="reductionMode"/>
		</struct>
		<struct name="VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT" extends="VkPhysicalDeviceFeatures2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT"/>
			<member name="pNext" auto-validity="false" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="advancedBlendCoherentOperations"/>
		</struct>
		<struct name="VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT" extends="VkPhysicalDeviceProperties2KHR" is-return="true">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT"/>
			<member name="pNext" auto-validity="false" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="advancedBlendMaxColorAttachments"/>
			<member basetype="VkBool32" name="advancedBlendIndependentBlend"/>
			<member basetype="VkBool32" name="advancedBlendNonPremultipliedSrcColor"/>
			<member basetype="VkBool32" name="advancedBlendNonPremultipliedDstColor"/>
			<member basetype="VkBool32" name="advancedBlendCorrelatedOverlap"/>
			<member basetype="VkBool32" name="advancedBlendAllOperations"/>
		</struct>
		<struct name="VkPipelineColorBlendAdvancedStateCreateInfoEXT" extends="VkPipelineColorBlendStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkBool32" name="srcPremultiplied"/>
			<member basetype="VkBool32" name="dstPremultiplied"/>
			<member basetype="VkBlendOverlapEXT" name="blendOverlap"/>
		</struct>
		<struct name="VkPipelineCoverageModulationStateCreateInfoNV" extends="VkPipelineMultisampleStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineCoverageModulationStateCreateFlagsNV" optional="true"/>
			<member basetype="VkCoverageModulationModeNV" name="coverageModulationMode"/>
			<member basetype="VkBool32" name="coverageModulationTableEnable"/>
			<member basetype="uint32_t" name="coverageModulationTableCount"/>
			<member array="dynamic" name="pCoverageModulationTable" reference="pointer" optional="true" size="coverageModulationTableCount" auto-validity="false" const="true" basetype="float"/>
		</struct>
		<struct name="VkImageFormatListCreateInfoKHR" extends="VkImageCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="viewFormatCount" basetype="uint32_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="viewFormatCount" name="pViewFormats" const="true" basetype="VkFormat"/>
		</struct>
		<struct name="VkValidationCacheCreateInfoEXT">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkValidationCacheCreateFlagsEXT" optional="true"/>
			<member name="initialDataSize" basetype="size_t" optional="true"/>
			<member array="dynamic" reference="pointer" size="initialDataSize" name="pInitialData" const="true" basetype="void"/>
		</struct>
		<struct name="VkShaderModuleValidationCacheCreateInfoEXT" extends="VkShaderModuleCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkValidationCacheEXT" name="validationCache"/>
		</struct>
		<struct name="VkNativeBufferANDROID">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="handle" const="true" basetype="void" reference="pointer"/>
			<member basetype="int" name="stride"/>
			<member basetype="int" name="format"/>
			<member basetype="int" name="usage"/>
		</struct>
		<struct name="VkShaderResourceUsageAMD" is-return="true">
			<member basetype="uint32_t" name="numUsedVgprs"/>
			<member basetype="uint32_t" name="numUsedSgprs"/>
			<member basetype="uint32_t" name="ldsSizePerLocalWorkGroup"/>
			<member basetype="size_t" name="ldsUsageSizeInBytes"/>
			<member basetype="size_t" name="scratchMemUsageInBytes"/>
		</struct>
		<struct name="VkShaderStatisticsInfoAMD" is-return="true">
			<member basetype="VkShaderStageFlags" name="shaderStageMask"/>
			<member basetype="VkShaderResourceUsageAMD" name="resourceUsage"/>
			<member basetype="uint32_t" name="numPhysicalVgprs"/>
			<member basetype="uint32_t" name="numPhysicalSgprs"/>
			<member basetype="uint32_t" name="numAvailableVgprs"/>
			<member basetype="uint32_t" name="numAvailableSgprs"/>
			<member name="computeWorkGroupSize" size="3" basetype="uint32_t" array="static"/>
		</struct>
		<struct name="VkDeviceQueueGlobalPriorityCreateInfoEXT" extends="VkDeviceQueueCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkQueueGlobalPriorityEXT" name="globalPriority"/>
		</struct>
		<struct name="VkImportMemoryHostPointerInfoEXT" extends="VkMemoryAllocateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member basetype="VkExternalMemoryHandleTypeFlagBitsKHR" name="handleType"/>
			<member name="pHostPointer" reference="pointer" basetype="void" optional="false"/>
		</struct>
		<struct name="VkMemoryHostPointerPropertiesEXT">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="uint32_t" name="memoryTypeBits"/>
		</struct>
		<struct name="VkPhysicalDeviceExternalMemoryHostPropertiesEXT" extends="VkPhysicalDeviceProperties2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT"/>
			<member name="pNext" basetype="void" reference="pointer"/>
			<member basetype="VkDeviceSize" name="minImportedHostPointerAlignment"/>
		</struct>
		<struct name="VkPhysicalDeviceConservativeRasterizationPropertiesEXT" extends="VkPhysicalDeviceProperties2KHR">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT"/>
			<member name="pNext" basetype="void" reference="pointer">
				<notation>Pointer to next structure</notation>
			</member>
			<member basetype="float" name="primitiveOverestimationSize">
				<notation>The size in pixels the primitive is enlarged at each edge during conservative rasterization</notation>
			</member>
			<member basetype="float" name="maxExtraPrimitiveOverestimationSize">
				<notation>The maximum additional overestimation the client can specify in the pipeline state</notation>
			</member>
			<member basetype="float" name="extraPrimitiveOverestimationSizeGranularity">
				<notation>The granularity of extra overestimation sizes the implementations supports between 0 and maxExtraOverestimationSize</notation>
			</member>
			<member basetype="VkBool32" name="primitiveUnderestimation">
				<notation>true if the implementation supports conservative rasterization underestimation mode</notation>
			</member>
			<member basetype="VkBool32" name="conservativePointAndLineRasterization">
				<notation>true if conservative rasterization also applies to points and lines</notation>
			</member>
			<member basetype="VkBool32" name="degenerateTrianglesRasterized">
				<notation>true if degenerate triangles (those with zero area after snap) are rasterized</notation>
			</member>
			<member basetype="VkBool32" name="degenerateLinesRasterized">
				<notation>true if degenerate lines (those with zero length after snap) are rasterized</notation>
			</member>
			<member basetype="VkBool32" name="fullyCoveredFragmentShaderInputVariable">
				<notation>true if the implementation supports the FullyCoveredEXT SPIR-V builtin fragment shader input
 variable</notation>
			</member>
			<member basetype="VkBool32" name="conservativeRasterizationPostDepthCoverage">
				<notation>true if the implementation supports both conservative rasterization and post depth coverage sample coverage mask</notation>
			</member>
		</struct>
		<struct name="VkPipelineRasterizationConservativeStateCreateInfoEXT" extends="VkPipelineRasterizationStateCreateInfo">
			<member name="sType" basetype="VkStructureType" type-enums="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT"/>
			<member name="pNext" const="true" basetype="void" reference="pointer"/>
			<member name="flags" basetype="VkPipelineRasterizationConservativeStateCreateFlagsEXT" optional="true"/>
			<member basetype="VkConservativeRasterizationModeEXT" name="conservativeRasterizationMode"/>
			<member basetype="float" name="extraPrimitiveOverestimationSize"/>
		</struct>
	</definitions>
	<notation>Vulkan enumerant (token) definitions</notation>
	<constants notation="Vulkan hardcoded constants - not an enumerated type, part of the header boilerplate">
		<constant name="VK_MAX_PHYSICAL_DEVICE_NAME_SIZE" number="256"/>
		<constant name="VK_UUID_SIZE" number="16"/>
		<constant name="VK_LUID_SIZE_KHR" number="8"/>
		<constant name="VK_MAX_EXTENSION_NAME_SIZE" number="256"/>
		<constant name="VK_MAX_DESCRIPTION_SIZE" number="256"/>
		<constant name="VK_MAX_MEMORY_TYPES" number="32"/>
		<constant name="VK_MAX_MEMORY_HEAPS" notation="The maximum number of unique memory heaps, each of which supporting 1 or more memory types" number="16"/>
		<constant name="VK_LOD_CLAMP_NONE" c-expression="1000.0f"/>
		<constant name="VK_REMAINING_MIP_LEVELS" c-expression="(~0U)"/>
		<constant name="VK_REMAINING_ARRAY_LAYERS" c-expression="(~0U)"/>
		<constant name="VK_WHOLE_SIZE" c-expression="(~0ULL)"/>
		<constant name="VK_ATTACHMENT_UNUSED" c-expression="(~0U)"/>
		<constant name="VK_TRUE" number="1"/>
		<constant name="VK_FALSE" number="0"/>
		<constant name="VK_QUEUE_FAMILY_IGNORED" c-expression="(~0U)"/>
		<constant name="VK_QUEUE_FAMILY_EXTERNAL_KHR" c-expression="(~0U-1)"/>
		<constant name="VK_QUEUE_FAMILY_FOREIGN_EXT" c-expression="(~0U-2)"/>
		<constant name="VK_SUBPASS_EXTERNAL" c-expression="(~0U)"/>
		<constant name="VK_MAX_DEVICE_GROUP_SIZE_KHX" number="32"/>
	</constants>
	<notation>
        Unlike OpenGL, most tokens in Vulkan are actual typed enumerants in
        their own numeric namespaces. The &quot;name&quot; attribute is the C enum
        type name, and is pulled in from a type tag definition above
        (slightly clunky, but retains the type / enum distinction). &quot;type&quot;
        attributes of &quot;enum&quot; or &quot;bitmask&quot; indicate that these values should
        be generated inside an appropriate definition.
    </notation>
	<enums>
		<enumeration name="VkImageLayout">
			<enum name="VK_IMAGE_LAYOUT_UNDEFINED" notation="Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)" number="0"/>
			<enum name="VK_IMAGE_LAYOUT_GENERAL" notation="General layout when image can be used for any kind of access" number="1"/>
			<enum name="VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL" notation="Optimal layout when image is only used for color attachment read/write" number="2"/>
			<enum name="VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL" notation="Optimal layout when image is only used for depth/stencil attachment read/write" number="3"/>
			<enum name="VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL" notation="Optimal layout when image is used for read only depth/stencil attachment and shader access" number="4"/>
			<enum name="VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL" notation="Optimal layout when image is used for read only shader access" number="5"/>
			<enum name="VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL" notation="Optimal layout when image is used only as source of transfer operations" number="6"/>
			<enum name="VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL" notation="Optimal layout when image is used only as destination of transfer operations" number="7"/>
			<enum name="VK_IMAGE_LAYOUT_PREINITIALIZED" notation="Initial layout used when the data is populated by the CPU" number="8"/>
		</enumeration>
		<enumeration name="VkAttachmentLoadOp">
			<enum name="VK_ATTACHMENT_LOAD_OP_LOAD" number="0"/>
			<enum name="VK_ATTACHMENT_LOAD_OP_CLEAR" number="1"/>
			<enum name="VK_ATTACHMENT_LOAD_OP_DONT_CARE" number="2"/>
		</enumeration>
		<enumeration name="VkAttachmentStoreOp">
			<enum name="VK_ATTACHMENT_STORE_OP_STORE" number="0"/>
			<enum name="VK_ATTACHMENT_STORE_OP_DONT_CARE" number="1"/>
		</enumeration>
		<enumeration name="VkImageType">
			<enum name="VK_IMAGE_TYPE_1D" number="0"/>
			<enum name="VK_IMAGE_TYPE_2D" number="1"/>
			<enum name="VK_IMAGE_TYPE_3D" number="2"/>
		</enumeration>
		<enumeration name="VkImageTiling">
			<enum name="VK_IMAGE_TILING_OPTIMAL" number="0"/>
			<enum name="VK_IMAGE_TILING_LINEAR" number="1"/>
		</enumeration>
		<enumeration name="VkImageViewType">
			<enum name="VK_IMAGE_VIEW_TYPE_1D" number="0"/>
			<enum name="VK_IMAGE_VIEW_TYPE_2D" number="1"/>
			<enum name="VK_IMAGE_VIEW_TYPE_3D" number="2"/>
			<enum name="VK_IMAGE_VIEW_TYPE_CUBE" number="3"/>
			<enum name="VK_IMAGE_VIEW_TYPE_1D_ARRAY" number="4"/>
			<enum name="VK_IMAGE_VIEW_TYPE_2D_ARRAY" number="5"/>
			<enum name="VK_IMAGE_VIEW_TYPE_CUBE_ARRAY" number="6"/>
		</enumeration>
		<enumeration name="VkCommandBufferLevel">
			<enum name="VK_COMMAND_BUFFER_LEVEL_PRIMARY" number="0"/>
			<enum name="VK_COMMAND_BUFFER_LEVEL_SECONDARY" number="1"/>
		</enumeration>
		<enumeration name="VkComponentSwizzle">
			<enum name="VK_COMPONENT_SWIZZLE_IDENTITY" number="0"/>
			<enum name="VK_COMPONENT_SWIZZLE_ZERO" number="1"/>
			<enum name="VK_COMPONENT_SWIZZLE_ONE" number="2"/>
			<enum name="VK_COMPONENT_SWIZZLE_R" number="3"/>
			<enum name="VK_COMPONENT_SWIZZLE_G" number="4"/>
			<enum name="VK_COMPONENT_SWIZZLE_B" number="5"/>
			<enum name="VK_COMPONENT_SWIZZLE_A" number="6"/>
		</enumeration>
		<enumeration name="VkDescriptorType">
			<enum name="VK_DESCRIPTOR_TYPE_SAMPLER" number="0"/>
			<enum name="VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER" number="1"/>
			<enum name="VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE" number="2"/>
			<enum name="VK_DESCRIPTOR_TYPE_STORAGE_IMAGE" number="3"/>
			<enum name="VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER" number="4"/>
			<enum name="VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER" number="5"/>
			<enum name="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER" number="6"/>
			<enum name="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER" number="7"/>
			<enum name="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC" number="8"/>
			<enum name="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC" number="9"/>
			<enum name="VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT" number="10"/>
		</enumeration>
		<enumeration name="VkQueryType">
			<enum name="VK_QUERY_TYPE_OCCLUSION" number="0"/>
			<enum name="VK_QUERY_TYPE_PIPELINE_STATISTICS" notation="Optional" number="1"/>
			<enum name="VK_QUERY_TYPE_TIMESTAMP" number="2"/>
		</enumeration>
		<enumeration name="VkBorderColor">
			<enum name="VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK" number="0"/>
			<enum name="VK_BORDER_COLOR_INT_TRANSPARENT_BLACK" number="1"/>
			<enum name="VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK" number="2"/>
			<enum name="VK_BORDER_COLOR_INT_OPAQUE_BLACK" number="3"/>
			<enum name="VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE" number="4"/>
			<enum name="VK_BORDER_COLOR_INT_OPAQUE_WHITE" number="5"/>
		</enumeration>
		<enumeration name="VkPipelineBindPoint">
			<enum name="VK_PIPELINE_BIND_POINT_GRAPHICS" number="0"/>
			<enum name="VK_PIPELINE_BIND_POINT_COMPUTE" number="1"/>
		</enumeration>
		<enumeration name="VkPipelineCacheHeaderVersion">
			<enum name="VK_PIPELINE_CACHE_HEADER_VERSION_ONE" number="1"/>
		</enumeration>
		<enumeration name="VkPrimitiveTopology">
			<enum name="VK_PRIMITIVE_TOPOLOGY_POINT_LIST" number="0"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_LINE_LIST" number="1"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP" number="2"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST" number="3"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP" number="4"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN" number="5"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY" number="6"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY" number="7"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY" number="8"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY" number="9"/>
			<enum name="VK_PRIMITIVE_TOPOLOGY_PATCH_LIST" number="10"/>
		</enumeration>
		<enumeration name="VkSharingMode">
			<enum name="VK_SHARING_MODE_EXCLUSIVE" number="0"/>
			<enum name="VK_SHARING_MODE_CONCURRENT" number="1"/>
		</enumeration>
		<enumeration name="VkIndexType">
			<enum name="VK_INDEX_TYPE_UINT16" number="0"/>
			<enum name="VK_INDEX_TYPE_UINT32" number="1"/>
		</enumeration>
		<enumeration name="VkFilter">
			<enum name="VK_FILTER_NEAREST" number="0"/>
			<enum name="VK_FILTER_LINEAR" number="1"/>
		</enumeration>
		<enumeration name="VkSamplerMipmapMode">
			<enum name="VK_SAMPLER_MIPMAP_MODE_NEAREST" notation="Choose nearest mip level" number="0"/>
			<enum name="VK_SAMPLER_MIPMAP_MODE_LINEAR" notation="Linear filter between mip levels" number="1"/>
		</enumeration>
		<enumeration name="VkSamplerAddressMode">
			<enum name="VK_SAMPLER_ADDRESS_MODE_REPEAT" number="0"/>
			<enum name="VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT" number="1"/>
			<enum name="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE" number="2"/>
			<enum name="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER" number="3"/>
			<notation>
                value=&quot;4&quot; reserved for VK_KHR_sampler_mirror_clamp_to_edge
                enum VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE; do not
                alias!
            </notation>
		</enumeration>
		<enumeration name="VkCompareOp">
			<enum name="VK_COMPARE_OP_NEVER" number="0"/>
			<enum name="VK_COMPARE_OP_LESS" number="1"/>
			<enum name="VK_COMPARE_OP_EQUAL" number="2"/>
			<enum name="VK_COMPARE_OP_LESS_OR_EQUAL" number="3"/>
			<enum name="VK_COMPARE_OP_GREATER" number="4"/>
			<enum name="VK_COMPARE_OP_NOT_EQUAL" number="5"/>
			<enum name="VK_COMPARE_OP_GREATER_OR_EQUAL" number="6"/>
			<enum name="VK_COMPARE_OP_ALWAYS" number="7"/>
		</enumeration>
		<enumeration name="VkPolygonMode">
			<enum name="VK_POLYGON_MODE_FILL" number="0"/>
			<enum name="VK_POLYGON_MODE_LINE" number="1"/>
			<enum name="VK_POLYGON_MODE_POINT" number="2"/>
		</enumeration>
		<enumeration name="VkCullModeFlagBits" purpose="bitmask">
			<enum name="VK_CULL_MODE_NONE" number="0"/>
			<enum name="VK_CULL_MODE_FRONT_BIT" bitpos="0"/>
			<enum name="VK_CULL_MODE_BACK_BIT" bitpos="1"/>
			<enum name="VK_CULL_MODE_FRONT_AND_BACK" hex="00000003"/>
		</enumeration>
		<enumeration name="VkFrontFace">
			<enum name="VK_FRONT_FACE_COUNTER_CLOCKWISE" number="0"/>
			<enum name="VK_FRONT_FACE_CLOCKWISE" number="1"/>
		</enumeration>
		<enumeration name="VkBlendFactor">
			<enum name="VK_BLEND_FACTOR_ZERO" number="0"/>
			<enum name="VK_BLEND_FACTOR_ONE" number="1"/>
			<enum name="VK_BLEND_FACTOR_SRC_COLOR" number="2"/>
			<enum name="VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR" number="3"/>
			<enum name="VK_BLEND_FACTOR_DST_COLOR" number="4"/>
			<enum name="VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR" number="5"/>
			<enum name="VK_BLEND_FACTOR_SRC_ALPHA" number="6"/>
			<enum name="VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA" number="7"/>
			<enum name="VK_BLEND_FACTOR_DST_ALPHA" number="8"/>
			<enum name="VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA" number="9"/>
			<enum name="VK_BLEND_FACTOR_CONSTANT_COLOR" number="10"/>
			<enum name="VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR" number="11"/>
			<enum name="VK_BLEND_FACTOR_CONSTANT_ALPHA" number="12"/>
			<enum name="VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA" number="13"/>
			<enum name="VK_BLEND_FACTOR_SRC_ALPHA_SATURATE" number="14"/>
			<enum name="VK_BLEND_FACTOR_SRC1_COLOR" number="15"/>
			<enum name="VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR" number="16"/>
			<enum name="VK_BLEND_FACTOR_SRC1_ALPHA" number="17"/>
			<enum name="VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA" number="18"/>
		</enumeration>
		<enumeration name="VkBlendOp">
			<enum name="VK_BLEND_OP_ADD" number="0"/>
			<enum name="VK_BLEND_OP_SUBTRACT" number="1"/>
			<enum name="VK_BLEND_OP_REVERSE_SUBTRACT" number="2"/>
			<enum name="VK_BLEND_OP_MIN" number="3"/>
			<enum name="VK_BLEND_OP_MAX" number="4"/>
		</enumeration>
		<enumeration name="VkStencilOp">
			<enum name="VK_STENCIL_OP_KEEP" number="0"/>
			<enum name="VK_STENCIL_OP_ZERO" number="1"/>
			<enum name="VK_STENCIL_OP_REPLACE" number="2"/>
			<enum name="VK_STENCIL_OP_INCREMENT_AND_CLAMP" number="3"/>
			<enum name="VK_STENCIL_OP_DECREMENT_AND_CLAMP" number="4"/>
			<enum name="VK_STENCIL_OP_INVERT" number="5"/>
			<enum name="VK_STENCIL_OP_INCREMENT_AND_WRAP" number="6"/>
			<enum name="VK_STENCIL_OP_DECREMENT_AND_WRAP" number="7"/>
		</enumeration>
		<enumeration name="VkLogicOp">
			<enum name="VK_LOGIC_OP_CLEAR" number="0"/>
			<enum name="VK_LOGIC_OP_AND" number="1"/>
			<enum name="VK_LOGIC_OP_AND_REVERSE" number="2"/>
			<enum name="VK_LOGIC_OP_COPY" number="3"/>
			<enum name="VK_LOGIC_OP_AND_INVERTED" number="4"/>
			<enum name="VK_LOGIC_OP_NO_OP" number="5"/>
			<enum name="VK_LOGIC_OP_XOR" number="6"/>
			<enum name="VK_LOGIC_OP_OR" number="7"/>
			<enum name="VK_LOGIC_OP_NOR" number="8"/>
			<enum name="VK_LOGIC_OP_EQUIVALENT" number="9"/>
			<enum name="VK_LOGIC_OP_INVERT" number="10"/>
			<enum name="VK_LOGIC_OP_OR_REVERSE" number="11"/>
			<enum name="VK_LOGIC_OP_COPY_INVERTED" number="12"/>
			<enum name="VK_LOGIC_OP_OR_INVERTED" number="13"/>
			<enum name="VK_LOGIC_OP_NAND" number="14"/>
			<enum name="VK_LOGIC_OP_SET" number="15"/>
		</enumeration>
		<enumeration name="VkInternalAllocationType">
			<enum name="VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE" number="0"/>
		</enumeration>
		<enumeration name="VkSystemAllocationScope">
			<enum name="VK_SYSTEM_ALLOCATION_SCOPE_COMMAND" number="0"/>
			<enum name="VK_SYSTEM_ALLOCATION_SCOPE_OBJECT" number="1"/>
			<enum name="VK_SYSTEM_ALLOCATION_SCOPE_CACHE" number="2"/>
			<enum name="VK_SYSTEM_ALLOCATION_SCOPE_DEVICE" number="3"/>
			<enum name="VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE" number="4"/>
		</enumeration>
		<enumeration name="VkPhysicalDeviceType">
			<enum name="VK_PHYSICAL_DEVICE_TYPE_OTHER" number="0"/>
			<enum name="VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU" number="1"/>
			<enum name="VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU" number="2"/>
			<enum name="VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU" number="3"/>
			<enum name="VK_PHYSICAL_DEVICE_TYPE_CPU" number="4"/>
		</enumeration>
		<enumeration name="VkVertexInputRate">
			<enum name="VK_VERTEX_INPUT_RATE_VERTEX" number="0"/>
			<enum name="VK_VERTEX_INPUT_RATE_INSTANCE" number="1"/>
		</enumeration>
		<enumeration name="VkFormat" notation="Vulkan format definitions">
			<enum name="VK_FORMAT_UNDEFINED" number="0"/>
			<enum name="VK_FORMAT_R4G4_UNORM_PACK8" number="1"/>
			<enum name="VK_FORMAT_R4G4B4A4_UNORM_PACK16" number="2"/>
			<enum name="VK_FORMAT_B4G4R4A4_UNORM_PACK16" number="3"/>
			<enum name="VK_FORMAT_R5G6B5_UNORM_PACK16" number="4"/>
			<enum name="VK_FORMAT_B5G6R5_UNORM_PACK16" number="5"/>
			<enum name="VK_FORMAT_R5G5B5A1_UNORM_PACK16" number="6"/>
			<enum name="VK_FORMAT_B5G5R5A1_UNORM_PACK16" number="7"/>
			<enum name="VK_FORMAT_A1R5G5B5_UNORM_PACK16" number="8"/>
			<enum name="VK_FORMAT_R8_UNORM" number="9"/>
			<enum name="VK_FORMAT_R8_SNORM" number="10"/>
			<enum name="VK_FORMAT_R8_USCALED" number="11"/>
			<enum name="VK_FORMAT_R8_SSCALED" number="12"/>
			<enum name="VK_FORMAT_R8_UINT" number="13"/>
			<enum name="VK_FORMAT_R8_SINT" number="14"/>
			<enum name="VK_FORMAT_R8_SRGB" number="15"/>
			<enum name="VK_FORMAT_R8G8_UNORM" number="16"/>
			<enum name="VK_FORMAT_R8G8_SNORM" number="17"/>
			<enum name="VK_FORMAT_R8G8_USCALED" number="18"/>
			<enum name="VK_FORMAT_R8G8_SSCALED" number="19"/>
			<enum name="VK_FORMAT_R8G8_UINT" number="20"/>
			<enum name="VK_FORMAT_R8G8_SINT" number="21"/>
			<enum name="VK_FORMAT_R8G8_SRGB" number="22"/>
			<enum name="VK_FORMAT_R8G8B8_UNORM" number="23"/>
			<enum name="VK_FORMAT_R8G8B8_SNORM" number="24"/>
			<enum name="VK_FORMAT_R8G8B8_USCALED" number="25"/>
			<enum name="VK_FORMAT_R8G8B8_SSCALED" number="26"/>
			<enum name="VK_FORMAT_R8G8B8_UINT" number="27"/>
			<enum name="VK_FORMAT_R8G8B8_SINT" number="28"/>
			<enum name="VK_FORMAT_R8G8B8_SRGB" number="29"/>
			<enum name="VK_FORMAT_B8G8R8_UNORM" number="30"/>
			<enum name="VK_FORMAT_B8G8R8_SNORM" number="31"/>
			<enum name="VK_FORMAT_B8G8R8_USCALED" number="32"/>
			<enum name="VK_FORMAT_B8G8R8_SSCALED" number="33"/>
			<enum name="VK_FORMAT_B8G8R8_UINT" number="34"/>
			<enum name="VK_FORMAT_B8G8R8_SINT" number="35"/>
			<enum name="VK_FORMAT_B8G8R8_SRGB" number="36"/>
			<enum name="VK_FORMAT_R8G8B8A8_UNORM" number="37"/>
			<enum name="VK_FORMAT_R8G8B8A8_SNORM" number="38"/>
			<enum name="VK_FORMAT_R8G8B8A8_USCALED" number="39"/>
			<enum name="VK_FORMAT_R8G8B8A8_SSCALED" number="40"/>
			<enum name="VK_FORMAT_R8G8B8A8_UINT" number="41"/>
			<enum name="VK_FORMAT_R8G8B8A8_SINT" number="42"/>
			<enum name="VK_FORMAT_R8G8B8A8_SRGB" number="43"/>
			<enum name="VK_FORMAT_B8G8R8A8_UNORM" number="44"/>
			<enum name="VK_FORMAT_B8G8R8A8_SNORM" number="45"/>
			<enum name="VK_FORMAT_B8G8R8A8_USCALED" number="46"/>
			<enum name="VK_FORMAT_B8G8R8A8_SSCALED" number="47"/>
			<enum name="VK_FORMAT_B8G8R8A8_UINT" number="48"/>
			<enum name="VK_FORMAT_B8G8R8A8_SINT" number="49"/>
			<enum name="VK_FORMAT_B8G8R8A8_SRGB" number="50"/>
			<enum name="VK_FORMAT_A8B8G8R8_UNORM_PACK32" number="51"/>
			<enum name="VK_FORMAT_A8B8G8R8_SNORM_PACK32" number="52"/>
			<enum name="VK_FORMAT_A8B8G8R8_USCALED_PACK32" number="53"/>
			<enum name="VK_FORMAT_A8B8G8R8_SSCALED_PACK32" number="54"/>
			<enum name="VK_FORMAT_A8B8G8R8_UINT_PACK32" number="55"/>
			<enum name="VK_FORMAT_A8B8G8R8_SINT_PACK32" number="56"/>
			<enum name="VK_FORMAT_A8B8G8R8_SRGB_PACK32" number="57"/>
			<enum name="VK_FORMAT_A2R10G10B10_UNORM_PACK32" number="58"/>
			<enum name="VK_FORMAT_A2R10G10B10_SNORM_PACK32" number="59"/>
			<enum name="VK_FORMAT_A2R10G10B10_USCALED_PACK32" number="60"/>
			<enum name="VK_FORMAT_A2R10G10B10_SSCALED_PACK32" number="61"/>
			<enum name="VK_FORMAT_A2R10G10B10_UINT_PACK32" number="62"/>
			<enum name="VK_FORMAT_A2R10G10B10_SINT_PACK32" number="63"/>
			<enum name="VK_FORMAT_A2B10G10R10_UNORM_PACK32" number="64"/>
			<enum name="VK_FORMAT_A2B10G10R10_SNORM_PACK32" number="65"/>
			<enum name="VK_FORMAT_A2B10G10R10_USCALED_PACK32" number="66"/>
			<enum name="VK_FORMAT_A2B10G10R10_SSCALED_PACK32" number="67"/>
			<enum name="VK_FORMAT_A2B10G10R10_UINT_PACK32" number="68"/>
			<enum name="VK_FORMAT_A2B10G10R10_SINT_PACK32" number="69"/>
			<enum name="VK_FORMAT_R16_UNORM" number="70"/>
			<enum name="VK_FORMAT_R16_SNORM" number="71"/>
			<enum name="VK_FORMAT_R16_USCALED" number="72"/>
			<enum name="VK_FORMAT_R16_SSCALED" number="73"/>
			<enum name="VK_FORMAT_R16_UINT" number="74"/>
			<enum name="VK_FORMAT_R16_SINT" number="75"/>
			<enum name="VK_FORMAT_R16_SFLOAT" number="76"/>
			<enum name="VK_FORMAT_R16G16_UNORM" number="77"/>
			<enum name="VK_FORMAT_R16G16_SNORM" number="78"/>
			<enum name="VK_FORMAT_R16G16_USCALED" number="79"/>
			<enum name="VK_FORMAT_R16G16_SSCALED" number="80"/>
			<enum name="VK_FORMAT_R16G16_UINT" number="81"/>
			<enum name="VK_FORMAT_R16G16_SINT" number="82"/>
			<enum name="VK_FORMAT_R16G16_SFLOAT" number="83"/>
			<enum name="VK_FORMAT_R16G16B16_UNORM" number="84"/>
			<enum name="VK_FORMAT_R16G16B16_SNORM" number="85"/>
			<enum name="VK_FORMAT_R16G16B16_USCALED" number="86"/>
			<enum name="VK_FORMAT_R16G16B16_SSCALED" number="87"/>
			<enum name="VK_FORMAT_R16G16B16_UINT" number="88"/>
			<enum name="VK_FORMAT_R16G16B16_SINT" number="89"/>
			<enum name="VK_FORMAT_R16G16B16_SFLOAT" number="90"/>
			<enum name="VK_FORMAT_R16G16B16A16_UNORM" number="91"/>
			<enum name="VK_FORMAT_R16G16B16A16_SNORM" number="92"/>
			<enum name="VK_FORMAT_R16G16B16A16_USCALED" number="93"/>
			<enum name="VK_FORMAT_R16G16B16A16_SSCALED" number="94"/>
			<enum name="VK_FORMAT_R16G16B16A16_UINT" number="95"/>
			<enum name="VK_FORMAT_R16G16B16A16_SINT" number="96"/>
			<enum name="VK_FORMAT_R16G16B16A16_SFLOAT" number="97"/>
			<enum name="VK_FORMAT_R32_UINT" number="98"/>
			<enum name="VK_FORMAT_R32_SINT" number="99"/>
			<enum name="VK_FORMAT_R32_SFLOAT" number="100"/>
			<enum name="VK_FORMAT_R32G32_UINT" number="101"/>
			<enum name="VK_FORMAT_R32G32_SINT" number="102"/>
			<enum name="VK_FORMAT_R32G32_SFLOAT" number="103"/>
			<enum name="VK_FORMAT_R32G32B32_UINT" number="104"/>
			<enum name="VK_FORMAT_R32G32B32_SINT" number="105"/>
			<enum name="VK_FORMAT_R32G32B32_SFLOAT" number="106"/>
			<enum name="VK_FORMAT_R32G32B32A32_UINT" number="107"/>
			<enum name="VK_FORMAT_R32G32B32A32_SINT" number="108"/>
			<enum name="VK_FORMAT_R32G32B32A32_SFLOAT" number="109"/>
			<enum name="VK_FORMAT_R64_UINT" number="110"/>
			<enum name="VK_FORMAT_R64_SINT" number="111"/>
			<enum name="VK_FORMAT_R64_SFLOAT" number="112"/>
			<enum name="VK_FORMAT_R64G64_UINT" number="113"/>
			<enum name="VK_FORMAT_R64G64_SINT" number="114"/>
			<enum name="VK_FORMAT_R64G64_SFLOAT" number="115"/>
			<enum name="VK_FORMAT_R64G64B64_UINT" number="116"/>
			<enum name="VK_FORMAT_R64G64B64_SINT" number="117"/>
			<enum name="VK_FORMAT_R64G64B64_SFLOAT" number="118"/>
			<enum name="VK_FORMAT_R64G64B64A64_UINT" number="119"/>
			<enum name="VK_FORMAT_R64G64B64A64_SINT" number="120"/>
			<enum name="VK_FORMAT_R64G64B64A64_SFLOAT" number="121"/>
			<enum name="VK_FORMAT_B10G11R11_UFLOAT_PACK32" number="122"/>
			<enum name="VK_FORMAT_E5B9G9R9_UFLOAT_PACK32" number="123"/>
			<enum name="VK_FORMAT_D16_UNORM" number="124"/>
			<enum name="VK_FORMAT_X8_D24_UNORM_PACK32" number="125"/>
			<enum name="VK_FORMAT_D32_SFLOAT" number="126"/>
			<enum name="VK_FORMAT_S8_UINT" number="127"/>
			<enum name="VK_FORMAT_D16_UNORM_S8_UINT" number="128"/>
			<enum name="VK_FORMAT_D24_UNORM_S8_UINT" number="129"/>
			<enum name="VK_FORMAT_D32_SFLOAT_S8_UINT" number="130"/>
			<enum name="VK_FORMAT_BC1_RGB_UNORM_BLOCK" number="131"/>
			<enum name="VK_FORMAT_BC1_RGB_SRGB_BLOCK" number="132"/>
			<enum name="VK_FORMAT_BC1_RGBA_UNORM_BLOCK" number="133"/>
			<enum name="VK_FORMAT_BC1_RGBA_SRGB_BLOCK" number="134"/>
			<enum name="VK_FORMAT_BC2_UNORM_BLOCK" number="135"/>
			<enum name="VK_FORMAT_BC2_SRGB_BLOCK" number="136"/>
			<enum name="VK_FORMAT_BC3_UNORM_BLOCK" number="137"/>
			<enum name="VK_FORMAT_BC3_SRGB_BLOCK" number="138"/>
			<enum name="VK_FORMAT_BC4_UNORM_BLOCK" number="139"/>
			<enum name="VK_FORMAT_BC4_SNORM_BLOCK" number="140"/>
			<enum name="VK_FORMAT_BC5_UNORM_BLOCK" number="141"/>
			<enum name="VK_FORMAT_BC5_SNORM_BLOCK" number="142"/>
			<enum name="VK_FORMAT_BC6H_UFLOAT_BLOCK" number="143"/>
			<enum name="VK_FORMAT_BC6H_SFLOAT_BLOCK" number="144"/>
			<enum name="VK_FORMAT_BC7_UNORM_BLOCK" number="145"/>
			<enum name="VK_FORMAT_BC7_SRGB_BLOCK" number="146"/>
			<enum name="VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK" number="147"/>
			<enum name="VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK" number="148"/>
			<enum name="VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK" number="149"/>
			<enum name="VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK" number="150"/>
			<enum name="VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK" number="151"/>
			<enum name="VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK" number="152"/>
			<enum name="VK_FORMAT_EAC_R11_UNORM_BLOCK" number="153"/>
			<enum name="VK_FORMAT_EAC_R11_SNORM_BLOCK" number="154"/>
			<enum name="VK_FORMAT_EAC_R11G11_UNORM_BLOCK" number="155"/>
			<enum name="VK_FORMAT_EAC_R11G11_SNORM_BLOCK" number="156"/>
			<enum name="VK_FORMAT_ASTC_4x4_UNORM_BLOCK" number="157"/>
			<enum name="VK_FORMAT_ASTC_4x4_SRGB_BLOCK" number="158"/>
			<enum name="VK_FORMAT_ASTC_5x4_UNORM_BLOCK" number="159"/>
			<enum name="VK_FORMAT_ASTC_5x4_SRGB_BLOCK" number="160"/>
			<enum name="VK_FORMAT_ASTC_5x5_UNORM_BLOCK" number="161"/>
			<enum name="VK_FORMAT_ASTC_5x5_SRGB_BLOCK" number="162"/>
			<enum name="VK_FORMAT_ASTC_6x5_UNORM_BLOCK" number="163"/>
			<enum name="VK_FORMAT_ASTC_6x5_SRGB_BLOCK" number="164"/>
			<enum name="VK_FORMAT_ASTC_6x6_UNORM_BLOCK" number="165"/>
			<enum name="VK_FORMAT_ASTC_6x6_SRGB_BLOCK" number="166"/>
			<enum name="VK_FORMAT_ASTC_8x5_UNORM_BLOCK" number="167"/>
			<enum name="VK_FORMAT_ASTC_8x5_SRGB_BLOCK" number="168"/>
			<enum name="VK_FORMAT_ASTC_8x6_UNORM_BLOCK" number="169"/>
			<enum name="VK_FORMAT_ASTC_8x6_SRGB_BLOCK" number="170"/>
			<enum name="VK_FORMAT_ASTC_8x8_UNORM_BLOCK" number="171"/>
			<enum name="VK_FORMAT_ASTC_8x8_SRGB_BLOCK" number="172"/>
			<enum name="VK_FORMAT_ASTC_10x5_UNORM_BLOCK" number="173"/>
			<enum name="VK_FORMAT_ASTC_10x5_SRGB_BLOCK" number="174"/>
			<enum name="VK_FORMAT_ASTC_10x6_UNORM_BLOCK" number="175"/>
			<enum name="VK_FORMAT_ASTC_10x6_SRGB_BLOCK" number="176"/>
			<enum name="VK_FORMAT_ASTC_10x8_UNORM_BLOCK" number="177"/>
			<enum name="VK_FORMAT_ASTC_10x8_SRGB_BLOCK" number="178"/>
			<enum name="VK_FORMAT_ASTC_10x10_UNORM_BLOCK" number="179"/>
			<enum name="VK_FORMAT_ASTC_10x10_SRGB_BLOCK" number="180"/>
			<enum name="VK_FORMAT_ASTC_12x10_UNORM_BLOCK" number="181"/>
			<enum name="VK_FORMAT_ASTC_12x10_SRGB_BLOCK" number="182"/>
			<enum name="VK_FORMAT_ASTC_12x12_UNORM_BLOCK" number="183"/>
			<enum name="VK_FORMAT_ASTC_12x12_SRGB_BLOCK" number="184"/>
		</enumeration>
		<enumeration name="VkStructureType" notation="Structure type enumerant">
			<enum name="VK_STRUCTURE_TYPE_APPLICATION_INFO" number="0"/>
			<enum name="VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO" number="1"/>
			<enum name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO" number="2"/>
			<enum name="VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO" number="3"/>
			<enum name="VK_STRUCTURE_TYPE_SUBMIT_INFO" number="4"/>
			<enum name="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO" number="5"/>
			<enum name="VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE" number="6"/>
			<enum name="VK_STRUCTURE_TYPE_BIND_SPARSE_INFO" number="7"/>
			<enum name="VK_STRUCTURE_TYPE_FENCE_CREATE_INFO" number="8"/>
			<enum name="VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO" number="9"/>
			<enum name="VK_STRUCTURE_TYPE_EVENT_CREATE_INFO" number="10"/>
			<enum name="VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO" number="11"/>
			<enum name="VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO" number="12"/>
			<enum name="VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO" number="13"/>
			<enum name="VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO" number="14"/>
			<enum name="VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO" number="15"/>
			<enum name="VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO" number="16"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO" number="17"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO" number="18"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO" number="19"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO" number="20"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO" number="21"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO" number="22"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO" number="23"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO" number="24"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO" number="25"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO" number="26"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO" number="27"/>
			<enum name="VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO" number="28"/>
			<enum name="VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO" number="29"/>
			<enum name="VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO" number="30"/>
			<enum name="VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO" number="31"/>
			<enum name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO" number="32"/>
			<enum name="VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO" number="33"/>
			<enum name="VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO" number="34"/>
			<enum name="VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET" number="35"/>
			<enum name="VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET" number="36"/>
			<enum name="VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO" number="37"/>
			<enum name="VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO" number="38"/>
			<enum name="VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO" number="39"/>
			<enum name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO" number="40"/>
			<enum name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO" number="41"/>
			<enum name="VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO" number="42"/>
			<enum name="VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO" number="43"/>
			<enum name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER" number="44"/>
			<enum name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER" number="45"/>
			<enum name="VK_STRUCTURE_TYPE_MEMORY_BARRIER" number="46"/>
			<enum name="VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO" notation="Reserved for internal use by the loader, layers, and ICDs" number="47"/>
			<enum name="VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO" notation="Reserved for internal use by the loader, layers, and ICDs" number="48"/>
		</enumeration>
		<enumeration name="VkSubpassContents">
			<enum name="VK_SUBPASS_CONTENTS_INLINE" number="0"/>
			<enum name="VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS" number="1"/>
		</enumeration>
		<enumeration name="VkResult" notation="API result codes">
			<notation>Return codes (positive values)</notation>
			<enum name="VK_SUCCESS" notation="Command completed successfully" number="0"/>
			<enum name="VK_NOT_READY" notation="A fence or query has not yet completed" number="1"/>
			<enum name="VK_TIMEOUT" notation="A wait operation has not completed in the specified time" number="2"/>
			<enum name="VK_EVENT_SET" notation="An event is signaled" number="3"/>
			<enum name="VK_EVENT_RESET" notation="An event is unsignaled" number="4"/>
			<enum name="VK_INCOMPLETE" notation="A return array was too small for the result" number="5"/>
			<notation>Error codes (negative values)</notation>
			<enum name="VK_ERROR_OUT_OF_HOST_MEMORY" notation="A host memory allocation has failed" number="-1"/>
			<enum name="VK_ERROR_OUT_OF_DEVICE_MEMORY" notation="A device memory allocation has failed" number="-2"/>
			<enum name="VK_ERROR_INITIALIZATION_FAILED" notation="Initialization of a object has failed" number="-3"/>
			<enum name="VK_ERROR_DEVICE_LOST" notation="The logical device has been lost. See &lt;&lt;devsandqueues-lost-device&gt;&gt;" number="-4"/>
			<enum name="VK_ERROR_MEMORY_MAP_FAILED" notation="Mapping of a memory object has failed" number="-5"/>
			<enum name="VK_ERROR_LAYER_NOT_PRESENT" notation="Layer specified does not exist" number="-6"/>
			<enum name="VK_ERROR_EXTENSION_NOT_PRESENT" notation="Extension specified does not exist" number="-7"/>
			<enum name="VK_ERROR_FEATURE_NOT_PRESENT" notation="Requested feature is not available on this device" number="-8"/>
			<enum name="VK_ERROR_INCOMPATIBLE_DRIVER" notation="Unable to find a Vulkan driver" number="-9"/>
			<enum name="VK_ERROR_TOO_MANY_OBJECTS" notation="Too many objects of the type have already been created" number="-10"/>
			<enum name="VK_ERROR_FORMAT_NOT_SUPPORTED" notation="Requested format is not supported on this device" number="-11"/>
			<enum name="VK_ERROR_FRAGMENTED_POOL" notation="A requested pool allocation has failed due to fragmentation of the pool&apos;s memory" number="-12"/>
			<unused-range range-start="-12"/>
		</enumeration>
		<enumeration name="VkDynamicState">
			<enum name="VK_DYNAMIC_STATE_VIEWPORT" number="0"/>
			<enum name="VK_DYNAMIC_STATE_SCISSOR" number="1"/>
			<enum name="VK_DYNAMIC_STATE_LINE_WIDTH" number="2"/>
			<enum name="VK_DYNAMIC_STATE_DEPTH_BIAS" number="3"/>
			<enum name="VK_DYNAMIC_STATE_BLEND_CONSTANTS" number="4"/>
			<enum name="VK_DYNAMIC_STATE_DEPTH_BOUNDS" number="5"/>
			<enum name="VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK" number="6"/>
			<enum name="VK_DYNAMIC_STATE_STENCIL_WRITE_MASK" number="7"/>
			<enum name="VK_DYNAMIC_STATE_STENCIL_REFERENCE" number="8"/>
		</enumeration>
		<enumeration name="VkDescriptorUpdateTemplateTypeKHR">
			<enum name="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR" notation="Create descriptor update template for descriptor set updates" number="0"/>
			<enum name="VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR" notation="Create descriptor update template for pushed descriptor updates" number="1"/>
		</enumeration>
		<enumeration name="VkObjectType" notation="Enums to track objects of various types">
			<enum name="VK_OBJECT_TYPE_UNKNOWN" number="0"/>
			<enum name="VK_OBJECT_TYPE_INSTANCE" notation="VkInstance" number="1"/>
			<enum name="VK_OBJECT_TYPE_PHYSICAL_DEVICE" notation="VkPhysicalDevice" number="2"/>
			<enum name="VK_OBJECT_TYPE_DEVICE" notation="VkDevice" number="3"/>
			<enum name="VK_OBJECT_TYPE_QUEUE" notation="VkQueue" number="4"/>
			<enum name="VK_OBJECT_TYPE_SEMAPHORE" notation="VkSemaphore" number="5"/>
			<enum name="VK_OBJECT_TYPE_COMMAND_BUFFER" notation="VkCommandBuffer" number="6"/>
			<enum name="VK_OBJECT_TYPE_FENCE" notation="VkFence" number="7"/>
			<enum name="VK_OBJECT_TYPE_DEVICE_MEMORY" notation="VkDeviceMemory" number="8"/>
			<enum name="VK_OBJECT_TYPE_BUFFER" notation="VkBuffer" number="9"/>
			<enum name="VK_OBJECT_TYPE_IMAGE" notation="VkImage" number="10"/>
			<enum name="VK_OBJECT_TYPE_EVENT" notation="VkEvent" number="11"/>
			<enum name="VK_OBJECT_TYPE_QUERY_POOL" notation="VkQueryPool" number="12"/>
			<enum name="VK_OBJECT_TYPE_BUFFER_VIEW" notation="VkBufferView" number="13"/>
			<enum name="VK_OBJECT_TYPE_IMAGE_VIEW" notation="VkImageView" number="14"/>
			<enum name="VK_OBJECT_TYPE_SHADER_MODULE" notation="VkShaderModule" number="15"/>
			<enum name="VK_OBJECT_TYPE_PIPELINE_CACHE" notation="VkPipelineCache" number="16"/>
			<enum name="VK_OBJECT_TYPE_PIPELINE_LAYOUT" notation="VkPipelineLayout" number="17"/>
			<enum name="VK_OBJECT_TYPE_RENDER_PASS" notation="VkRenderPass" number="18"/>
			<enum name="VK_OBJECT_TYPE_PIPELINE" notation="VkPipeline" number="19"/>
			<enum name="VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT" notation="VkDescriptorSetLayout" number="20"/>
			<enum name="VK_OBJECT_TYPE_SAMPLER" notation="VkSampler" number="21"/>
			<enum name="VK_OBJECT_TYPE_DESCRIPTOR_POOL" notation="VkDescriptorPool" number="22"/>
			<enum name="VK_OBJECT_TYPE_DESCRIPTOR_SET" notation="VkDescriptorSet" number="23"/>
			<enum name="VK_OBJECT_TYPE_FRAMEBUFFER" notation="VkFramebuffer" number="24"/>
			<enum name="VK_OBJECT_TYPE_COMMAND_POOL" notation="VkCommandPool" number="25"/>
		</enumeration>
		<notation>Flags</notation>
		<enumeration name="VkQueueFlagBits" purpose="bitmask">
			<enum name="VK_QUEUE_GRAPHICS_BIT" notation="Queue supports graphics operations" bitpos="0"/>
			<enum name="VK_QUEUE_COMPUTE_BIT" notation="Queue supports compute operations" bitpos="1"/>
			<enum name="VK_QUEUE_TRANSFER_BIT" notation="Queue supports transfer operations" bitpos="2"/>
			<enum name="VK_QUEUE_SPARSE_BINDING_BIT" notation="Queue supports sparse resource memory management operations" bitpos="3"/>
		</enumeration>
		<enumeration name="VkMemoryPropertyFlagBits" purpose="bitmask">
			<enum name="VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT" notation="If otherwise stated, then allocate memory on device" bitpos="0"/>
			<enum name="VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT" notation="Memory is mappable by host" bitpos="1"/>
			<enum name="VK_MEMORY_PROPERTY_HOST_COHERENT_BIT" notation="Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache" bitpos="2"/>
			<enum name="VK_MEMORY_PROPERTY_HOST_CACHED_BIT" notation="Memory will be cached by the host" bitpos="3"/>
			<enum name="VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT" notation="Memory may be allocated by the driver when it is required" bitpos="4"/>
		</enumeration>
		<enumeration name="VkMemoryHeapFlagBits" purpose="bitmask">
			<enum name="VK_MEMORY_HEAP_DEVICE_LOCAL_BIT" notation="If set, heap represents device memory" bitpos="0"/>
		</enumeration>
		<enumeration name="VkAccessFlagBits" purpose="bitmask">
			<enum name="VK_ACCESS_INDIRECT_COMMAND_READ_BIT" notation="Controls coherency of indirect command reads" bitpos="0"/>
			<enum name="VK_ACCESS_INDEX_READ_BIT" notation="Controls coherency of index reads" bitpos="1"/>
			<enum name="VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT" notation="Controls coherency of vertex attribute reads" bitpos="2"/>
			<enum name="VK_ACCESS_UNIFORM_READ_BIT" notation="Controls coherency of uniform buffer reads" bitpos="3"/>
			<enum name="VK_ACCESS_INPUT_ATTACHMENT_READ_BIT" notation="Controls coherency of input attachment reads" bitpos="4"/>
			<enum name="VK_ACCESS_SHADER_READ_BIT" notation="Controls coherency of shader reads" bitpos="5"/>
			<enum name="VK_ACCESS_SHADER_WRITE_BIT" notation="Controls coherency of shader writes" bitpos="6"/>
			<enum name="VK_ACCESS_COLOR_ATTACHMENT_READ_BIT" notation="Controls coherency of color attachment reads" bitpos="7"/>
			<enum name="VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT" notation="Controls coherency of color attachment writes" bitpos="8"/>
			<enum name="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT" notation="Controls coherency of depth/stencil attachment reads" bitpos="9"/>
			<enum name="VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT" notation="Controls coherency of depth/stencil attachment writes" bitpos="10"/>
			<enum name="VK_ACCESS_TRANSFER_READ_BIT" notation="Controls coherency of transfer reads" bitpos="11"/>
			<enum name="VK_ACCESS_TRANSFER_WRITE_BIT" notation="Controls coherency of transfer writes" bitpos="12"/>
			<enum name="VK_ACCESS_HOST_READ_BIT" notation="Controls coherency of host reads" bitpos="13"/>
			<enum name="VK_ACCESS_HOST_WRITE_BIT" notation="Controls coherency of host writes" bitpos="14"/>
			<enum name="VK_ACCESS_MEMORY_READ_BIT" notation="Controls coherency of memory reads" bitpos="15"/>
			<enum name="VK_ACCESS_MEMORY_WRITE_BIT" notation="Controls coherency of memory writes" bitpos="16"/>
		</enumeration>
		<enumeration name="VkBufferUsageFlagBits" purpose="bitmask">
			<enum name="VK_BUFFER_USAGE_TRANSFER_SRC_BIT" notation="Can be used as a source of transfer operations" bitpos="0"/>
			<enum name="VK_BUFFER_USAGE_TRANSFER_DST_BIT" notation="Can be used as a destination of transfer operations" bitpos="1"/>
			<enum name="VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT" notation="Can be used as TBO" bitpos="2"/>
			<enum name="VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT" notation="Can be used as IBO" bitpos="3"/>
			<enum name="VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT" notation="Can be used as UBO" bitpos="4"/>
			<enum name="VK_BUFFER_USAGE_STORAGE_BUFFER_BIT" notation="Can be used as SSBO" bitpos="5"/>
			<enum name="VK_BUFFER_USAGE_INDEX_BUFFER_BIT" notation="Can be used as source of fixed-function index fetch (index buffer)" bitpos="6"/>
			<enum name="VK_BUFFER_USAGE_VERTEX_BUFFER_BIT" notation="Can be used as source of fixed-function vertex fetch (VBO)" bitpos="7"/>
			<enum name="VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT" notation="Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)" bitpos="8"/>
		</enumeration>
		<enumeration name="VkBufferCreateFlagBits" purpose="bitmask">
			<enum name="VK_BUFFER_CREATE_SPARSE_BINDING_BIT" notation="Buffer should support sparse backing" bitpos="0"/>
			<enum name="VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT" notation="Buffer should support sparse backing with partial residency" bitpos="1"/>
			<enum name="VK_BUFFER_CREATE_SPARSE_ALIASED_BIT" notation="Buffer should support constent data access to physical memory ranges mapped into multiple locations of sparse buffers" bitpos="2"/>
		</enumeration>
		<enumeration name="VkShaderStageFlagBits" purpose="bitmask">
			<enum name="VK_SHADER_STAGE_VERTEX_BIT" bitpos="0"/>
			<enum name="VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT" bitpos="1"/>
			<enum name="VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT" bitpos="2"/>
			<enum name="VK_SHADER_STAGE_GEOMETRY_BIT" bitpos="3"/>
			<enum name="VK_SHADER_STAGE_FRAGMENT_BIT" bitpos="4"/>
			<enum name="VK_SHADER_STAGE_COMPUTE_BIT" bitpos="5"/>
			<enum name="VK_SHADER_STAGE_ALL_GRAPHICS" c-expression="0x0000001F"/>
			<enum name="VK_SHADER_STAGE_ALL" c-expression="0x7FFFFFFF"/>
		</enumeration>
		<enumeration name="VkImageUsageFlagBits" purpose="bitmask">
			<enum name="VK_IMAGE_USAGE_TRANSFER_SRC_BIT" notation="Can be used as a source of transfer operations" bitpos="0"/>
			<enum name="VK_IMAGE_USAGE_TRANSFER_DST_BIT" notation="Can be used as a destination of transfer operations" bitpos="1"/>
			<enum name="VK_IMAGE_USAGE_SAMPLED_BIT" notation="Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)" bitpos="2"/>
			<enum name="VK_IMAGE_USAGE_STORAGE_BIT" notation="Can be used as storage image (STORAGE_IMAGE descriptor type)" bitpos="3"/>
			<enum name="VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT" notation="Can be used as framebuffer color attachment" bitpos="4"/>
			<enum name="VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT" notation="Can be used as framebuffer depth/stencil attachment" bitpos="5"/>
			<enum name="VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT" notation="Image data not needed outside of rendering" bitpos="6"/>
			<enum name="VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT" notation="Can be used as framebuffer input attachment" bitpos="7"/>
		</enumeration>
		<enumeration name="VkImageCreateFlagBits" purpose="bitmask">
			<enum name="VK_IMAGE_CREATE_SPARSE_BINDING_BIT" notation="Image should support sparse backing" bitpos="0"/>
			<enum name="VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT" notation="Image should support sparse backing with partial residency" bitpos="1"/>
			<enum name="VK_IMAGE_CREATE_SPARSE_ALIASED_BIT" notation="Image should support constent data access to physical memory ranges mapped into multiple locations of sparse images" bitpos="2"/>
			<enum name="VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT" notation="Allows image views to have different format than the base image" bitpos="3"/>
			<enum name="VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT" notation="Allows creating image views with cube type from the created image" bitpos="4"/>
		</enumeration>
		<enumeration name="VkPipelineCreateFlagBits" purpose="bitmask">
			<enum name="VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT" bitpos="0"/>
			<enum name="VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT" bitpos="1"/>
			<enum name="VK_PIPELINE_CREATE_DERIVATIVE_BIT" bitpos="2"/>
		</enumeration>
		<enumeration name="VkColorComponentFlagBits" purpose="bitmask">
			<enum name="VK_COLOR_COMPONENT_R_BIT" bitpos="0"/>
			<enum name="VK_COLOR_COMPONENT_G_BIT" bitpos="1"/>
			<enum name="VK_COLOR_COMPONENT_B_BIT" bitpos="2"/>
			<enum name="VK_COLOR_COMPONENT_A_BIT" bitpos="3"/>
		</enumeration>
		<enumeration name="VkFenceCreateFlagBits" purpose="bitmask">
			<enum name="VK_FENCE_CREATE_SIGNALED_BIT" bitpos="0"/>
		</enumeration>
		<enumeration name="VkFormatFeatureFlagBits" purpose="bitmask">
			<enum name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT" notation="Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)" bitpos="0"/>
			<enum name="VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT" notation="Format can be used for storage images (STORAGE_IMAGE descriptor type)" bitpos="1"/>
			<enum name="VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT" notation="Format supports atomic operations in case it is used for storage images" bitpos="2"/>
			<enum name="VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT" notation="Format can be used for uniform texel buffers (TBOs)" bitpos="3"/>
			<enum name="VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT" notation="Format can be used for storage texel buffers (IBOs)" bitpos="4"/>
			<enum name="VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT" notation="Format supports atomic operations in case it is used for storage texel buffers" bitpos="5"/>
			<enum name="VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT" notation="Format can be used for vertex buffers (VBOs)" bitpos="6"/>
			<enum name="VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT" notation="Format can be used for color attachment images" bitpos="7"/>
			<enum name="VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT" notation="Format supports blending in case it is used for color attachment images" bitpos="8"/>
			<enum name="VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT" notation="Format can be used for depth/stencil attachment images" bitpos="9"/>
			<enum name="VK_FORMAT_FEATURE_BLIT_SRC_BIT" notation="Format can be used as the source image of blits with vkCmdBlitImage" bitpos="10"/>
			<enum name="VK_FORMAT_FEATURE_BLIT_DST_BIT" notation="Format can be used as the destination image of blits with vkCmdBlitImage" bitpos="11"/>
			<enum name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT" notation="Format can be filtered with VK_FILTER_LINEAR when being sampled" bitpos="12"/>
		</enumeration>
		<enumeration name="VkQueryControlFlagBits" purpose="bitmask">
			<enum name="VK_QUERY_CONTROL_PRECISE_BIT" notation="Require precise results to be collected by the query" bitpos="0"/>
		</enumeration>
		<enumeration name="VkQueryResultFlagBits" purpose="bitmask">
			<enum name="VK_QUERY_RESULT_64_BIT" notation="Results of the queries are written to the destination buffer as 64-bit values" bitpos="0"/>
			<enum name="VK_QUERY_RESULT_WAIT_BIT" notation="Results of the queries are waited on before proceeding with the result copy" bitpos="1"/>
			<enum name="VK_QUERY_RESULT_WITH_AVAILABILITY_BIT" notation="Besides the results of the query, the availability of the results is also written" bitpos="2"/>
			<enum name="VK_QUERY_RESULT_PARTIAL_BIT" notation="Copy the partial results of the query even if the final results are not available" bitpos="3"/>
		</enumeration>
		<enumeration name="VkCommandBufferUsageFlagBits" purpose="bitmask">
			<enum name="VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT" bitpos="0"/>
			<enum name="VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT" bitpos="1"/>
			<enum name="VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT" notation="Command buffer may be submitted/executed more than once simultaneously" bitpos="2"/>
		</enumeration>
		<enumeration name="VkQueryPipelineStatisticFlagBits" purpose="bitmask">
			<enum name="VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT" notation="Optional" bitpos="0"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT" notation="Optional" bitpos="1"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT" notation="Optional" bitpos="2"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT" notation="Optional" bitpos="3"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT" notation="Optional" bitpos="4"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT" notation="Optional" bitpos="5"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT" notation="Optional" bitpos="6"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT" notation="Optional" bitpos="7"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT" notation="Optional" bitpos="8"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT" notation="Optional" bitpos="9"/>
			<enum name="VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT" notation="Optional" bitpos="10"/>
		</enumeration>
		<enumeration name="VkImageAspectFlagBits" purpose="bitmask">
			<enum name="VK_IMAGE_ASPECT_COLOR_BIT" bitpos="0"/>
			<enum name="VK_IMAGE_ASPECT_DEPTH_BIT" bitpos="1"/>
			<enum name="VK_IMAGE_ASPECT_STENCIL_BIT" bitpos="2"/>
			<enum name="VK_IMAGE_ASPECT_METADATA_BIT" bitpos="3"/>
		</enumeration>
		<enumeration name="VkSparseImageFormatFlagBits" purpose="bitmask">
			<enum name="VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT" notation="Image uses a single mip tail region for all array layers" bitpos="0"/>
			<enum name="VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT" notation="Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels." bitpos="1"/>
			<enum name="VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT" notation="Image uses a non-standard sparse image block dimensions" bitpos="2"/>
		</enumeration>
		<enumeration name="VkSparseMemoryBindFlagBits" purpose="bitmask">
			<enum name="VK_SPARSE_MEMORY_BIND_METADATA_BIT" notation="Operation binds resource metadata to memory" bitpos="0"/>
		</enumeration>
		<enumeration name="VkPipelineStageFlagBits" purpose="bitmask">
			<enum name="VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT" notation="Before subsequent commands are processed" bitpos="0"/>
			<enum name="VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT" notation="Draw/DispatchIndirect command fetch" bitpos="1"/>
			<enum name="VK_PIPELINE_STAGE_VERTEX_INPUT_BIT" notation="Vertex/index fetch" bitpos="2"/>
			<enum name="VK_PIPELINE_STAGE_VERTEX_SHADER_BIT" notation="Vertex shading" bitpos="3"/>
			<enum name="VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT" notation="Tessellation control shading" bitpos="4"/>
			<enum name="VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT" notation="Tessellation evaluation shading" bitpos="5"/>
			<enum name="VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT" notation="Geometry shading" bitpos="6"/>
			<enum name="VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT" notation="Fragment shading" bitpos="7"/>
			<enum name="VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT" notation="Early fragment (depth and stencil) tests" bitpos="8"/>
			<enum name="VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT" notation="Late fragment (depth and stencil) tests" bitpos="9"/>
			<enum name="VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT" notation="Color attachment writes" bitpos="10"/>
			<enum name="VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT" notation="Compute shading" bitpos="11"/>
			<enum name="VK_PIPELINE_STAGE_TRANSFER_BIT" notation="Transfer/copy operations" bitpos="12"/>
			<enum name="VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT" notation="After previous commands have completed" bitpos="13"/>
			<enum name="VK_PIPELINE_STAGE_HOST_BIT" notation="Indicates host (CPU) is a source/sink of the dependency" bitpos="14"/>
			<enum name="VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT" notation="All stages of the graphics pipeline" bitpos="15"/>
			<enum name="VK_PIPELINE_STAGE_ALL_COMMANDS_BIT" notation="All stages supported on the queue" bitpos="16"/>
		</enumeration>
		<enumeration name="VkCommandPoolCreateFlagBits" purpose="bitmask">
			<enum name="VK_COMMAND_POOL_CREATE_TRANSIENT_BIT" notation="Command buffers have a short lifetime" bitpos="0"/>
			<enum name="VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT" notation="Command buffers may release their memory individually" bitpos="1"/>
		</enumeration>
		<enumeration name="VkCommandPoolResetFlagBits" purpose="bitmask">
			<enum name="VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT" notation="Release resources owned by the pool" bitpos="0"/>
		</enumeration>
		<enumeration name="VkCommandBufferResetFlagBits" purpose="bitmask">
			<enum name="VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT" notation="Release resources owned by the buffer" bitpos="0"/>
		</enumeration>
		<enumeration name="VkSampleCountFlagBits" purpose="bitmask">
			<enum name="VK_SAMPLE_COUNT_1_BIT" notation="Sample count 1 supported" bitpos="0"/>
			<enum name="VK_SAMPLE_COUNT_2_BIT" notation="Sample count 2 supported" bitpos="1"/>
			<enum name="VK_SAMPLE_COUNT_4_BIT" notation="Sample count 4 supported" bitpos="2"/>
			<enum name="VK_SAMPLE_COUNT_8_BIT" notation="Sample count 8 supported" bitpos="3"/>
			<enum name="VK_SAMPLE_COUNT_16_BIT" notation="Sample count 16 supported" bitpos="4"/>
			<enum name="VK_SAMPLE_COUNT_32_BIT" notation="Sample count 32 supported" bitpos="5"/>
			<enum name="VK_SAMPLE_COUNT_64_BIT" notation="Sample count 64 supported" bitpos="6"/>
		</enumeration>
		<enumeration name="VkAttachmentDescriptionFlagBits" purpose="bitmask">
			<enum name="VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT" notation="The attachment may alias physical memory of another attachment in the same render pass" bitpos="0"/>
		</enumeration>
		<enumeration name="VkStencilFaceFlagBits" purpose="bitmask">
			<enum name="VK_STENCIL_FACE_FRONT_BIT" notation="Front face" bitpos="0"/>
			<enum name="VK_STENCIL_FACE_BACK_BIT" notation="Back face" bitpos="1"/>
			<enum name="VK_STENCIL_FRONT_AND_BACK" notation="Front and back faces" hex="00000003"/>
		</enumeration>
		<enumeration name="VkDescriptorPoolCreateFlagBits" purpose="bitmask">
			<enum name="VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT" notation="Descriptor sets may be freed individually" bitpos="0"/>
		</enumeration>
		<enumeration name="VkDependencyFlagBits" purpose="bitmask">
			<enum name="VK_DEPENDENCY_BY_REGION_BIT" notation="Dependency is per pixel region " bitpos="0"/>
		</enumeration>
		<notation>WSI Extensions</notation>
		<enumeration name="VkPresentModeKHR">
			<enum name="VK_PRESENT_MODE_IMMEDIATE_KHR" number="0"/>
			<enum name="VK_PRESENT_MODE_MAILBOX_KHR" number="1"/>
			<enum name="VK_PRESENT_MODE_FIFO_KHR" number="2"/>
			<enum name="VK_PRESENT_MODE_FIFO_RELAXED_KHR" number="3"/>
		</enumeration>
		<enumeration name="VkColorSpaceKHR">
			<enum name="VK_COLOR_SPACE_SRGB_NONLINEAR_KHR" number="0"/>
		</enumeration>
		<enumeration name="VkDisplayPlaneAlphaFlagBitsKHR" purpose="bitmask">
			<enum name="VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR" bitpos="0"/>
			<enum name="VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR" bitpos="1"/>
			<enum name="VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR" bitpos="2"/>
			<enum name="VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR" bitpos="3"/>
		</enumeration>
		<enumeration name="VkCompositeAlphaFlagBitsKHR" purpose="bitmask">
			<enum name="VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR" bitpos="0"/>
			<enum name="VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR" bitpos="1"/>
			<enum name="VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR" bitpos="2"/>
			<enum name="VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR" bitpos="3"/>
		</enumeration>
		<enumeration name="VkSurfaceTransformFlagBitsKHR" purpose="bitmask">
			<enum name="VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR" bitpos="0"/>
			<enum name="VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR" bitpos="1"/>
			<enum name="VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR" bitpos="2"/>
			<enum name="VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR" bitpos="3"/>
			<enum name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR" bitpos="4"/>
			<enum name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR" bitpos="5"/>
			<enum name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR" bitpos="6"/>
			<enum name="VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR" bitpos="7"/>
			<enum name="VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR" bitpos="8"/>
		</enumeration>
		<enumeration name="VkDebugReportFlagBitsEXT" purpose="bitmask">
			<enum name="VK_DEBUG_REPORT_INFORMATION_BIT_EXT" bitpos="0"/>
			<enum name="VK_DEBUG_REPORT_WARNING_BIT_EXT" bitpos="1"/>
			<enum name="VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT" bitpos="2"/>
			<enum name="VK_DEBUG_REPORT_ERROR_BIT_EXT" bitpos="3"/>
			<enum name="VK_DEBUG_REPORT_DEBUG_BIT_EXT" bitpos="4"/>
		</enumeration>
		<enumeration name="VkDebugReportObjectTypeEXT">
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT" number="0"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT" number="1"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT" number="2"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT" number="3"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT" number="4"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT" number="5"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT" number="6"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT" number="7"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT" number="8"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT" number="9"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT" number="10"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT" number="11"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT" number="12"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT" number="13"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT" number="14"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT" number="15"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT" number="16"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT" number="17"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT" number="18"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT" number="19"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT" number="20"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT" number="21"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT" number="22"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT" number="23"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT" number="24"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT" number="25"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT" number="26"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT" number="27"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT" number="28"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT" number="29"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT" number="30"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT" number="31"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT" number="32"/>
			<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT" number="33"/>
		</enumeration>
		<enumeration name="VkRasterizationOrderAMD">
			<enum name="VK_RASTERIZATION_ORDER_STRICT_AMD" number="0"/>
			<enum name="VK_RASTERIZATION_ORDER_RELAXED_AMD" number="1"/>
		</enumeration>
		<enumeration name="VkExternalMemoryHandleTypeFlagBitsNV" purpose="bitmask">
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV" bitpos="0"/>
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV" bitpos="1"/>
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV" bitpos="2"/>
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV" bitpos="3"/>
		</enumeration>
		<enumeration name="VkExternalMemoryFeatureFlagBitsNV" purpose="bitmask">
			<enum name="VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV" bitpos="0"/>
			<enum name="VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV" bitpos="1"/>
			<enum name="VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV" bitpos="2"/>
		</enumeration>
		<enumeration name="VkValidationCheckEXT">
			<enum name="VK_VALIDATION_CHECK_ALL_EXT" number="0"/>
			<enum name="VK_VALIDATION_CHECK_SHADERS_EXT" number="1"/>
			<notation>Placeholder for validation enums to be defined for VK_EXT_Validation_flags extension</notation>
		</enumeration>
		<enumeration name="VkIndirectCommandsLayoutUsageFlagBitsNVX" purpose="bitmask">
			<enum name="VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX" bitpos="0"/>
			<enum name="VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX" bitpos="1"/>
			<enum name="VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX" bitpos="2"/>
			<enum name="VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX" bitpos="3"/>
		</enumeration>
		<enumeration name="VkObjectEntryUsageFlagBitsNVX" purpose="bitmask">
			<enum name="VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX" bitpos="0"/>
			<enum name="VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX" bitpos="1"/>
		</enumeration>
		<enumeration name="VkIndirectCommandsTokenTypeNVX">
			<enum name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX" number="0"/>
			<enum name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX" number="1"/>
			<enum name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX" number="2"/>
			<enum name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX" number="3"/>
			<enum name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX" number="4"/>
			<enum name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX" number="5"/>
			<enum name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX" number="6"/>
			<enum name="VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX" number="7"/>
		</enumeration>
		<enumeration name="VkObjectEntryTypeNVX">
			<enum name="VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX" number="0"/>
			<enum name="VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX" number="1"/>
			<enum name="VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX" number="2"/>
			<enum name="VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX" number="3"/>
			<enum name="VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX" number="4"/>
		</enumeration>
		<enumeration name="VkDescriptorSetLayoutCreateFlagBits" purpose="bitmask"/>
		<enumeration name="VkExternalMemoryHandleTypeFlagBitsKHR" purpose="bitmask">
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR" bitpos="0"/>
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR" bitpos="1"/>
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR" bitpos="2"/>
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR" bitpos="3"/>
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR" bitpos="4"/>
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR" bitpos="5"/>
			<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR" bitpos="6"/>
		</enumeration>
		<enumeration name="VkExternalMemoryFeatureFlagBitsKHR" purpose="bitmask">
			<enum name="VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR" bitpos="0"/>
			<enum name="VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR" bitpos="1"/>
			<enum name="VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR" bitpos="2"/>
		</enumeration>
		<enumeration name="VkExternalSemaphoreHandleTypeFlagBitsKHR" purpose="bitmask">
			<enum name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR" bitpos="0"/>
			<enum name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR" bitpos="1"/>
			<enum name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR" bitpos="2"/>
			<enum name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR" bitpos="3"/>
			<enum name="VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR" bitpos="4"/>
		</enumeration>
		<enumeration name="VkExternalSemaphoreFeatureFlagBitsKHR" purpose="bitmask">
			<enum name="VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR" bitpos="0"/>
			<enum name="VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR" bitpos="1"/>
		</enumeration>
		<enumeration name="VkSemaphoreImportFlagBitsKHR" purpose="bitmask">
			<enum name="VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR" bitpos="0"/>
		</enumeration>
		<enumeration name="VkExternalFenceHandleTypeFlagBitsKHR" purpose="bitmask">
			<enum name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR" bitpos="0"/>
			<enum name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR" bitpos="1"/>
			<enum name="VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR" bitpos="2"/>
			<enum name="VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR" bitpos="3"/>
		</enumeration>
		<enumeration name="VkExternalFenceFeatureFlagBitsKHR" purpose="bitmask">
			<enum name="VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR" bitpos="0"/>
			<enum name="VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR" bitpos="1"/>
		</enumeration>
		<enumeration name="VkFenceImportFlagBitsKHR" purpose="bitmask">
			<enum name="VK_FENCE_IMPORT_TEMPORARY_BIT_KHR" bitpos="0"/>
		</enumeration>
		<enumeration name="VkSurfaceCounterFlagBitsEXT" purpose="bitmask">
			<enum name="VK_SURFACE_COUNTER_VBLANK_EXT" bitpos="0"/>
		</enumeration>
		<enumeration name="VkDisplayPowerStateEXT">
			<enum name="VK_DISPLAY_POWER_STATE_OFF_EXT" number="0"/>
			<enum name="VK_DISPLAY_POWER_STATE_SUSPEND_EXT" number="1"/>
			<enum name="VK_DISPLAY_POWER_STATE_ON_EXT" number="2"/>
		</enumeration>
		<enumeration name="VkDeviceEventTypeEXT">
			<enum name="VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT" number="0"/>
		</enumeration>
		<enumeration name="VkDisplayEventTypeEXT">
			<enum name="VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT" number="0"/>
		</enumeration>
		<enumeration name="VkPeerMemoryFeatureFlagBitsKHX" purpose="bitmask">
			<enum name="VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHX" notation="Can read with vkCmdCopy commands" bitpos="0"/>
			<enum name="VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHX" notation="Can write with vkCmdCopy commands" bitpos="1"/>
			<enum name="VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHX" notation="Can read with any access type/command" bitpos="2"/>
			<enum name="VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHX" notation="Can write with and access type/command" bitpos="3"/>
		</enumeration>
		<enumeration name="VkMemoryAllocateFlagBitsKHX" purpose="bitmask">
			<enum name="VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHX" notation="Force allocation on specific devices" bitpos="0"/>
		</enumeration>
		<enumeration name="VkDeviceGroupPresentModeFlagBitsKHX" purpose="bitmask">
			<enum name="VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHX" notation="Present from local memory" bitpos="0"/>
			<enum name="VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHX" notation="Present from remote memory" bitpos="1"/>
			<enum name="VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHX" notation="Present sum of local and/or remote memory" bitpos="2"/>
			<enum name="VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHX" notation="Each physical device presents from local memory" bitpos="3"/>
		</enumeration>
		<enumeration name="VkSwapchainCreateFlagBitsKHR" purpose="bitmask"/>
		<enumeration name="VkViewportCoordinateSwizzleNV">
			<enum name="VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV" number="0"/>
			<enum name="VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV" number="1"/>
			<enum name="VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV" number="2"/>
			<enum name="VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV" number="3"/>
			<enum name="VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV" number="4"/>
			<enum name="VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV" number="5"/>
			<enum name="VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV" number="6"/>
			<enum name="VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV" number="7"/>
		</enumeration>
		<enumeration name="VkDiscardRectangleModeEXT">
			<enum name="VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT" number="0"/>
			<enum name="VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT" number="1"/>
		</enumeration>
		<enumeration name="VkSubpassDescriptionFlagBits" purpose="bitmask"/>
		<enumeration name="VkPointClippingBehaviorKHR">
			<enum name="VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR" number="0"/>
			<enum name="VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR" number="1"/>
		</enumeration>
		<enumeration name="VkSamplerReductionModeEXT">
			<enum name="VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT" number="0"/>
			<enum name="VK_SAMPLER_REDUCTION_MODE_MIN_EXT" number="1"/>
			<enum name="VK_SAMPLER_REDUCTION_MODE_MAX_EXT" number="2"/>
		</enumeration>
		<enumeration name="VkTessellationDomainOriginKHR">
			<enum name="VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR" number="0"/>
			<enum name="VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR" number="1"/>
		</enumeration>
		<enumeration name="VkSamplerYcbcrModelConversionKHR">
			<enum name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR" number="0"/>
			<enum name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR" notation="just range expansion" number="1"/>
			<enum name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR" notation="aka HD YUV" number="2"/>
			<enum name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR" notation="aka SD YUV" number="3"/>
			<enum name="VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR" notation="aka UHD YUV" number="4"/>
		</enumeration>
		<enumeration name="VkSamplerYcbcrRangeKHR">
			<enum name="VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR" notation="Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)" number="0"/>
			<enum name="VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR" notation="Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240" number="1"/>
		</enumeration>
		<enumeration name="VkChromaLocationKHR">
			<enum name="VK_CHROMA_LOCATION_COSITED_EVEN_KHR" number="0"/>
			<enum name="VK_CHROMA_LOCATION_MIDPOINT_KHR" number="1"/>
		</enumeration>
		<enumeration name="VkBlendOverlapEXT">
			<enum name="VK_BLEND_OVERLAP_UNCORRELATED_EXT" number="0"/>
			<enum name="VK_BLEND_OVERLAP_DISJOINT_EXT" number="1"/>
			<enum name="VK_BLEND_OVERLAP_CONJOINT_EXT" number="2"/>
		</enumeration>
		<enumeration name="VkCoverageModulationModeNV">
			<enum name="VK_COVERAGE_MODULATION_MODE_NONE_NV" number="0"/>
			<enum name="VK_COVERAGE_MODULATION_MODE_RGB_NV" number="1"/>
			<enum name="VK_COVERAGE_MODULATION_MODE_ALPHA_NV" number="2"/>
			<enum name="VK_COVERAGE_MODULATION_MODE_RGBA_NV" number="3"/>
		</enumeration>
		<enumeration name="VkValidationCacheHeaderVersionEXT">
			<enum name="VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT" number="1"/>
		</enumeration>
		<enumeration name="VkShaderInfoTypeAMD">
			<enum name="VK_SHADER_INFO_TYPE_STATISTICS_AMD" number="0"/>
			<enum name="VK_SHADER_INFO_TYPE_BINARY_AMD" number="1"/>
			<enum name="VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD" number="2"/>
		</enumeration>
		<enumeration name="VkQueueGlobalPriorityEXT">
			<enum name="VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT" number="128"/>
			<enum name="VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT" number="256"/>
			<enum name="VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT" number="512"/>
			<enum name="VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT" number="1024"/>
		</enumeration>
		<enumeration name="VkConservativeRasterizationModeEXT">
			<enum name="VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT" number="0"/>
			<enum name="VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT" number="1"/>
			<enum name="VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT" number="2"/>
		</enumeration>
	</enums>
	<commands notation="Vulkan command definitions">
		<command name="vkCreateInstance">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_LAYER_NOT_PRESENT,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INCOMPATIBLE_DRIVER" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param name="pCreateInfo" const="true" basetype="VkInstanceCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pInstance" basetype="VkInstance" reference="pointer"/>
		</command>
		<command name="vkDestroyInstance">
			<return-type basetype="void"/>
			<param sync="true" name="instance" basetype="VkInstance" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkEnumeratePhysicalDevices">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pPhysicalDeviceCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPhysicalDeviceCount" name="pPhysicalDevices" basetype="VkPhysicalDevice" reference="pointer"/>
		</command>
		<command name="vkGetDeviceProcAddr">
			<return-type basetype="PFN_vkVoidFunction"/>
			<param basetype="VkDevice" name="device"/>
			<param array="dynamic" null-terminate="true" reference="pointer" name="pName" basetype="char" const="true"/>
		</command>
		<command name="vkGetInstanceProcAddr">
			<return-type basetype="PFN_vkVoidFunction"/>
			<param name="instance" basetype="VkInstance" optional="true"/>
			<param array="dynamic" null-terminate="true" reference="pointer" name="pName" basetype="char" const="true"/>
		</command>
		<command name="vkGetPhysicalDeviceProperties">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pProperties" basetype="VkPhysicalDeviceProperties" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceQueueFamilyProperties">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pQueueFamilyPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pQueueFamilyPropertyCount" name="pQueueFamilyProperties" basetype="VkQueueFamilyProperties" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceMemoryProperties">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pMemoryProperties" basetype="VkPhysicalDeviceMemoryProperties" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceFeatures">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pFeatures" basetype="VkPhysicalDeviceFeatures" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceFormatProperties">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkFormat" name="format"/>
			<param name="pFormatProperties" basetype="VkFormatProperties" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceImageFormatProperties">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkFormat" name="format"/>
			<param basetype="VkImageType" name="type"/>
			<param basetype="VkImageTiling" name="tiling"/>
			<param basetype="VkImageUsageFlags" name="usage"/>
			<param name="flags" basetype="VkImageCreateFlags" optional="true"/>
			<param name="pImageFormatProperties" basetype="VkImageFormatProperties" reference="pointer"/>
		</command>
		<command name="vkCreateDevice">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_DEVICE_LOST" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pCreateInfo" const="true" basetype="VkDeviceCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pDevice" basetype="VkDevice" reference="pointer"/>
		</command>
		<command name="vkDestroyDevice">
			<return-type basetype="void"/>
			<param sync="true" name="device" basetype="VkDevice" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkEnumerateInstanceLayerProperties">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param name="pPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPropertyCount" name="pProperties" basetype="VkLayerProperties" reference="pointer"/>
		</command>
		<command name="vkEnumerateInstanceExtensionProperties">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_LAYER_NOT_PRESENT" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param array="dynamic" null-terminate="true" optional="true" name="pLayerName" reference="pointer" const="true" basetype="char"/>
			<param name="pPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPropertyCount" name="pProperties" basetype="VkExtensionProperties" reference="pointer"/>
		</command>
		<command name="vkEnumerateDeviceLayerProperties">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPropertyCount" name="pProperties" basetype="VkLayerProperties" reference="pointer"/>
		</command>
		<command name="vkEnumerateDeviceExtensionProperties">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_LAYER_NOT_PRESENT" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param array="dynamic" null-terminate="true" optional="true" name="pLayerName" reference="pointer" const="true" basetype="char"/>
			<param name="pPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPropertyCount" name="pProperties" basetype="VkExtensionProperties" reference="pointer"/>
		</command>
		<command name="vkGetDeviceQueue">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="queueFamilyIndex"/>
			<param basetype="uint32_t" name="queueIndex"/>
			<param name="pQueue" basetype="VkQueue" reference="pointer"/>
		</command>
		<command name="vkQueueSubmit">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param sync="true" basetype="VkQueue" name="queue"/>
			<param name="submitCount" basetype="uint32_t" optional="true"/>
			<param sync="pSubmits[].pWaitSemaphores[],pSubmits[].pSignalSemaphores[]" name="pSubmits" reference="pointer" size="submitCount" basetype="VkSubmitInfo" const="true" array="dynamic"/>
			<param sync="true" name="fence" basetype="VkFence" optional="true"/>
		</command>
		<command name="vkQueueWaitIdle">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkQueue" name="queue"/>
		</command>
		<command name="vkDeviceWaitIdle">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<external-sync>
				<sync>all sname:VkQueue objects created from pname:device</sync>
			</external-sync>
		</command>
		<command name="vkAllocateMemory">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pAllocateInfo" const="true" basetype="VkMemoryAllocateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pMemory" basetype="VkDeviceMemory" reference="pointer"/>
		</command>
		<command name="vkFreeMemory">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="memory" basetype="VkDeviceMemory" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkMapMemory">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkDeviceMemory" name="memory"/>
			<param basetype="VkDeviceSize" name="offset"/>
			<param basetype="VkDeviceSize" name="size"/>
			<param name="flags" basetype="VkMemoryMapFlags" optional="true"/>
			<param name="ppData" reference="pointer-pointer" basetype="void" optional="false,true"/>
		</command>
		<command name="vkUnmapMemory">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkDeviceMemory" name="memory"/>
		</command>
		<command name="vkFlushMappedMemoryRanges">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="memoryRangeCount"/>
			<param array="dynamic" reference="pointer" size="memoryRangeCount" name="pMemoryRanges" const="true" basetype="VkMappedMemoryRange"/>
		</command>
		<command name="vkInvalidateMappedMemoryRanges">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="memoryRangeCount"/>
			<param array="dynamic" reference="pointer" size="memoryRangeCount" name="pMemoryRanges" const="true" basetype="VkMappedMemoryRange"/>
		</command>
		<command name="vkGetDeviceMemoryCommitment">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkDeviceMemory" name="memory"/>
			<param name="pCommittedMemoryInBytes" basetype="VkDeviceSize" reference="pointer"/>
		</command>
		<command name="vkGetBufferMemoryRequirements">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkBuffer" name="buffer"/>
			<param name="pMemoryRequirements" basetype="VkMemoryRequirements" reference="pointer"/>
		</command>
		<command name="vkBindBufferMemory">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkBuffer" name="buffer"/>
			<param basetype="VkDeviceMemory" name="memory"/>
			<param basetype="VkDeviceSize" name="memoryOffset"/>
		</command>
		<command name="vkGetImageMemoryRequirements">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkImage" name="image"/>
			<param name="pMemoryRequirements" basetype="VkMemoryRequirements" reference="pointer"/>
		</command>
		<command name="vkBindImageMemory">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkImage" name="image"/>
			<param basetype="VkDeviceMemory" name="memory"/>
			<param basetype="VkDeviceSize" name="memoryOffset"/>
		</command>
		<command name="vkGetImageSparseMemoryRequirements">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkImage" name="image"/>
			<param name="pSparseMemoryRequirementCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pSparseMemoryRequirementCount" name="pSparseMemoryRequirements" basetype="VkSparseImageMemoryRequirements" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceSparseImageFormatProperties">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkFormat" name="format"/>
			<param basetype="VkImageType" name="type"/>
			<param basetype="VkSampleCountFlagBits" name="samples"/>
			<param basetype="VkImageUsageFlags" name="usage"/>
			<param basetype="VkImageTiling" name="tiling"/>
			<param name="pPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPropertyCount" name="pProperties" basetype="VkSparseImageFormatProperties" reference="pointer"/>
		</command>
		<command queues="sparse_binding" name="vkQueueBindSparse">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param sync="true" basetype="VkQueue" name="queue"/>
			<param name="bindInfoCount" basetype="uint32_t" optional="true"/>
			<param sync="pBindInfo[].pWaitSemaphores[],pBindInfo[].pSignalSemaphores[],pBindInfo[].pBufferBinds[].buffer,pBindInfo[].pImageOpaqueBinds[].image,pBindInfo[].pImageBinds[].image" name="pBindInfo" reference="pointer" size="bindInfoCount" basetype="VkBindSparseInfo" const="true" array="dynamic"/>
			<param sync="true" name="fence" basetype="VkFence" optional="true"/>
		</command>
		<command name="vkCreateFence">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkFenceCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pFence" basetype="VkFence" reference="pointer"/>
		</command>
		<command name="vkDestroyFence">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="fence" basetype="VkFence" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkResetFences">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="fenceCount"/>
			<param sync="true" name="pFences" reference="pointer" size="fenceCount" basetype="VkFence" const="true" array="dynamic"/>
		</command>
		<command name="vkGetFenceStatus">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST" successcodes="VK_SUCCESS,VK_NOT_READY" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkFence" name="fence"/>
		</command>
		<command name="vkWaitForFences">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST" successcodes="VK_SUCCESS,VK_TIMEOUT" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="fenceCount"/>
			<param array="dynamic" reference="pointer" size="fenceCount" name="pFences" const="true" basetype="VkFence"/>
			<param basetype="VkBool32" name="waitAll"/>
			<param basetype="uint64_t" name="timeout"/>
		</command>
		<command name="vkCreateSemaphore">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkSemaphoreCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSemaphore" basetype="VkSemaphore" reference="pointer"/>
		</command>
		<command name="vkDestroySemaphore">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="semaphore" basetype="VkSemaphore" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateEvent">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkEventCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pEvent" basetype="VkEvent" reference="pointer"/>
		</command>
		<command name="vkDestroyEvent">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="event" basetype="VkEvent" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkGetEventStatus">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST" successcodes="VK_EVENT_SET,VK_EVENT_RESET" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkEvent" name="event"/>
		</command>
		<command name="vkSetEvent">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkEvent" name="event"/>
		</command>
		<command name="vkResetEvent">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkEvent" name="event"/>
		</command>
		<command name="vkCreateQueryPool">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkQueryPoolCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pQueryPool" basetype="VkQueryPool" reference="pointer"/>
		</command>
		<command name="vkDestroyQueryPool">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="queryPool" basetype="VkQueryPool" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkGetQueryPoolResults">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST" successcodes="VK_SUCCESS,VK_NOT_READY" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkQueryPool" name="queryPool"/>
			<param basetype="uint32_t" name="firstQuery"/>
			<param basetype="uint32_t" name="queryCount"/>
			<param basetype="size_t" name="dataSize"/>
			<param array="dynamic" reference="pointer" size="dataSize" basetype="void" name="pData"/>
			<param basetype="VkDeviceSize" name="stride"/>
			<param name="flags" basetype="VkQueryResultFlags" optional="true"/>
		</command>
		<command name="vkCreateBuffer">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkBufferCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pBuffer" basetype="VkBuffer" reference="pointer"/>
		</command>
		<command name="vkDestroyBuffer">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="buffer" basetype="VkBuffer" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateBufferView">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkBufferViewCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pView" basetype="VkBufferView" reference="pointer"/>
		</command>
		<command name="vkDestroyBufferView">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="bufferView" basetype="VkBufferView" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateImage">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkImageCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pImage" basetype="VkImage" reference="pointer"/>
		</command>
		<command name="vkDestroyImage">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="image" basetype="VkImage" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkGetImageSubresourceLayout">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkImage" name="image"/>
			<param name="pSubresource" const="true" basetype="VkImageSubresource" reference="pointer"/>
			<param name="pLayout" basetype="VkSubresourceLayout" reference="pointer"/>
		</command>
		<command name="vkCreateImageView">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkImageViewCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pView" basetype="VkImageView" reference="pointer"/>
		</command>
		<command name="vkDestroyImageView">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="imageView" basetype="VkImageView" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateShaderModule">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkShaderModuleCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pShaderModule" basetype="VkShaderModule" reference="pointer"/>
		</command>
		<command name="vkDestroyShaderModule">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="shaderModule" basetype="VkShaderModule" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreatePipelineCache">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkPipelineCacheCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pPipelineCache" basetype="VkPipelineCache" reference="pointer"/>
		</command>
		<command name="vkDestroyPipelineCache">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="pipelineCache" basetype="VkPipelineCache" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkGetPipelineCacheData">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkPipelineCache" name="pipelineCache"/>
			<param name="pDataSize" reference="pointer" basetype="size_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pDataSize" name="pData" basetype="void" reference="pointer"/>
		</command>
		<command name="vkMergePipelineCaches">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkPipelineCache" name="dstCache"/>
			<param basetype="uint32_t" name="srcCacheCount"/>
			<param array="dynamic" reference="pointer" size="srcCacheCount" name="pSrcCaches" const="true" basetype="VkPipelineCache"/>
		</command>
		<command name="vkCreateGraphicsPipelines">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pipelineCache" basetype="VkPipelineCache" optional="true"/>
			<param basetype="uint32_t" name="createInfoCount"/>
			<param array="dynamic" reference="pointer" size="createInfoCount" name="pCreateInfos" const="true" basetype="VkGraphicsPipelineCreateInfo"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param array="dynamic" reference="pointer" size="createInfoCount" basetype="VkPipeline" name="pPipelines"/>
		</command>
		<command name="vkCreateComputePipelines">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pipelineCache" basetype="VkPipelineCache" optional="true"/>
			<param basetype="uint32_t" name="createInfoCount"/>
			<param array="dynamic" reference="pointer" size="createInfoCount" name="pCreateInfos" const="true" basetype="VkComputePipelineCreateInfo"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param array="dynamic" reference="pointer" size="createInfoCount" basetype="VkPipeline" name="pPipelines"/>
		</command>
		<command name="vkDestroyPipeline">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="pipeline" basetype="VkPipeline" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreatePipelineLayout">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkPipelineLayoutCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pPipelineLayout" basetype="VkPipelineLayout" reference="pointer"/>
		</command>
		<command name="vkDestroyPipelineLayout">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="pipelineLayout" basetype="VkPipelineLayout" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateSampler">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_TOO_MANY_OBJECTS" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkSamplerCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSampler" basetype="VkSampler" reference="pointer"/>
		</command>
		<command name="vkDestroySampler">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="sampler" basetype="VkSampler" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateDescriptorSetLayout">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkDescriptorSetLayoutCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSetLayout" basetype="VkDescriptorSetLayout" reference="pointer"/>
		</command>
		<command name="vkDestroyDescriptorSetLayout">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="descriptorSetLayout" basetype="VkDescriptorSetLayout" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateDescriptorPool">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkDescriptorPoolCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pDescriptorPool" basetype="VkDescriptorPool" reference="pointer"/>
		</command>
		<command name="vkDestroyDescriptorPool">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="descriptorPool" basetype="VkDescriptorPool" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkResetDescriptorPool">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkDescriptorPool" name="descriptorPool"/>
			<param name="flags" basetype="VkDescriptorPoolResetFlags" optional="true"/>
			<external-sync>
				<sync>any sname:VkDescriptorSet objects allocated from pname:descriptorPool</sync>
			</external-sync>
		</command>
		<command name="vkAllocateDescriptorSets">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FRAGMENTED_POOL,VK_ERROR_OUT_OF_POOL_MEMORY_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="pAllocateInfo::descriptorPool" reference="pointer" name="pAllocateInfo" const="true" basetype="VkDescriptorSetAllocateInfo"/>
			<param array="dynamic" reference="pointer" size="pAllocateInfo::descriptorSetCount" basetype="VkDescriptorSet" name="pDescriptorSets"/>
		</command>
		<command name="vkFreeDescriptorSets">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkDescriptorPool" name="descriptorPool"/>
			<param basetype="uint32_t" name="descriptorSetCount"/>
			<param sync="true" name="pDescriptorSets" basetype="VkDescriptorSet" reference="pointer" size="descriptorSetCount" auto-validity="false" const="true" array="dynamic"/>
		</command>
		<command name="vkUpdateDescriptorSets">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param name="descriptorWriteCount" basetype="uint32_t" optional="true"/>
			<param sync="pDescriptorWrites[].dstSet" name="pDescriptorWrites" reference="pointer" size="descriptorWriteCount" basetype="VkWriteDescriptorSet" const="true" array="dynamic"/>
			<param name="descriptorCopyCount" basetype="uint32_t" optional="true"/>
			<param sync="pDescriptorCopies[].dstSet" name="pDescriptorCopies" reference="pointer" size="descriptorCopyCount" basetype="VkCopyDescriptorSet" const="true" array="dynamic"/>
		</command>
		<command name="vkCreateFramebuffer">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkFramebufferCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pFramebuffer" basetype="VkFramebuffer" reference="pointer"/>
		</command>
		<command name="vkDestroyFramebuffer">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="framebuffer" basetype="VkFramebuffer" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateRenderPass">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkRenderPassCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pRenderPass" basetype="VkRenderPass" reference="pointer"/>
		</command>
		<command name="vkDestroyRenderPass">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="renderPass" basetype="VkRenderPass" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkGetRenderAreaGranularity">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkRenderPass" name="renderPass"/>
			<param name="pGranularity" basetype="VkExtent2D" reference="pointer"/>
		</command>
		<command name="vkCreateCommandPool">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkCommandPoolCreateInfo" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pCommandPool" basetype="VkCommandPool" reference="pointer"/>
		</command>
		<command name="vkDestroyCommandPool">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="commandPool" basetype="VkCommandPool" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkResetCommandPool">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkCommandPool" name="commandPool"/>
			<param name="flags" basetype="VkCommandPoolResetFlags" optional="true"/>
		</command>
		<command name="vkAllocateCommandBuffers">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="pAllocateInfo::commandPool" reference="pointer" name="pAllocateInfo" const="true" basetype="VkCommandBufferAllocateInfo"/>
			<param array="dynamic" reference="pointer" size="pAllocateInfo::commandBufferCount" basetype="VkCommandBuffer" name="pCommandBuffers"/>
		</command>
		<command name="vkFreeCommandBuffers">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkCommandPool" name="commandPool"/>
			<param basetype="uint32_t" name="commandBufferCount"/>
			<param sync="true" name="pCommandBuffers" basetype="VkCommandBuffer" reference="pointer" size="commandBufferCount" auto-validity="false" const="true" array="dynamic"/>
		</command>
		<command name="vkBeginCommandBuffer">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param name="pBeginInfo" const="true" basetype="VkCommandBufferBeginInfo" reference="pointer"/>
			<external-sync>
				<sync>the sname:VkCommandPool that pname:commandBuffer was allocated from</sync>
			</external-sync>
		</command>
		<command name="vkEndCommandBuffer">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<external-sync>
				<sync>the sname:VkCommandPool that pname:commandBuffer was allocated from</sync>
			</external-sync>
		</command>
		<command name="vkResetCommandBuffer">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param name="flags" basetype="VkCommandBufferResetFlags" optional="true"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdBindPipeline">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkPipelineBindPoint" name="pipelineBindPoint"/>
			<param basetype="VkPipeline" name="pipeline"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetViewport">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="firstViewport"/>
			<param basetype="uint32_t" name="viewportCount"/>
			<param array="dynamic" reference="pointer" size="viewportCount" name="pViewports" const="true" basetype="VkViewport"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetScissor">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="firstScissor"/>
			<param basetype="uint32_t" name="scissorCount"/>
			<param array="dynamic" reference="pointer" size="scissorCount" name="pScissors" const="true" basetype="VkRect2D"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetLineWidth">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="float" name="lineWidth"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetDepthBias">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="float" name="depthBiasConstantFactor"/>
			<param basetype="float" name="depthBiasClamp"/>
			<param basetype="float" name="depthBiasSlopeFactor"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetBlendConstants">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param array="static" size="4" name="blendConstants" const="true" basetype="float"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetDepthBounds">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="float" name="minDepthBounds"/>
			<param basetype="float" name="maxDepthBounds"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetStencilCompareMask">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkStencilFaceFlags" name="faceMask"/>
			<param basetype="uint32_t" name="compareMask"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetStencilWriteMask">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkStencilFaceFlags" name="faceMask"/>
			<param basetype="uint32_t" name="writeMask"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetStencilReference">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkStencilFaceFlags" name="faceMask"/>
			<param basetype="uint32_t" name="reference"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdBindDescriptorSets">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkPipelineBindPoint" name="pipelineBindPoint"/>
			<param basetype="VkPipelineLayout" name="layout"/>
			<param basetype="uint32_t" name="firstSet"/>
			<param basetype="uint32_t" name="descriptorSetCount"/>
			<param array="dynamic" reference="pointer" size="descriptorSetCount" name="pDescriptorSets" const="true" basetype="VkDescriptorSet"/>
			<param name="dynamicOffsetCount" basetype="uint32_t" optional="true"/>
			<param array="dynamic" reference="pointer" size="dynamicOffsetCount" name="pDynamicOffsets" const="true" basetype="uint32_t"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdBindIndexBuffer">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="buffer"/>
			<param basetype="VkDeviceSize" name="offset"/>
			<param basetype="VkIndexType" name="indexType"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdBindVertexBuffers">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="firstBinding"/>
			<param basetype="uint32_t" name="bindingCount"/>
			<param array="dynamic" reference="pointer" size="bindingCount" name="pBuffers" const="true" basetype="VkBuffer"/>
			<param array="dynamic" reference="pointer" size="bindingCount" name="pOffsets" const="true" basetype="VkDeviceSize"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="graphics" queues="graphics" renderpass="inside" name="vkCmdDraw">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="vertexCount"/>
			<param basetype="uint32_t" name="instanceCount"/>
			<param basetype="uint32_t" name="firstVertex"/>
			<param basetype="uint32_t" name="firstInstance"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="graphics" queues="graphics" renderpass="inside" name="vkCmdDrawIndexed">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="indexCount"/>
			<param basetype="uint32_t" name="instanceCount"/>
			<param basetype="uint32_t" name="firstIndex"/>
			<param basetype="int32_t" name="vertexOffset"/>
			<param basetype="uint32_t" name="firstInstance"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="graphics" queues="graphics" renderpass="inside" name="vkCmdDrawIndirect">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="buffer"/>
			<param basetype="VkDeviceSize" name="offset"/>
			<param basetype="uint32_t" name="drawCount"/>
			<param basetype="uint32_t" name="stride"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="graphics" queues="graphics" renderpass="inside" name="vkCmdDrawIndexedIndirect">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="buffer"/>
			<param basetype="VkDeviceSize" name="offset"/>
			<param basetype="uint32_t" name="drawCount"/>
			<param basetype="uint32_t" name="stride"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="compute" queues="compute" renderpass="outside" name="vkCmdDispatch">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="groupCountX"/>
			<param basetype="uint32_t" name="groupCountY"/>
			<param basetype="uint32_t" name="groupCountZ"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="compute" queues="compute" renderpass="outside" name="vkCmdDispatchIndirect">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="buffer"/>
			<param basetype="VkDeviceSize" name="offset"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="transfer,graphics,compute" renderpass="outside" name="vkCmdCopyBuffer">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="srcBuffer"/>
			<param basetype="VkBuffer" name="dstBuffer"/>
			<param basetype="uint32_t" name="regionCount"/>
			<param array="dynamic" reference="pointer" size="regionCount" name="pRegions" const="true" basetype="VkBufferCopy"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="transfer,graphics,compute" renderpass="outside" name="vkCmdCopyImage">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkImage" name="srcImage"/>
			<param basetype="VkImageLayout" name="srcImageLayout"/>
			<param basetype="VkImage" name="dstImage"/>
			<param basetype="VkImageLayout" name="dstImageLayout"/>
			<param basetype="uint32_t" name="regionCount"/>
			<param array="dynamic" reference="pointer" size="regionCount" name="pRegions" const="true" basetype="VkImageCopy"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="graphics" renderpass="outside" name="vkCmdBlitImage">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkImage" name="srcImage"/>
			<param basetype="VkImageLayout" name="srcImageLayout"/>
			<param basetype="VkImage" name="dstImage"/>
			<param basetype="VkImageLayout" name="dstImageLayout"/>
			<param basetype="uint32_t" name="regionCount"/>
			<param array="dynamic" reference="pointer" size="regionCount" name="pRegions" const="true" basetype="VkImageBlit"/>
			<param basetype="VkFilter" name="filter"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="transfer,graphics,compute" renderpass="outside" name="vkCmdCopyBufferToImage">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="srcBuffer"/>
			<param basetype="VkImage" name="dstImage"/>
			<param basetype="VkImageLayout" name="dstImageLayout"/>
			<param basetype="uint32_t" name="regionCount"/>
			<param array="dynamic" reference="pointer" size="regionCount" name="pRegions" const="true" basetype="VkBufferImageCopy"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="transfer,graphics,compute" renderpass="outside" name="vkCmdCopyImageToBuffer">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkImage" name="srcImage"/>
			<param basetype="VkImageLayout" name="srcImageLayout"/>
			<param basetype="VkBuffer" name="dstBuffer"/>
			<param basetype="uint32_t" name="regionCount"/>
			<param array="dynamic" reference="pointer" size="regionCount" name="pRegions" const="true" basetype="VkBufferImageCopy"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="transfer,graphics,compute" renderpass="outside" name="vkCmdUpdateBuffer">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="dstBuffer"/>
			<param basetype="VkDeviceSize" name="dstOffset"/>
			<param basetype="VkDeviceSize" name="dataSize"/>
			<param array="dynamic" reference="pointer" size="dataSize" name="pData" const="true" basetype="void"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" notation="transfer support is only available when VK_KHR_maintenance1 is enabled, as documented in valid usage language in the specification" queues="transfer,graphics,compute" renderpass="outside" name="vkCmdFillBuffer">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="dstBuffer"/>
			<param basetype="VkDeviceSize" name="dstOffset"/>
			<param basetype="VkDeviceSize" name="size"/>
			<param basetype="uint32_t" name="data"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="graphics,compute" renderpass="outside" name="vkCmdClearColorImage">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkImage" name="image"/>
			<param basetype="VkImageLayout" name="imageLayout"/>
			<param name="pColor" const="true" basetype="VkClearColorValue" reference="pointer"/>
			<param basetype="uint32_t" name="rangeCount"/>
			<param array="dynamic" reference="pointer" size="rangeCount" name="pRanges" const="true" basetype="VkImageSubresourceRange"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="graphics" renderpass="outside" name="vkCmdClearDepthStencilImage">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkImage" name="image"/>
			<param basetype="VkImageLayout" name="imageLayout"/>
			<param name="pDepthStencil" const="true" basetype="VkClearDepthStencilValue" reference="pointer"/>
			<param basetype="uint32_t" name="rangeCount"/>
			<param array="dynamic" reference="pointer" size="rangeCount" name="pRanges" const="true" basetype="VkImageSubresourceRange"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="graphics" queues="graphics" renderpass="inside" name="vkCmdClearAttachments">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="attachmentCount"/>
			<param array="dynamic" reference="pointer" size="attachmentCount" name="pAttachments" const="true" basetype="VkClearAttachment"/>
			<param basetype="uint32_t" name="rectCount"/>
			<param array="dynamic" reference="pointer" size="rectCount" name="pRects" const="true" basetype="VkClearRect"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="graphics" renderpass="outside" name="vkCmdResolveImage">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkImage" name="srcImage"/>
			<param basetype="VkImageLayout" name="srcImageLayout"/>
			<param basetype="VkImage" name="dstImage"/>
			<param basetype="VkImageLayout" name="dstImageLayout"/>
			<param basetype="uint32_t" name="regionCount"/>
			<param array="dynamic" reference="pointer" size="regionCount" name="pRegions" const="true" basetype="VkImageResolve"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="outside" name="vkCmdSetEvent">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkEvent" name="event"/>
			<param basetype="VkPipelineStageFlags" name="stageMask"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="outside" name="vkCmdResetEvent">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkEvent" name="event"/>
			<param basetype="VkPipelineStageFlags" name="stageMask"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdWaitEvents">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="eventCount"/>
			<param array="dynamic" reference="pointer" size="eventCount" name="pEvents" const="true" basetype="VkEvent"/>
			<param basetype="VkPipelineStageFlags" name="srcStageMask"/>
			<param basetype="VkPipelineStageFlags" name="dstStageMask"/>
			<param name="memoryBarrierCount" basetype="uint32_t" optional="true"/>
			<param array="dynamic" reference="pointer" size="memoryBarrierCount" name="pMemoryBarriers" const="true" basetype="VkMemoryBarrier"/>
			<param name="bufferMemoryBarrierCount" basetype="uint32_t" optional="true"/>
			<param array="dynamic" reference="pointer" size="bufferMemoryBarrierCount" name="pBufferMemoryBarriers" const="true" basetype="VkBufferMemoryBarrier"/>
			<param name="imageMemoryBarrierCount" basetype="uint32_t" optional="true"/>
			<param array="dynamic" reference="pointer" size="imageMemoryBarrierCount" name="pImageMemoryBarriers" const="true" basetype="VkImageMemoryBarrier"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="transfer,graphics,compute" renderpass="both" name="vkCmdPipelineBarrier">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkPipelineStageFlags" name="srcStageMask"/>
			<param basetype="VkPipelineStageFlags" name="dstStageMask"/>
			<param name="dependencyFlags" basetype="VkDependencyFlags" optional="true"/>
			<param name="memoryBarrierCount" basetype="uint32_t" optional="true"/>
			<param array="dynamic" reference="pointer" size="memoryBarrierCount" name="pMemoryBarriers" const="true" basetype="VkMemoryBarrier"/>
			<param name="bufferMemoryBarrierCount" basetype="uint32_t" optional="true"/>
			<param array="dynamic" reference="pointer" size="bufferMemoryBarrierCount" name="pBufferMemoryBarriers" const="true" basetype="VkBufferMemoryBarrier"/>
			<param name="imageMemoryBarrierCount" basetype="uint32_t" optional="true"/>
			<param array="dynamic" reference="pointer" size="imageMemoryBarrierCount" name="pImageMemoryBarriers" const="true" basetype="VkImageMemoryBarrier"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdBeginQuery">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkQueryPool" name="queryPool"/>
			<param basetype="uint32_t" name="query"/>
			<param name="flags" basetype="VkQueryControlFlags" optional="true"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdEndQuery">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkQueryPool" name="queryPool"/>
			<param basetype="uint32_t" name="query"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="outside" name="vkCmdResetQueryPool">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkQueryPool" name="queryPool"/>
			<param basetype="uint32_t" name="firstQuery"/>
			<param basetype="uint32_t" name="queryCount"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="transfer,graphics,compute" renderpass="both" name="vkCmdWriteTimestamp">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkPipelineStageFlagBits" name="pipelineStage"/>
			<param basetype="VkQueryPool" name="queryPool"/>
			<param basetype="uint32_t" name="query"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="graphics,compute" renderpass="outside" name="vkCmdCopyQueryPoolResults">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkQueryPool" name="queryPool"/>
			<param basetype="uint32_t" name="firstQuery"/>
			<param basetype="uint32_t" name="queryCount"/>
			<param basetype="VkBuffer" name="dstBuffer"/>
			<param basetype="VkDeviceSize" name="dstOffset"/>
			<param basetype="VkDeviceSize" name="stride"/>
			<param name="flags" basetype="VkQueryResultFlags" optional="true"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdPushConstants">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkPipelineLayout" name="layout"/>
			<param basetype="VkShaderStageFlags" name="stageFlags"/>
			<param basetype="uint32_t" name="offset"/>
			<param basetype="uint32_t" name="size"/>
			<param array="dynamic" reference="pointer" size="size" name="pValues" const="true" basetype="void"/>
		</command>
		<command cmdbufferlevel="primary" pipeline="graphics" queues="graphics" renderpass="outside" name="vkCmdBeginRenderPass">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param name="pRenderPassBegin" const="true" basetype="VkRenderPassBeginInfo" reference="pointer"/>
			<param basetype="VkSubpassContents" name="contents"/>
		</command>
		<command cmdbufferlevel="primary" pipeline="graphics" queues="graphics" renderpass="inside" name="vkCmdNextSubpass">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkSubpassContents" name="contents"/>
		</command>
		<command cmdbufferlevel="primary" pipeline="graphics" queues="graphics" renderpass="inside" name="vkCmdEndRenderPass">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
		</command>
		<command cmdbufferlevel="primary" queues="transfer,graphics,compute" renderpass="both" name="vkCmdExecuteCommands">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="commandBufferCount"/>
			<param array="dynamic" reference="pointer" size="commandBufferCount" name="pCommandBuffers" const="true" basetype="VkCommandBuffer"/>
		</command>
		<command name="vkCreateAndroidSurfaceKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkAndroidSurfaceCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceDisplayPropertiesKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPropertyCount" name="pProperties" basetype="VkDisplayPropertiesKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceDisplayPlanePropertiesKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPropertyCount" name="pProperties" basetype="VkDisplayPlanePropertiesKHR" reference="pointer"/>
		</command>
		<command name="vkGetDisplayPlaneSupportedDisplaysKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="uint32_t" name="planeIndex"/>
			<param name="pDisplayCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pDisplayCount" name="pDisplays" basetype="VkDisplayKHR" reference="pointer"/>
		</command>
		<command name="vkGetDisplayModePropertiesKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkDisplayKHR" name="display"/>
			<param name="pPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPropertyCount" name="pProperties" basetype="VkDisplayModePropertiesKHR" reference="pointer"/>
		</command>
		<command name="vkCreateDisplayModeKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param sync="true" basetype="VkDisplayKHR" name="display"/>
			<param name="pCreateInfo" const="true" basetype="VkDisplayModeCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pMode" basetype="VkDisplayModeKHR" reference="pointer"/>
		</command>
		<command name="vkGetDisplayPlaneCapabilitiesKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param sync="true" basetype="VkDisplayModeKHR" name="mode"/>
			<param basetype="uint32_t" name="planeIndex"/>
			<param name="pCapabilities" basetype="VkDisplayPlaneCapabilitiesKHR" reference="pointer"/>
		</command>
		<command name="vkCreateDisplayPlaneSurfaceKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkDisplaySurfaceCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command name="vkCreateSharedSwapchainsKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="swapchainCount"/>
			<param sync="pCreateInfos[].surface,pCreateInfos[].oldSwapchain" name="pCreateInfos" reference="pointer" size="swapchainCount" basetype="VkSwapchainCreateInfoKHR" const="true" array="dynamic"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param array="dynamic" reference="pointer" size="swapchainCount" basetype="VkSwapchainKHR" name="pSwapchains"/>
		</command>
		<command name="vkCreateMirSurfaceKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkMirSurfaceCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceMirPresentationSupportKHR">
			<return-type basetype="VkBool32"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="uint32_t" name="queueFamilyIndex"/>
			<param name="connection" basetype="MirConnection" reference="pointer"/>
		</command>
		<command name="vkDestroySurfaceKHR">
			<return-type basetype="void"/>
			<param basetype="VkInstance" name="instance"/>
			<param sync="true" name="surface" basetype="VkSurfaceKHR" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkGetPhysicalDeviceSurfaceSupportKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="uint32_t" name="queueFamilyIndex"/>
			<param basetype="VkSurfaceKHR" name="surface"/>
			<param name="pSupported" basetype="VkBool32" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceSurfaceCapabilitiesKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkSurfaceKHR" name="surface"/>
			<param name="pSurfaceCapabilities" basetype="VkSurfaceCapabilitiesKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceSurfaceFormatsKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkSurfaceKHR" name="surface"/>
			<param name="pSurfaceFormatCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pSurfaceFormatCount" name="pSurfaceFormats" basetype="VkSurfaceFormatKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceSurfacePresentModesKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkSurfaceKHR" name="surface"/>
			<param name="pPresentModeCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPresentModeCount" name="pPresentModes" basetype="VkPresentModeKHR" reference="pointer"/>
		</command>
		<command name="vkCreateSwapchainKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="pCreateInfo.surface,pCreateInfo.oldSwapchain" reference="pointer" name="pCreateInfo" const="true" basetype="VkSwapchainCreateInfoKHR"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSwapchain" basetype="VkSwapchainKHR" reference="pointer"/>
		</command>
		<command name="vkDestroySwapchainKHR">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="swapchain" basetype="VkSwapchainKHR" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkGetSwapchainImagesKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkSwapchainKHR" name="swapchain"/>
			<param name="pSwapchainImageCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pSwapchainImageCount" name="pSwapchainImages" basetype="VkImage" reference="pointer"/>
		</command>
		<command name="vkAcquireNextImageKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkSwapchainKHR" name="swapchain"/>
			<param basetype="uint64_t" name="timeout"/>
			<param sync="true" name="semaphore" basetype="VkSemaphore" optional="true"/>
			<param sync="true" name="fence" basetype="VkFence" optional="true"/>
			<param name="pImageIndex" basetype="uint32_t" reference="pointer"/>
		</command>
		<command name="vkQueuePresentKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS,VK_SUBOPTIMAL_KHR" basetype="VkResult"/>
			<param sync="true" basetype="VkQueue" name="queue"/>
			<param sync="pPresentInfo.pWaitSemaphores[],pPresentInfo.pSwapchains[]" reference="pointer" name="pPresentInfo" const="true" basetype="VkPresentInfoKHR"/>
		</command>
		<command name="vkCreateViSurfaceNN">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkViSurfaceCreateInfoNN" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command name="vkCreateWaylandSurfaceKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkWaylandSurfaceCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceWaylandPresentationSupportKHR">
			<return-type basetype="VkBool32"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="uint32_t" name="queueFamilyIndex"/>
			<param name="display" struct="true" basetype="wl_display" reference="pointer"/>
		</command>
		<command name="vkCreateWin32SurfaceKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkWin32SurfaceCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceWin32PresentationSupportKHR">
			<return-type basetype="VkBool32"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="uint32_t" name="queueFamilyIndex"/>
		</command>
		<command name="vkCreateXlibSurfaceKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkXlibSurfaceCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceXlibPresentationSupportKHR">
			<return-type basetype="VkBool32"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="uint32_t" name="queueFamilyIndex"/>
			<param name="dpy" basetype="Display" reference="pointer"/>
			<param basetype="VisualID" name="visualID"/>
		</command>
		<command name="vkCreateXcbSurfaceKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkXcbSurfaceCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceXcbPresentationSupportKHR">
			<return-type basetype="VkBool32"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="uint32_t" name="queueFamilyIndex"/>
			<param name="connection" basetype="xcb_connection_t" reference="pointer"/>
			<param basetype="xcb_visualid_t" name="visual_id"/>
		</command>
		<command name="vkCreateDebugReportCallbackEXT">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkDebugReportCallbackCreateInfoEXT" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pCallback" basetype="VkDebugReportCallbackEXT" reference="pointer"/>
		</command>
		<command name="vkDestroyDebugReportCallbackEXT">
			<return-type basetype="void"/>
			<param basetype="VkInstance" name="instance"/>
			<param sync="true" basetype="VkDebugReportCallbackEXT" name="callback"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkDebugReportMessageEXT">
			<return-type basetype="void"/>
			<param basetype="VkInstance" name="instance"/>
			<param basetype="VkDebugReportFlagsEXT" name="flags"/>
			<param basetype="VkDebugReportObjectTypeEXT" name="objectType"/>
			<param basetype="uint64_t" name="object"/>
			<param basetype="size_t" name="location"/>
			<param basetype="int32_t" name="messageCode"/>
			<param array="dynamic" null-terminate="true" reference="pointer" name="pLayerPrefix" basetype="char" const="true"/>
			<param array="dynamic" null-terminate="true" reference="pointer" name="pMessage" basetype="char" const="true"/>
		</command>
		<command name="vkDebugMarkerSetObjectNameEXT">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="pNameInfo.object" reference="pointer" name="pNameInfo" const="true" basetype="VkDebugMarkerObjectNameInfoEXT"/>
		</command>
		<command name="vkDebugMarkerSetObjectTagEXT">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="pTagInfo.object" reference="pointer" name="pTagInfo" const="true" basetype="VkDebugMarkerObjectTagInfoEXT"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdDebugMarkerBeginEXT">
			<return-type basetype="void"/>
			<param basetype="VkCommandBuffer" name="commandBuffer"/>
			<param name="pMarkerInfo" const="true" basetype="VkDebugMarkerMarkerInfoEXT" reference="pointer"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdDebugMarkerEndEXT">
			<return-type basetype="void"/>
			<param basetype="VkCommandBuffer" name="commandBuffer"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdDebugMarkerInsertEXT">
			<return-type basetype="void"/>
			<param basetype="VkCommandBuffer" name="commandBuffer"/>
			<param name="pMarkerInfo" const="true" basetype="VkDebugMarkerMarkerInfoEXT" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceExternalImageFormatPropertiesNV">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkFormat" name="format"/>
			<param basetype="VkImageType" name="type"/>
			<param basetype="VkImageTiling" name="tiling"/>
			<param basetype="VkImageUsageFlags" name="usage"/>
			<param name="flags" basetype="VkImageCreateFlags" optional="true"/>
			<param name="externalHandleType" basetype="VkExternalMemoryHandleTypeFlagsNV" optional="true"/>
			<param name="pExternalImageFormatProperties" basetype="VkExternalImageFormatPropertiesNV" reference="pointer"/>
		</command>
		<command name="vkGetMemoryWin32HandleNV">
			<return-type errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkDeviceMemory" name="memory"/>
			<param basetype="VkExternalMemoryHandleTypeFlagsNV" name="handleType"/>
			<param name="pHandle" basetype="HANDLE" reference="pointer"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="graphics" queues="graphics" renderpass="inside" name="vkCmdDrawIndirectCountAMD">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="buffer"/>
			<param basetype="VkDeviceSize" name="offset"/>
			<param basetype="VkBuffer" name="countBuffer"/>
			<param basetype="VkDeviceSize" name="countBufferOffset"/>
			<param basetype="uint32_t" name="maxDrawCount"/>
			<param basetype="uint32_t" name="stride"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="graphics" queues="graphics" renderpass="inside" name="vkCmdDrawIndexedIndirectCountAMD">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkBuffer" name="buffer"/>
			<param basetype="VkDeviceSize" name="offset"/>
			<param basetype="VkBuffer" name="countBuffer"/>
			<param basetype="VkDeviceSize" name="countBufferOffset"/>
			<param basetype="uint32_t" name="maxDrawCount"/>
			<param basetype="uint32_t" name="stride"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="inside" name="vkCmdProcessCommandsNVX">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param name="pProcessCommandsInfo" const="true" basetype="VkCmdProcessCommandsInfoNVX" reference="pointer"/>
		</command>
		<command cmdbufferlevel="secondary" queues="graphics,compute" renderpass="inside" name="vkCmdReserveSpaceForCommandsNVX">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param name="pReserveSpaceInfo" const="true" basetype="VkCmdReserveSpaceForCommandsInfoNVX" reference="pointer"/>
		</command>
		<command name="vkCreateIndirectCommandsLayoutNVX">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkIndirectCommandsLayoutCreateInfoNVX" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pIndirectCommandsLayout" basetype="VkIndirectCommandsLayoutNVX" reference="pointer"/>
		</command>
		<command name="vkDestroyIndirectCommandsLayoutNVX">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkIndirectCommandsLayoutNVX" name="indirectCommandsLayout"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateObjectTableNVX">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkObjectTableCreateInfoNVX" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pObjectTable" basetype="VkObjectTableNVX" reference="pointer"/>
		</command>
		<command name="vkDestroyObjectTableNVX">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkObjectTableNVX" name="objectTable"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkRegisterObjectsNVX">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkObjectTableNVX" name="objectTable"/>
			<param basetype="uint32_t" name="objectCount"/>
			<param array="dynamic" reference="pointer-const-pointer" size="objectCount" name="ppObjectTableEntries" const="true" basetype="VkObjectTableEntryNVX"/>
			<param array="dynamic" reference="pointer" size="objectCount" name="pObjectIndices" const="true" basetype="uint32_t"/>
		</command>
		<command name="vkUnregisterObjectsNVX">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkObjectTableNVX" name="objectTable"/>
			<param basetype="uint32_t" name="objectCount"/>
			<param array="dynamic" reference="pointer" size="objectCount" name="pObjectEntryTypes" const="true" basetype="VkObjectEntryTypeNVX"/>
			<param array="dynamic" reference="pointer" size="objectCount" name="pObjectIndices" const="true" basetype="uint32_t"/>
		</command>
		<command name="vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pFeatures" basetype="VkDeviceGeneratedCommandsFeaturesNVX" reference="pointer"/>
			<param name="pLimits" basetype="VkDeviceGeneratedCommandsLimitsNVX" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceFeatures2KHR">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pFeatures" basetype="VkPhysicalDeviceFeatures2KHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceProperties2KHR">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pProperties" basetype="VkPhysicalDeviceProperties2KHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceFormatProperties2KHR">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkFormat" name="format"/>
			<param name="pFormatProperties" basetype="VkFormatProperties2KHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceImageFormatProperties2KHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pImageFormatInfo" const="true" basetype="VkPhysicalDeviceImageFormatInfo2KHR" reference="pointer"/>
			<param name="pImageFormatProperties" basetype="VkImageFormatProperties2KHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceQueueFamilyProperties2KHR">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pQueueFamilyPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pQueueFamilyPropertyCount" name="pQueueFamilyProperties" basetype="VkQueueFamilyProperties2KHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceMemoryProperties2KHR">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pMemoryProperties" basetype="VkPhysicalDeviceMemoryProperties2KHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceSparseImageFormatProperties2KHR">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pFormatInfo" const="true" basetype="VkPhysicalDeviceSparseImageFormatInfo2KHR" reference="pointer"/>
			<param name="pPropertyCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPropertyCount" name="pProperties" basetype="VkSparseImageFormatProperties2KHR" reference="pointer"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdPushDescriptorSetKHR">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkPipelineBindPoint" name="pipelineBindPoint"/>
			<param basetype="VkPipelineLayout" name="layout"/>
			<param basetype="uint32_t" name="set"/>
			<param basetype="uint32_t" name="descriptorWriteCount"/>
			<param array="dynamic" reference="pointer" size="descriptorWriteCount" name="pDescriptorWrites" const="true" basetype="VkWriteDescriptorSet"/>
		</command>
		<command name="vkTrimCommandPoolKHR">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkCommandPool" name="commandPool"/>
			<param name="flags" basetype="VkCommandPoolTrimFlagsKHR" optional="true"/>
		</command>
		<command name="vkGetPhysicalDeviceExternalBufferPropertiesKHR">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pExternalBufferInfo" const="true" basetype="VkPhysicalDeviceExternalBufferInfoKHR" reference="pointer"/>
			<param name="pExternalBufferProperties" basetype="VkExternalBufferPropertiesKHR" reference="pointer"/>
		</command>
		<command name="vkGetMemoryWin32HandleKHR">
			<return-type errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pGetWin32HandleInfo" const="true" basetype="VkMemoryGetWin32HandleInfoKHR" reference="pointer"/>
			<param name="pHandle" basetype="HANDLE" reference="pointer"/>
		</command>
		<command name="vkGetMemoryWin32HandlePropertiesKHR">
			<return-type errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkExternalMemoryHandleTypeFlagBitsKHR" name="handleType"/>
			<param basetype="HANDLE" name="handle"/>
			<param name="pMemoryWin32HandleProperties" basetype="VkMemoryWin32HandlePropertiesKHR" reference="pointer"/>
		</command>
		<command name="vkGetMemoryFdKHR">
			<return-type errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pGetFdInfo" const="true" basetype="VkMemoryGetFdInfoKHR" reference="pointer"/>
			<param name="pFd" basetype="int" reference="pointer"/>
		</command>
		<command name="vkGetMemoryFdPropertiesKHR">
			<return-type errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkExternalMemoryHandleTypeFlagBitsKHR" name="handleType"/>
			<param basetype="int" name="fd"/>
			<param name="pMemoryFdProperties" basetype="VkMemoryFdPropertiesKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pExternalSemaphoreInfo" const="true" basetype="VkPhysicalDeviceExternalSemaphoreInfoKHR" reference="pointer"/>
			<param name="pExternalSemaphoreProperties" basetype="VkExternalSemaphorePropertiesKHR" reference="pointer"/>
		</command>
		<command name="vkGetSemaphoreWin32HandleKHR">
			<return-type errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pGetWin32HandleInfo" const="true" basetype="VkSemaphoreGetWin32HandleInfoKHR" reference="pointer"/>
			<param name="pHandle" basetype="HANDLE" reference="pointer"/>
		</command>
		<command name="vkImportSemaphoreWin32HandleKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pImportSemaphoreWin32HandleInfo" const="true" basetype="VkImportSemaphoreWin32HandleInfoKHR" reference="pointer"/>
		</command>
		<command name="vkGetSemaphoreFdKHR">
			<return-type errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pGetFdInfo" const="true" basetype="VkSemaphoreGetFdInfoKHR" reference="pointer"/>
			<param name="pFd" basetype="int" reference="pointer"/>
		</command>
		<command name="vkImportSemaphoreFdKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pImportSemaphoreFdInfo" const="true" basetype="VkImportSemaphoreFdInfoKHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceExternalFencePropertiesKHR">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pExternalFenceInfo" const="true" basetype="VkPhysicalDeviceExternalFenceInfoKHR" reference="pointer"/>
			<param name="pExternalFenceProperties" basetype="VkExternalFencePropertiesKHR" reference="pointer"/>
		</command>
		<command name="vkGetFenceWin32HandleKHR">
			<return-type errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pGetWin32HandleInfo" const="true" basetype="VkFenceGetWin32HandleInfoKHR" reference="pointer"/>
			<param name="pHandle" basetype="HANDLE" reference="pointer"/>
		</command>
		<command name="vkImportFenceWin32HandleKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pImportFenceWin32HandleInfo" const="true" basetype="VkImportFenceWin32HandleInfoKHR" reference="pointer"/>
		</command>
		<command name="vkGetFenceFdKHR">
			<return-type errorcodes="VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pGetFdInfo" const="true" basetype="VkFenceGetFdInfoKHR" reference="pointer"/>
			<param name="pFd" basetype="int" reference="pointer"/>
		</command>
		<command name="vkImportFenceFdKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pImportFenceFdInfo" const="true" basetype="VkImportFenceFdInfoKHR" reference="pointer"/>
		</command>
		<command name="vkReleaseDisplayEXT">
			<return-type errorcodes="" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkDisplayKHR" name="display"/>
		</command>
		<command name="vkAcquireXlibDisplayEXT">
			<return-type errorcodes="VK_ERROR_INITIALIZATION_FAILED" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="dpy" basetype="Display" reference="pointer"/>
			<param basetype="VkDisplayKHR" name="display"/>
		</command>
		<command name="vkGetRandROutputDisplayEXT">
			<return-type errorcodes="" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="dpy" basetype="Display" reference="pointer"/>
			<param basetype="RROutput" name="rrOutput"/>
			<param name="pDisplay" basetype="VkDisplayKHR" reference="pointer"/>
		</command>
		<command name="vkDisplayPowerControlEXT">
			<return-type errorcodes="" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkDisplayKHR" name="display"/>
			<param name="pDisplayPowerInfo" const="true" basetype="VkDisplayPowerInfoEXT" reference="pointer"/>
		</command>
		<command name="vkRegisterDeviceEventEXT">
			<return-type errorcodes="" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pDeviceEventInfo" const="true" basetype="VkDeviceEventInfoEXT" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pFence" basetype="VkFence" reference="pointer"/>
		</command>
		<command name="vkRegisterDisplayEventEXT">
			<return-type errorcodes="" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkDisplayKHR" name="display"/>
			<param name="pDisplayEventInfo" const="true" basetype="VkDisplayEventInfoEXT" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pFence" basetype="VkFence" reference="pointer"/>
		</command>
		<command name="vkGetSwapchainCounterEXT">
			<return-type errorcodes="" successcodes="VK_SUCCESS,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkSwapchainKHR" name="swapchain"/>
			<param basetype="VkSurfaceCounterFlagBitsEXT" name="counter"/>
			<param name="pCounterValue" basetype="uint64_t" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceSurfaceCapabilities2EXT">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkSurfaceKHR" name="surface"/>
			<param name="pSurfaceCapabilities" basetype="VkSurfaceCapabilities2EXT" reference="pointer"/>
		</command>
		<command name="vkEnumeratePhysicalDeviceGroupsKHX">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pPhysicalDeviceGroupCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPhysicalDeviceGroupCount" name="pPhysicalDeviceGroupProperties" basetype="VkPhysicalDeviceGroupPropertiesKHX" reference="pointer"/>
		</command>
		<command name="vkGetDeviceGroupPeerMemoryFeaturesKHX">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="heapIndex"/>
			<param basetype="uint32_t" name="localDeviceIndex"/>
			<param basetype="uint32_t" name="remoteDeviceIndex"/>
			<param name="pPeerMemoryFeatures" reference="pointer" basetype="VkPeerMemoryFeatureFlagsKHX" optional="false,true"/>
		</command>
		<command name="vkBindBufferMemory2KHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="bindInfoCount"/>
			<param array="dynamic" reference="pointer" size="bindInfoCount" name="pBindInfos" const="true" basetype="VkBindBufferMemoryInfoKHR"/>
		</command>
		<command name="vkBindImageMemory2KHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="bindInfoCount"/>
			<param array="dynamic" reference="pointer" size="bindInfoCount" name="pBindInfos" const="true" basetype="VkBindImageMemoryInfoKHR"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute,transfer" renderpass="both" name="vkCmdSetDeviceMaskKHX">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="deviceMask"/>
		</command>
		<command name="vkGetDeviceGroupPresentCapabilitiesKHX">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pDeviceGroupPresentCapabilities" basetype="VkDeviceGroupPresentCapabilitiesKHX" reference="pointer"/>
		</command>
		<command name="vkGetDeviceGroupSurfacePresentModesKHX">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkSurfaceKHR" name="surface"/>
			<param name="pModes" reference="pointer" basetype="VkDeviceGroupPresentModeFlagsKHX" optional="false,true"/>
		</command>
		<command name="vkAcquireNextImage2KHX">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pAcquireInfo" const="true" basetype="VkAcquireNextImageInfoKHX" reference="pointer"/>
			<param name="pImageIndex" basetype="uint32_t" reference="pointer"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="compute" renderpass="outside" name="vkCmdDispatchBaseKHX">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="baseGroupX"/>
			<param basetype="uint32_t" name="baseGroupY"/>
			<param basetype="uint32_t" name="baseGroupZ"/>
			<param basetype="uint32_t" name="groupCountX"/>
			<param basetype="uint32_t" name="groupCountY"/>
			<param basetype="uint32_t" name="groupCountZ"/>
		</command>
		<command name="vkGetPhysicalDevicePresentRectanglesKHX">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param sync="true" basetype="VkSurfaceKHR" name="surface"/>
			<param name="pRectCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pRectCount" name="pRects" basetype="VkRect2D" reference="pointer"/>
		</command>
		<command name="vkCreateDescriptorUpdateTemplateKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkDescriptorUpdateTemplateCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pDescriptorUpdateTemplate" basetype="VkDescriptorUpdateTemplateKHR" reference="pointer"/>
		</command>
		<command name="vkDestroyDescriptorUpdateTemplateKHR">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="descriptorUpdateTemplate" basetype="VkDescriptorUpdateTemplateKHR" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkUpdateDescriptorSetWithTemplateKHR">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkDescriptorSet" name="descriptorSet"/>
			<param basetype="VkDescriptorUpdateTemplateKHR" name="descriptorUpdateTemplate"/>
			<param name="pData" reference="pointer" auto-validity="false" const="true" basetype="void"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics,compute" renderpass="both" name="vkCmdPushDescriptorSetWithTemplateKHR">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkDescriptorUpdateTemplateKHR" name="descriptorUpdateTemplate"/>
			<param basetype="VkPipelineLayout" name="layout"/>
			<param basetype="uint32_t" name="set"/>
			<param name="pData" reference="pointer" auto-validity="false" const="true" basetype="void"/>
		</command>
		<command name="vkSetHdrMetadataEXT">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="uint32_t" name="swapchainCount"/>
			<param array="dynamic" reference="pointer" size="swapchainCount" name="pSwapchains" const="true" basetype="VkSwapchainKHR"/>
			<param array="dynamic" reference="pointer" size="swapchainCount" name="pMetadata" const="true" basetype="VkHdrMetadataEXT"/>
		</command>
		<command name="vkGetSwapchainStatusKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS,VK_SUBOPTIMAL_KHR" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkSwapchainKHR" name="swapchain"/>
		</command>
		<command name="vkGetRefreshCycleDurationGOOGLE">
			<return-type errorcodes="VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkSwapchainKHR" name="swapchain"/>
			<param name="pDisplayTimingProperties" basetype="VkRefreshCycleDurationGOOGLE" reference="pointer"/>
		</command>
		<command name="vkGetPastPresentationTimingGOOGLE">
			<return-type errorcodes="VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkSwapchainKHR" name="swapchain"/>
			<param name="pPresentationTimingCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pPresentationTimingCount" name="pPresentationTimings" basetype="VkPastPresentationTimingGOOGLE" reference="pointer"/>
		</command>
		<command name="vkCreateIOSSurfaceMVK">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkIOSSurfaceCreateInfoMVK" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command name="vkCreateMacOSSurfaceMVK">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkInstance" name="instance"/>
			<param name="pCreateInfo" const="true" basetype="VkMacOSSurfaceCreateInfoMVK" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pSurface" basetype="VkSurfaceKHR" reference="pointer"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetViewportWScalingNV">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="firstViewport"/>
			<param basetype="uint32_t" name="viewportCount"/>
			<param array="dynamic" reference="pointer" size="viewportCount" name="pViewportWScalings" const="true" basetype="VkViewportWScalingNV"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetDiscardRectangleEXT">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="uint32_t" name="firstDiscardRectangle"/>
			<param basetype="uint32_t" name="discardRectangleCount"/>
			<param array="dynamic" reference="pointer" size="discardRectangleCount" name="pDiscardRectangles" const="true" basetype="VkRect2D"/>
		</command>
		<command cmdbufferlevel="primary,secondary" queues="graphics" renderpass="both" name="vkCmdSetSampleLocationsEXT">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param name="pSampleLocationsInfo" const="true" basetype="VkSampleLocationsInfoEXT" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceMultisamplePropertiesEXT">
			<return-type basetype="void"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param basetype="VkSampleCountFlagBits" name="samples"/>
			<param name="pMultisampleProperties" basetype="VkMultisamplePropertiesEXT" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceSurfaceCapabilities2KHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pSurfaceInfo" const="true" basetype="VkPhysicalDeviceSurfaceInfo2KHR" reference="pointer"/>
			<param name="pSurfaceCapabilities" basetype="VkSurfaceCapabilities2KHR" reference="pointer"/>
		</command>
		<command name="vkGetPhysicalDeviceSurfaceFormats2KHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkPhysicalDevice" name="physicalDevice"/>
			<param name="pSurfaceInfo" const="true" basetype="VkPhysicalDeviceSurfaceInfo2KHR" reference="pointer"/>
			<param name="pSurfaceFormatCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pSurfaceFormatCount" name="pSurfaceFormats" basetype="VkSurfaceFormat2KHR" reference="pointer"/>
		</command>
		<command name="vkGetBufferMemoryRequirements2KHR">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pInfo" const="true" basetype="VkBufferMemoryRequirementsInfo2KHR" reference="pointer"/>
			<param name="pMemoryRequirements" basetype="VkMemoryRequirements2KHR" reference="pointer"/>
		</command>
		<command name="vkGetImageMemoryRequirements2KHR">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pInfo" const="true" basetype="VkImageMemoryRequirementsInfo2KHR" reference="pointer"/>
			<param name="pMemoryRequirements" basetype="VkMemoryRequirements2KHR" reference="pointer"/>
		</command>
		<command name="vkGetImageSparseMemoryRequirements2KHR">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pInfo" const="true" basetype="VkImageSparseMemoryRequirementsInfo2KHR" reference="pointer"/>
			<param name="pSparseMemoryRequirementCount" reference="pointer" basetype="uint32_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pSparseMemoryRequirementCount" name="pSparseMemoryRequirements" basetype="VkSparseImageMemoryRequirements2KHR" reference="pointer"/>
		</command>
		<command name="vkCreateSamplerYcbcrConversionKHR">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkSamplerYcbcrConversionCreateInfoKHR" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pYcbcrConversion" basetype="VkSamplerYcbcrConversionKHR" reference="pointer"/>
		</command>
		<command name="vkDestroySamplerYcbcrConversionKHR">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="ycbcrConversion" basetype="VkSamplerYcbcrConversionKHR" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkCreateValidationCacheEXT">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param name="pCreateInfo" const="true" basetype="VkValidationCacheCreateInfoEXT" reference="pointer"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
			<param name="pValidationCache" basetype="VkValidationCacheEXT" reference="pointer"/>
		</command>
		<command name="vkDestroyValidationCacheEXT">
			<return-type basetype="void"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" name="validationCache" basetype="VkValidationCacheEXT" optional="true"/>
			<param name="pAllocator" optional="true" reference="pointer" const="true" basetype="VkAllocationCallbacks"/>
		</command>
		<command name="vkGetValidationCacheDataEXT">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkValidationCacheEXT" name="validationCache"/>
			<param name="pDataSize" reference="pointer" basetype="size_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pDataSize" name="pData" basetype="void" reference="pointer"/>
		</command>
		<command name="vkMergeValidationCachesEXT">
			<return-type errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param sync="true" basetype="VkValidationCacheEXT" name="dstCache"/>
			<param basetype="uint32_t" name="srcCacheCount"/>
			<param array="dynamic" reference="pointer" size="srcCacheCount" name="pSrcCaches" const="true" basetype="VkValidationCacheEXT"/>
		</command>
		<command name="vkGetSwapchainGrallocUsageANDROID">
			<return-type basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkFormat" name="format"/>
			<param basetype="VkImageUsageFlags" name="imageUsage"/>
			<param name="grallocUsage" basetype="int" reference="pointer"/>
		</command>
		<command name="vkAcquireImageANDROID">
			<return-type basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkImage" name="image"/>
			<param basetype="int" name="nativeFenceFd"/>
			<param basetype="VkSemaphore" name="semaphore"/>
			<param basetype="VkFence" name="fence"/>
		</command>
		<command name="vkQueueSignalReleaseImageANDROID">
			<return-type basetype="VkResult"/>
			<param basetype="VkQueue" name="queue"/>
			<param basetype="uint32_t" name="waitSemaphoreCount"/>
			<param name="pWaitSemaphores" const="true" basetype="VkSemaphore" reference="pointer"/>
			<param basetype="VkImage" name="image"/>
			<param name="pNativeFenceFd" basetype="int" reference="pointer"/>
		</command>
		<command name="vkGetShaderInfoAMD">
			<return-type errorcodes="VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_OUT_OF_HOST_MEMORY" successcodes="VK_SUCCESS,VK_INCOMPLETE" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkPipeline" name="pipeline"/>
			<param basetype="VkShaderStageFlagBits" name="shaderStage"/>
			<param basetype="VkShaderInfoTypeAMD" name="infoType"/>
			<param name="pInfoSize" reference="pointer" basetype="size_t" optional="false,true"/>
			<param array="dynamic" optional="true" size="pInfoSize" name="pInfo" basetype="void" reference="pointer"/>
		</command>
		<command name="vkGetMemoryHostPointerPropertiesEXT">
			<return-type errorcodes="VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" successcodes="VK_SUCCESS" basetype="VkResult"/>
			<param basetype="VkDevice" name="device"/>
			<param basetype="VkExternalMemoryHandleTypeFlagBitsKHR" name="handleType"/>
			<param name="pHostPointer" optional="false" reference="pointer" const="true" basetype="void"/>
			<param name="pMemoryHostPointerProperties" basetype="VkMemoryHostPointerPropertiesEXT" reference="pointer"/>
		</command>
		<command cmdbufferlevel="primary,secondary" pipeline="transfer" queues="transfer,graphics,compute" renderpass="both" name="vkCmdWriteBufferMarkerAMD">
			<return-type basetype="void"/>
			<param sync="true" basetype="VkCommandBuffer" name="commandBuffer"/>
			<param basetype="VkPipelineStageFlagBits" name="pipelineStage"/>
			<param basetype="VkBuffer" name="dstBuffer"/>
			<param basetype="VkDeviceSize" name="dstOffset"/>
			<param basetype="uint32_t" name="marker"/>
		</command>
	</commands>
	<features>
		<feature name="VK_VERSION_1_0" api="vulkan" version="1.0" notation="Vulkan core API interface definitions">
			<require notation="Header boilerplate">
				<defref name="vk_platform"/>
			</require>
			<require notation="API version">
				<defref name="VK_API_VERSION"/>
				<defref name="VK_API_VERSION_1_0"/>
				<defref name="VK_VERSION_MAJOR"/>
				<defref name="VK_VERSION_MINOR"/>
				<defref name="VK_VERSION_PATCH"/>
				<defref name="VK_HEADER_VERSION"/>
			</require>
			<require notation="API constants">
				<enumref name="VK_LOD_CLAMP_NONE"/>
				<enumref name="VK_REMAINING_MIP_LEVELS"/>
				<enumref name="VK_REMAINING_ARRAY_LAYERS"/>
				<enumref name="VK_WHOLE_SIZE"/>
				<enumref name="VK_ATTACHMENT_UNUSED"/>
				<enumref name="VK_TRUE"/>
				<enumref name="VK_FALSE"/>
				<defref name="VK_NULL_HANDLE"/>
				<enumref name="VK_QUEUE_FAMILY_IGNORED"/>
				<enumref name="VK_SUBPASS_EXTERNAL"/>
				<defref name="VkPipelineCacheHeaderVersion"/>
			</require>
			<require notation="Device initialization">
				<commandref name="vkCreateInstance"/>
				<commandref name="vkDestroyInstance"/>
				<commandref name="vkEnumeratePhysicalDevices"/>
				<commandref name="vkGetPhysicalDeviceFeatures"/>
				<commandref name="vkGetPhysicalDeviceFormatProperties"/>
				<commandref name="vkGetPhysicalDeviceImageFormatProperties"/>
				<commandref name="vkGetPhysicalDeviceProperties"/>
				<commandref name="vkGetPhysicalDeviceQueueFamilyProperties"/>
				<commandref name="vkGetPhysicalDeviceMemoryProperties"/>
				<commandref name="vkGetInstanceProcAddr"/>
				<commandref name="vkGetDeviceProcAddr"/>
			</require>
			<require notation="Device commands">
				<commandref name="vkCreateDevice"/>
				<commandref name="vkDestroyDevice"/>
			</require>
			<require notation="Extension discovery commands">
				<commandref name="vkEnumerateInstanceExtensionProperties"/>
				<commandref name="vkEnumerateDeviceExtensionProperties"/>
			</require>
			<require notation="Layer discovery commands">
				<commandref name="vkEnumerateInstanceLayerProperties"/>
				<commandref name="vkEnumerateDeviceLayerProperties"/>
			</require>
			<require notation="queue commands">
				<commandref name="vkGetDeviceQueue"/>
				<commandref name="vkQueueSubmit"/>
				<commandref name="vkQueueWaitIdle"/>
				<commandref name="vkDeviceWaitIdle"/>
			</require>
			<require notation="Memory commands">
				<commandref name="vkAllocateMemory"/>
				<commandref name="vkFreeMemory"/>
				<commandref name="vkMapMemory"/>
				<commandref name="vkUnmapMemory"/>
				<commandref name="vkFlushMappedMemoryRanges"/>
				<commandref name="vkInvalidateMappedMemoryRanges"/>
				<commandref name="vkGetDeviceMemoryCommitment"/>
			</require>
			<require notation="Memory management API commands">
				<commandref name="vkBindBufferMemory"/>
				<commandref name="vkBindImageMemory"/>
				<commandref name="vkGetBufferMemoryRequirements"/>
				<commandref name="vkGetImageMemoryRequirements"/>
			</require>
			<require notation="Sparse resource memory management API commands">
				<commandref name="vkGetImageSparseMemoryRequirements"/>
				<commandref name="vkGetPhysicalDeviceSparseImageFormatProperties"/>
				<commandref name="vkQueueBindSparse"/>
			</require>
			<require notation="Fence commands">
				<commandref name="vkCreateFence"/>
				<commandref name="vkDestroyFence"/>
				<commandref name="vkResetFences"/>
				<commandref name="vkGetFenceStatus"/>
				<commandref name="vkWaitForFences"/>
			</require>
			<require notation="Queue semaphore commands">
				<commandref name="vkCreateSemaphore"/>
				<commandref name="vkDestroySemaphore"/>
			</require>
			<require notation="Event commands">
				<commandref name="vkCreateEvent"/>
				<commandref name="vkDestroyEvent"/>
				<commandref name="vkGetEventStatus"/>
				<commandref name="vkSetEvent"/>
				<commandref name="vkResetEvent"/>
			</require>
			<require notation="Query commands">
				<commandref name="vkCreateQueryPool"/>
				<commandref name="vkDestroyQueryPool"/>
				<commandref name="vkGetQueryPoolResults"/>
			</require>
			<require notation="Buffer commands">
				<commandref name="vkCreateBuffer"/>
				<commandref name="vkDestroyBuffer"/>
			</require>
			<require notation="Buffer view commands">
				<commandref name="vkCreateBufferView"/>
				<commandref name="vkDestroyBufferView"/>
			</require>
			<require notation="Image commands">
				<commandref name="vkCreateImage"/>
				<commandref name="vkDestroyImage"/>
				<commandref name="vkGetImageSubresourceLayout"/>
			</require>
			<require notation="Image view commands">
				<commandref name="vkCreateImageView"/>
				<commandref name="vkDestroyImageView"/>
			</require>
			<require notation="Shader commands">
				<commandref name="vkCreateShaderModule"/>
				<commandref name="vkDestroyShaderModule"/>
			</require>
			<require notation="Pipeline Cache commands">
				<commandref name="vkCreatePipelineCache"/>
				<commandref name="vkDestroyPipelineCache"/>
				<commandref name="vkGetPipelineCacheData"/>
				<commandref name="vkMergePipelineCaches"/>
			</require>
			<require notation="Pipeline commands">
				<commandref name="vkCreateGraphicsPipelines"/>
				<commandref name="vkCreateComputePipelines"/>
				<commandref name="vkDestroyPipeline"/>
			</require>
			<require notation="Pipeline layout commands">
				<commandref name="vkCreatePipelineLayout"/>
				<commandref name="vkDestroyPipelineLayout"/>
			</require>
			<require notation="Sampler commands">
				<commandref name="vkCreateSampler"/>
				<commandref name="vkDestroySampler"/>
			</require>
			<require notation="Descriptor set commands">
				<commandref name="vkCreateDescriptorSetLayout"/>
				<commandref name="vkDestroyDescriptorSetLayout"/>
				<commandref name="vkCreateDescriptorPool"/>
				<commandref name="vkDestroyDescriptorPool"/>
				<commandref name="vkResetDescriptorPool"/>
				<commandref name="vkAllocateDescriptorSets"/>
				<commandref name="vkFreeDescriptorSets"/>
				<commandref name="vkUpdateDescriptorSets"/>
			</require>
			<require notation="Pass commands">
				<commandref name="vkCreateFramebuffer"/>
				<commandref name="vkDestroyFramebuffer"/>
				<commandref name="vkCreateRenderPass"/>
				<commandref name="vkDestroyRenderPass"/>
				<commandref name="vkGetRenderAreaGranularity"/>
			</require>
			<require notation="Command pool commands">
				<commandref name="vkCreateCommandPool"/>
				<commandref name="vkDestroyCommandPool"/>
				<commandref name="vkResetCommandPool"/>
			</require>
			<require notation="Command buffer commands">
				<commandref name="vkAllocateCommandBuffers"/>
				<commandref name="vkFreeCommandBuffers"/>
				<commandref name="vkBeginCommandBuffer"/>
				<commandref name="vkEndCommandBuffer"/>
				<commandref name="vkResetCommandBuffer"/>
			</require>
			<require notation="Command buffer building commands">
				<commandref name="vkCmdBindPipeline"/>
				<commandref name="vkCmdSetViewport"/>
				<commandref name="vkCmdSetScissor"/>
				<commandref name="vkCmdSetLineWidth"/>
				<commandref name="vkCmdSetDepthBias"/>
				<commandref name="vkCmdSetBlendConstants"/>
				<commandref name="vkCmdSetDepthBounds"/>
				<commandref name="vkCmdSetStencilCompareMask"/>
				<commandref name="vkCmdSetStencilWriteMask"/>
				<commandref name="vkCmdSetStencilReference"/>
				<commandref name="vkCmdBindDescriptorSets"/>
				<commandref name="vkCmdBindIndexBuffer"/>
				<commandref name="vkCmdBindVertexBuffers"/>
				<commandref name="vkCmdDraw"/>
				<commandref name="vkCmdDrawIndexed"/>
				<commandref name="vkCmdDrawIndirect"/>
				<commandref name="vkCmdDrawIndexedIndirect"/>
				<commandref name="vkCmdDispatch"/>
				<commandref name="vkCmdDispatchIndirect"/>
				<commandref name="vkCmdCopyBuffer"/>
				<commandref name="vkCmdCopyImage"/>
				<commandref name="vkCmdBlitImage"/>
				<commandref name="vkCmdCopyBufferToImage"/>
				<commandref name="vkCmdCopyImageToBuffer"/>
				<commandref name="vkCmdUpdateBuffer"/>
				<commandref name="vkCmdFillBuffer"/>
				<commandref name="vkCmdClearColorImage"/>
				<commandref name="vkCmdClearDepthStencilImage"/>
				<commandref name="vkCmdClearAttachments"/>
				<commandref name="vkCmdResolveImage"/>
				<commandref name="vkCmdSetEvent"/>
				<commandref name="vkCmdResetEvent"/>
				<commandref name="vkCmdWaitEvents"/>
				<commandref name="vkCmdPipelineBarrier"/>
				<commandref name="vkCmdBeginQuery"/>
				<commandref name="vkCmdEndQuery"/>
				<commandref name="vkCmdResetQueryPool"/>
				<commandref name="vkCmdWriteTimestamp"/>
				<commandref name="vkCmdCopyQueryPoolResults"/>
				<commandref name="vkCmdPushConstants"/>
				<commandref name="vkCmdBeginRenderPass"/>
				<commandref name="vkCmdNextSubpass"/>
				<commandref name="vkCmdEndRenderPass"/>
				<commandref name="vkCmdExecuteCommands"/>
			</require>
			<require notation="Types not directly used by the API. Include e.g. structs that are not parameter types of commands, but still defined by the API.">
				<defref name="VkBufferMemoryBarrier"/>
				<defref name="VkDispatchIndirectCommand"/>
				<defref name="VkDrawIndexedIndirectCommand"/>
				<defref name="VkDrawIndirectCommand"/>
				<defref name="VkImageMemoryBarrier"/>
				<defref name="VkMemoryBarrier"/>
				<defref name="VkObjectType"/>
			</require>
		</feature>
	</features>
	<extensions notation="Vulkan extension interface definitions">
		<extension name="VK_KHR_surface" number="1" contact="James Jones @cubanismo,Ian Elliott ianelliott@google.com" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_SURFACE_SPEC_VERSION" number="25"/>
				<constant name="VK_KHR_SURFACE_EXTENSION_NAME" string="VK_KHR_surface"/>
				<enum name="VK_ERROR_SURFACE_LOST_KHR" extends="VkResult" offset="0" negate="true"/>
				<enum name="VK_ERROR_NATIVE_WINDOW_IN_USE_KHR" extends="VkResult" offset="1" negate="true"/>
				<constant name="VK_COLORSPACE_SRGB_NONLINEAR_KHR" enumref="VK_COLOR_SPACE_SRGB_NONLINEAR_KHR"/>
				<enum name="VK_OBJECT_TYPE_SURFACE_KHR" notation="VkSurfaceKHR" extends="VkObjectType" offset="0"/>
				<commandref name="vkDestroySurfaceKHR"/>
				<commandref name="vkGetPhysicalDeviceSurfaceSupportKHR"/>
				<commandref name="vkGetPhysicalDeviceSurfaceCapabilitiesKHR"/>
				<commandref name="vkGetPhysicalDeviceSurfaceFormatsKHR"/>
				<commandref name="vkGetPhysicalDeviceSurfacePresentModesKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_swapchain" number="2" contact="James Jones @cubanismo,Ian Elliott ianelliott@google.com" requires="VK_KHR_surface" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_SWAPCHAIN_SPEC_VERSION" number="68"/>
				<constant name="VK_KHR_SWAPCHAIN_EXTENSION_NAME" string="VK_KHR_swapchain"/>
				<enum name="VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_PRESENT_INFO_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_IMAGE_LAYOUT_PRESENT_SRC_KHR" extends="VkImageLayout" offset="2"/>
				<enum name="VK_SUBOPTIMAL_KHR" extends="VkResult" offset="3"/>
				<enum name="VK_ERROR_OUT_OF_DATE_KHR" extends="VkResult" offset="4" negate="true"/>
				<enum name="VK_OBJECT_TYPE_SWAPCHAIN_KHR" notation="VkSwapchainKHR" extends="VkObjectType" offset="0"/>
				<commandref name="vkCreateSwapchainKHR"/>
				<commandref name="vkDestroySwapchainKHR"/>
				<commandref name="vkGetSwapchainImagesKHR"/>
				<commandref name="vkAcquireNextImageKHR"/>
				<commandref name="vkQueuePresentKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_display" number="3" contact="James Jones @cubanismo,Norbert Nopper @FslNopper" requires="VK_KHR_surface" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_DISPLAY_SPEC_VERSION" number="21"/>
				<constant name="VK_KHR_DISPLAY_EXTENSION_NAME" string="VK_KHR_display"/>
				<enum name="VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_OBJECT_TYPE_DISPLAY_KHR" notation="VkDisplayKHR" extends="VkObjectType" offset="0"/>
				<enum name="VK_OBJECT_TYPE_DISPLAY_MODE_KHR" notation="VkDisplayModeKHR" extends="VkObjectType" offset="1"/>
				<defref name="VkDisplayPlaneAlphaFlagsKHR"/>
				<defref name="VkDisplayPlaneAlphaFlagBitsKHR"/>
				<defref name="VkDisplayPropertiesKHR"/>
				<defref name="VkDisplayModeParametersKHR"/>
				<defref name="VkDisplayModePropertiesKHR"/>
				<defref name="VkDisplayModeCreateInfoKHR"/>
				<defref name="VkDisplayPlaneCapabilitiesKHR"/>
				<defref name="VkDisplayPlanePropertiesKHR"/>
				<defref name="VkDisplaySurfaceCreateInfoKHR"/>
				<commandref name="vkGetPhysicalDeviceDisplayPropertiesKHR"/>
				<commandref name="vkGetPhysicalDeviceDisplayPlanePropertiesKHR"/>
				<commandref name="vkGetDisplayPlaneSupportedDisplaysKHR"/>
				<commandref name="vkGetDisplayModePropertiesKHR"/>
				<commandref name="vkCreateDisplayModeKHR"/>
				<commandref name="vkGetDisplayPlaneCapabilitiesKHR"/>
				<commandref name="vkCreateDisplayPlaneSurfaceKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_display_swapchain" number="4" contact="James Jones @cubanismo" requires="VK_KHR_swapchain,VK_KHR_display" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION" number="9"/>
				<constant name="VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME" string="VK_KHR_display_swapchain"/>
				<enum name="VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_ERROR_INCOMPATIBLE_DISPLAY_KHR" extends="VkResult" offset="1" negate="true"/>
				<defref name="VkDisplayPresentInfoKHR"/>
				<commandref name="vkCreateSharedSwapchainsKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_xlib_surface" number="5" contact="Jesse Hall @jessehall,Ian Elliott ianelliott@google.com" define="VK_USE_PLATFORM_XLIB_KHR" requires="VK_KHR_surface" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_XLIB_SURFACE_SPEC_VERSION" number="6"/>
				<constant name="VK_KHR_XLIB_SURFACE_EXTENSION_NAME" string="VK_KHR_xlib_surface"/>
				<enum name="VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkXlibSurfaceCreateFlagsKHR"/>
				<defref name="VkXlibSurfaceCreateInfoKHR"/>
				<commandref name="vkCreateXlibSurfaceKHR"/>
				<commandref name="vkGetPhysicalDeviceXlibPresentationSupportKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_xcb_surface" number="6" contact="Jesse Hall @jessehall,Ian Elliott ianelliott@google.com" define="VK_USE_PLATFORM_XCB_KHR" requires="VK_KHR_surface" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_XCB_SURFACE_SPEC_VERSION" number="6"/>
				<constant name="VK_KHR_XCB_SURFACE_EXTENSION_NAME" string="VK_KHR_xcb_surface"/>
				<enum name="VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkXcbSurfaceCreateFlagsKHR"/>
				<defref name="VkXcbSurfaceCreateInfoKHR"/>
				<commandref name="vkCreateXcbSurfaceKHR"/>
				<commandref name="vkGetPhysicalDeviceXcbPresentationSupportKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_wayland_surface" number="7" contact="Jesse Hall @jessehall,Ian Elliott ianelliott@google.com" define="VK_USE_PLATFORM_WAYLAND_KHR" requires="VK_KHR_surface" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_WAYLAND_SURFACE_SPEC_VERSION" number="6"/>
				<constant name="VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME" string="VK_KHR_wayland_surface"/>
				<enum name="VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkWaylandSurfaceCreateFlagsKHR"/>
				<defref name="VkWaylandSurfaceCreateInfoKHR"/>
				<commandref name="vkCreateWaylandSurfaceKHR"/>
				<commandref name="vkGetPhysicalDeviceWaylandPresentationSupportKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_mir_surface" number="8" contact="Jesse Hall @jessehall,Ian Elliott ianelliott@google.com" define="VK_USE_PLATFORM_MIR_KHR" requires="VK_KHR_surface" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_MIR_SURFACE_SPEC_VERSION" number="4"/>
				<constant name="VK_KHR_MIR_SURFACE_EXTENSION_NAME" string="VK_KHR_mir_surface"/>
				<enum name="VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkMirSurfaceCreateFlagsKHR"/>
				<defref name="VkMirSurfaceCreateInfoKHR"/>
				<commandref name="vkCreateMirSurfaceKHR"/>
				<commandref name="vkGetPhysicalDeviceMirPresentationSupportKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_android_surface" number="9" contact="Jesse Hall @jessehall" define="VK_USE_PLATFORM_ANDROID_KHR" requires="VK_KHR_surface" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_ANDROID_SURFACE_SPEC_VERSION" number="6"/>
				<constant name="VK_KHR_ANDROID_SURFACE_EXTENSION_NAME" string="VK_KHR_android_surface"/>
				<enum name="VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkAndroidSurfaceCreateFlagsKHR"/>
				<defref name="VkAndroidSurfaceCreateInfoKHR"/>
				<commandref name="vkCreateAndroidSurfaceKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_win32_surface" number="10" contact="Jesse Hall @jessehall,Ian Elliott ianelliott@google.com" define="VK_USE_PLATFORM_WIN32_KHR" requires="VK_KHR_surface" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_WIN32_SURFACE_SPEC_VERSION" number="6"/>
				<constant name="VK_KHR_WIN32_SURFACE_EXTENSION_NAME" string="VK_KHR_win32_surface"/>
				<enum name="VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkWin32SurfaceCreateFlagsKHR"/>
				<defref name="VkWin32SurfaceCreateInfoKHR"/>
				<commandref name="vkCreateWin32SurfaceKHR"/>
				<commandref name="vkGetPhysicalDeviceWin32PresentationSupportKHR"/>
			</require>
		</extension>
		<extension name="VK_ANDROID_native_buffer" number="11" disabled="true">
			<require>
				<constant name="VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION" number="5"/>
				<constant name="VK_ANDROID_NATIVE_BUFFER_NUMBER" number="11"/>
				<constant name="VK_ANDROID_NATIVE_BUFFER_NAME" string="VK_ANDROID_native_buffer"/>
				<enum name="VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID" extends="VkStructureType" offset="0"/>
				<defref name="VkNativeBufferANDROID"/>
				<commandref name="vkGetSwapchainGrallocUsageANDROID"/>
				<commandref name="vkAcquireImageANDROID"/>
				<commandref name="vkQueueSignalReleaseImageANDROID"/>
			</require>
		</extension>
		<extension name="VK_EXT_debug_report" number="12" contact="Courtney Goeltzenleuchter @courtney" author="GOOGLE" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_EXT_DEBUG_REPORT_SPEC_VERSION" number="9"/>
				<constant name="VK_EXT_DEBUG_REPORT_EXTENSION_NAME" string="VK_EXT_debug_report"/>
				<enum name="VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_ERROR_VALIDATION_FAILED_EXT" extends="VkResult" offset="1" negate="true"/>
				<constant name="VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT" enumref="VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"/>
				<enum name="VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT" notation="VkDebugReportCallbackEXT" extends="VkObjectType" offset="0"/>
				<constant name="VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT" enumref="VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT"/>
				<defref name="VkDebugReportObjectTypeEXT"/>
				<defref name="VkDebugReportCallbackCreateInfoEXT"/>
				<commandref name="vkCreateDebugReportCallbackEXT"/>
				<commandref name="vkDestroyDebugReportCallbackEXT"/>
				<commandref name="vkDebugReportMessageEXT"/>
			</require>
		</extension>
		<extension name="VK_NV_glsl_shader" number="13" contact="Piers Daniell @pdaniell" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_GLSL_SHADER_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_GLSL_SHADER_EXTENSION_NAME" string="VK_NV_glsl_shader"/>
				<enum name="VK_ERROR_INVALID_SHADER_NV" extends="VkResult" offset="0" negate="true"/>
			</require>
		</extension>
		<extension name="VK_EXT_depth_range_unrestricted" number="14" contact="Piers Daniell @pdaniell" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME" string="VK_EXT_depth_range_unrestricted"/>
			</require>
		</extension>
		<extension name="VK_KHR_sampler_mirror_clamp_to_edge" number="15" contact="Tobias Hector @tobias" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME" string="VK_KHR_sampler_mirror_clamp_to_edge"/>
				<enum name="VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE" notation="Note that this defines what was previously a core enum, and so uses the &apos;value&apos; attribute rather than &apos;offset&apos;, and does not have a suffix. This is a special case, and should not be repeated" extends="VkSamplerAddressMode" number="4"/>
			</require>
		</extension>
		<extension name="VK_IMG_filter_cubic" number="16" contact="Tobias Hector @tobias" author="IMG" match-api="vulkan" type="device">
			<require>
				<constant name="VK_IMG_FILTER_CUBIC_SPEC_VERSION" number="1"/>
				<constant name="VK_IMG_FILTER_CUBIC_EXTENSION_NAME" string="VK_IMG_filter_cubic"/>
				<enum name="VK_FILTER_CUBIC_IMG" extends="VkFilter" offset="0"/>
				<enum name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG" notation="Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled" extends="VkFormatFeatureFlagBits" bitpos="13"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_17" number="17" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_17_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_17_EXTENSION_NAME" string="VK_AMD_extension_17"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_18" number="18" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_18_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_18_EXTENSION_NAME" string="VK_AMD_extension_18"/>
			</require>
		</extension>
		<extension name="VK_AMD_rasterization_order" number="19" contact="Daniel Rakos @aqnuep" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME" string="VK_AMD_rasterization_order"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD" extends="VkStructureType" offset="0"/>
				<defref name="VkRasterizationOrderAMD"/>
				<defref name="VkPipelineRasterizationStateRasterizationOrderAMD"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_20" number="20" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_20_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_20_EXTENSION_NAME" string="VK_AMD_extension_20"/>
			</require>
		</extension>
		<extension name="VK_AMD_shader_trinary_minmax" number="21" contact="quentin.lin@amd.com" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME" string="VK_AMD_shader_trinary_minmax"/>
			</require>
		</extension>
		<extension name="VK_AMD_shader_explicit_vertex_parameter" number="22" contact="quentin.lin@amd.com" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME" string="VK_AMD_shader_explicit_vertex_parameter"/>
			</require>
		</extension>
		<extension name="VK_EXT_debug_marker" number="23" contact="baldurk@baldurk.org" requires="VK_EXT_debug_report" author="Baldur Karlsson" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_DEBUG_MARKER_SPEC_VERSION" number="4"/>
				<constant name="VK_EXT_DEBUG_MARKER_EXTENSION_NAME" string="VK_EXT_debug_marker"/>
				<enum name="VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT" extends="VkStructureType" offset="2"/>
				<defref name="VkDebugReportObjectTypeEXT"/>
				<defref name="VkDebugMarkerObjectNameInfoEXT"/>
				<defref name="VkDebugMarkerObjectTagInfoEXT"/>
				<defref name="VkDebugMarkerMarkerInfoEXT"/>
				<commandref name="vkDebugMarkerSetObjectTagEXT"/>
				<commandref name="vkDebugMarkerSetObjectNameEXT"/>
				<commandref name="vkCmdDebugMarkerBeginEXT"/>
				<commandref name="vkCmdDebugMarkerEndEXT"/>
				<commandref name="vkCmdDebugMarkerInsertEXT"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_24" number="24" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_24_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_24_EXTENSION_NAME" string="VK_AMD_extension_24"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_25" number="25" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_25_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_25_EXTENSION_NAME" string="VK_AMD_extension_25"/>
			</require>
		</extension>
		<extension name="VK_AMD_gcn_shader" number="26" contact="dominik.witczak@amd.com" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_GCN_SHADER_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_GCN_SHADER_EXTENSION_NAME" string="VK_AMD_gcn_shader"/>
			</require>
		</extension>
		<extension name="VK_NV_dedicated_allocation" number="27" contact="Jeff Bolz @jbolz" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME" string="VK_NV_dedicated_allocation"/>
				<enum name="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV" extends="VkStructureType" offset="2"/>
				<defref name="VkDedicatedAllocationImageCreateInfoNV"/>
				<defref name="VkDedicatedAllocationBufferCreateInfoNV"/>
				<defref name="VkDedicatedAllocationMemoryAllocateInfoNV"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_28" number="28" contact="Piers Daniell @pdaniell" author="NV" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_28_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_28_EXTENSION_NAME" string="VK_NV_extension_28"/>
			</require>
		</extension>
		<extension name="VK_NVX_extension_29" number="29" contact="Jeff Juliano @jjuliano" author="NVX" disabled="true">
			<require>
				<constant name="VK_NVX_EXTENSION_29_SPEC_VERSION" number="0"/>
				<constant name="VK_NVX_EXTENSION_29_EXTENSION_NAME" string="VK_NVX_extension_29"/>
			</require>
		</extension>
		<extension name="VK_NVX_extension_30" number="30" contact="Jeff Juliano @jjuliano" author="NVX" disabled="true">
			<require>
				<constant name="VK_NVX_EXTENSION_30_SPEC_VERSION" number="0"/>
				<constant name="VK_NVX_EXTENSION_30_EXTENSION_NAME" string="VK_NVX_extension_30"/>
			</require>
		</extension>
		<extension name="VK_NVX_extension_31" number="31" contact="Jeff Juliano @jjuliano" author="NVX" disabled="true">
			<require>
				<constant name="VK_NVX_EXTENSION_31_SPEC_VERSION" number="0"/>
				<constant name="VK_NVX_EXTENSION_31_EXTENSION_NAME" string="VK_NVX_extension_31"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_32" number="32" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_32_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_32_EXTENSION_NAME" string="VK_AMD_extension_32"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_33" number="33" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_33_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_33_EXTENSION_NAME" string="VK_AMD_extension_33"/>
			</require>
		</extension>
		<extension name="VK_AMD_draw_indirect_count" number="34" contact="Daniel Rakos @aqnuep" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME" string="VK_AMD_draw_indirect_count"/>
				<commandref name="vkCmdDrawIndirectCountAMD"/>
				<commandref name="vkCmdDrawIndexedIndirectCountAMD"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_35" number="35" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_35_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_35_EXTENSION_NAME" string="VK_AMD_extension_35"/>
			</require>
		</extension>
		<extension name="VK_AMD_negative_viewport_height" number="36" contact="Matthaeus G. Chajdas @anteru" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME" string="VK_AMD_negative_viewport_height"/>
			</require>
		</extension>
		<extension name="VK_AMD_gpu_shader_half_float" number="37" contact="Dominik Witczak @dominikwitczak_amd" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME" string="VK_AMD_gpu_shader_half_float"/>
			</require>
		</extension>
		<extension name="VK_AMD_shader_ballot" number="38" contact="Dominik Witczak @dominikwitczak_amd" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_SHADER_BALLOT_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_SHADER_BALLOT_EXTENSION_NAME" string="VK_AMD_shader_ballot"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_39" number="39" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_39_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_39_EXTENSION_NAME" string="VK_AMD_extension_39"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_40" number="40" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_40_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_40_EXTENSION_NAME" string="VK_AMD_extension_40"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_41" number="41" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_41_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_41_EXTENSION_NAME" string="VK_AMD_extension_41"/>
			</require>
		</extension>
		<extension name="VK_AMD_texture_gather_bias_lod" number="42" contact="Rex Xu @amdrexu" requires="VK_KHR_get_physical_device_properties2" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME" string="VK_AMD_texture_gather_bias_lod"/>
				<enum name="VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD" extends="VkStructureType" offset="0"/>
				<defref name="VkTextureLODGatherFormatPropertiesAMD"/>
			</require>
		</extension>
		<extension name="VK_AMD_shader_info" number="43" contact="Jaakko Konttinen @jaakko" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_SHADER_INFO_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_SHADER_INFO_EXTENSION_NAME" string="VK_AMD_shader_info"/>
				<defref name="VkShaderInfoTypeAMD"/>
				<defref name="VkShaderResourceUsageAMD"/>
				<defref name="VkShaderStatisticsInfoAMD"/>
				<commandref name="vkGetShaderInfoAMD"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_44" number="44" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_44_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_44_EXTENSION_NAME" string="VK_AMD_extension_44"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_45" number="45" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_45_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_45_EXTENSION_NAME" string="VK_AMD_extension_45"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_46" number="46" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_46_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_46_EXTENSION_NAME" string="VK_AMD_extension_46"/>
			</require>
		</extension>
		<extension name="VK_AMD_shader_image_load_store_lod" number="47" contact="Dominik Witczak @dominikwitczak_amd" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME" string="VK_AMD_shader_image_load_store_lod"/>
			</require>
		</extension>
		<extension name="VK_NVX_extension_48" number="48" contact="James Jones @cubanismo" author="NVX" disabled="true">
			<require>
				<constant name="VK_NVX_EXTENSION_48_SPEC_VERSION" number="0"/>
				<constant name="VK_NVX_EXTENSION_48_EXTENSION_NAME" string="VK_NVX_extension_48"/>
			</require>
		</extension>
		<extension name="VK_GOOGLE_extension_49" number="49" contact="Jean-Francois Roy @jfroy" author="GOOGLE" disabled="true">
			<require>
				<constant name="VK_GOOGLE_EXTENSION_49_SPEC_VERSION" number="0"/>
				<constant name="VK_GOOGLE_EXTENSION_49_EXTENSION_NAME" string="VK_GOOGLE_extension_49"/>
			</require>
		</extension>
		<extension name="VK_GOOGLE_extension_50" number="50" contact="Jean-Francois Roy @jfroy" author="GOOGLE" disabled="true">
			<require>
				<constant name="VK_GOOGLE_EXTENSION_50_SPEC_VERSION" number="0"/>
				<constant name="VK_GOOGLE_EXTENSION_50_EXTENSION_NAME" string="VK_GOOGLE_extension_50"/>
			</require>
		</extension>
		<extension name="VK_NVX_extension_51" number="51" contact="James Jones @cubanismo" author="NVX" disabled="true">
			<require>
				<constant name="VK_NVX_EXTENSION_51_SPEC_VERSION" number="0"/>
				<constant name="VK_NVX_EXTENSION_51_EXTENSION_NAME" string="VK_NVX_extension_51"/>
			</require>
		</extension>
		<extension name="VK_NVX_extension_52" number="52" contact="James Jones @cubanismo" author="NVX" disabled="true">
			<require>
				<constant name="VK_NVX_EXTENSION_52_SPEC_VERSION" number="0"/>
				<constant name="VK_NVX_EXTENSION_52_EXTENSION_NAME" string="VK_NVX_extension_52"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_53" number="53" contact="Jeff Bolz @jbolz" author="NV" disabled="true">
			<require>
				<constant name="VK_NV_EXTENSION_53_SPEC_VERSION" number="0"/>
				<constant name="VK_NV_EXTENSION_53_EXTENSION_NAME" string="VK_NV_extension_53"/>
			</require>
		</extension>
		<extension name="VK_KHX_multiview" number="54" contact="Jeff Bolz @jbolz" requires="VK_KHR_get_physical_device_properties2" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHX_MULTIVIEW_SPEC_VERSION" number="1"/>
				<constant name="VK_KHX_MULTIVIEW_EXTENSION_NAME" string="VK_KHX_multiview"/>
				<enum name="VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHX" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHX" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHX" extends="VkStructureType" offset="2"/>
				<enum name="VK_DEPENDENCY_VIEW_LOCAL_BIT_KHX" extends="VkDependencyFlagBits" bitpos="1"/>
				<defref name="VkRenderPassMultiviewCreateInfoKHX"/>
				<defref name="VkPhysicalDeviceMultiviewFeaturesKHX"/>
				<defref name="VkPhysicalDeviceMultiviewPropertiesKHX"/>
			</require>
		</extension>
		<extension name="VK_IMG_format_pvrtc" number="55" contact="Tobias Hector @tobias" author="IMG" match-api="vulkan" type="device">
			<require>
				<constant name="VK_IMG_FORMAT_PVRTC_SPEC_VERSION" number="1"/>
				<constant name="VK_IMG_FORMAT_PVRTC_EXTENSION_NAME" string="VK_IMG_format_pvrtc"/>
				<enum name="VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG" extends="VkFormat" offset="0"/>
				<enum name="VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG" extends="VkFormat" offset="1"/>
				<enum name="VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG" extends="VkFormat" offset="2"/>
				<enum name="VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG" extends="VkFormat" offset="3"/>
				<enum name="VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG" extends="VkFormat" offset="4"/>
				<enum name="VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG" extends="VkFormat" offset="5"/>
				<enum name="VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG" extends="VkFormat" offset="6"/>
				<enum name="VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG" extends="VkFormat" offset="7"/>
			</require>
		</extension>
		<extension name="VK_NV_external_memory_capabilities" number="56" contact="James Jones @cubanismo" author="NV" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME" string="VK_NV_external_memory_capabilities"/>
				<defref name="VkExternalMemoryHandleTypeFlagsNV"/>
				<defref name="VkExternalMemoryHandleTypeFlagBitsNV"/>
				<defref name="VkExternalMemoryFeatureFlagsNV"/>
				<defref name="VkExternalMemoryFeatureFlagBitsNV"/>
				<defref name="VkExternalImageFormatPropertiesNV"/>
				<commandref name="vkGetPhysicalDeviceExternalImageFormatPropertiesNV"/>
			</require>
		</extension>
		<extension name="VK_NV_external_memory" number="57" contact="James Jones @cubanismo" requires="VK_NV_external_memory_capabilities" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_EXTERNAL_MEMORY_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME" string="VK_NV_external_memory"/>
				<enum name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV" extends="VkStructureType" offset="1"/>
				<defref name="VkExternalMemoryImageCreateInfoNV"/>
				<defref name="VkExportMemoryAllocateInfoNV"/>
			</require>
		</extension>
		<extension name="VK_NV_external_memory_win32" number="58" contact="James Jones @cubanismo" define="VK_USE_PLATFORM_WIN32_KHR" requires="VK_NV_external_memory" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME" string="VK_NV_external_memory_win32"/>
				<enum name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV" extends="VkStructureType" offset="1"/>
				<defref name="VkImportMemoryWin32HandleInfoNV"/>
				<defref name="VkExportMemoryWin32HandleInfoNV"/>
				<commandref name="vkGetMemoryWin32HandleNV"/>
			</require>
		</extension>
		<extension name="VK_NV_win32_keyed_mutex" number="59" contact="Carsten Rohde" define="VK_USE_PLATFORM_WIN32_KHR" requires="VK_NV_external_memory_win32" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME" string="VK_NV_win32_keyed_mutex"/>
				<enum name="VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV" extends="VkStructureType" offset="0"/>
				<defref name="VkWin32KeyedMutexAcquireReleaseInfoNV"/>
			</require>
		</extension>
		<extension name="VK_KHR_get_physical_device_properties2" number="60" contact="Jeff Bolz @jbolz" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME" string="VK_KHR_get_physical_device_properties2"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR" extends="VkStructureType" offset="3"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR" extends="VkStructureType" offset="4"/>
				<enum name="VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR" extends="VkStructureType" offset="5"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR" extends="VkStructureType" offset="6"/>
				<enum name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR" extends="VkStructureType" offset="7"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR" extends="VkStructureType" offset="8"/>
				<defref name="VkPhysicalDeviceFeatures2KHR"/>
				<defref name="VkPhysicalDeviceProperties2KHR"/>
				<defref name="VkFormatProperties2KHR"/>
				<defref name="VkImageFormatProperties2KHR"/>
				<defref name="VkPhysicalDeviceImageFormatInfo2KHR"/>
				<defref name="VkQueueFamilyProperties2KHR"/>
				<defref name="VkPhysicalDeviceMemoryProperties2KHR"/>
				<defref name="VkSparseImageFormatProperties2KHR"/>
				<defref name="VkPhysicalDeviceSparseImageFormatInfo2KHR"/>
				<commandref name="vkGetPhysicalDeviceFeatures2KHR"/>
				<commandref name="vkGetPhysicalDeviceProperties2KHR"/>
				<commandref name="vkGetPhysicalDeviceFormatProperties2KHR"/>
				<commandref name="vkGetPhysicalDeviceImageFormatProperties2KHR"/>
				<commandref name="vkGetPhysicalDeviceQueueFamilyProperties2KHR"/>
				<commandref name="vkGetPhysicalDeviceMemoryProperties2KHR"/>
				<commandref name="vkGetPhysicalDeviceSparseImageFormatProperties2KHR"/>
			</require>
		</extension>
		<extension name="VK_KHX_device_group" number="61" contact="Jeff Bolz @jbolz" requires="VK_KHX_device_group_creation" author="KHX" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHX_DEVICE_GROUP_SPEC_VERSION" number="2"/>
				<constant name="VK_KHX_DEVICE_GROUP_EXTENSION_NAME" string="VK_KHX_device_group"/>
				<enum name="VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHX" extends="VkStructureType" offset="0"/>
				<notation>offset 1 reserved for the old VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHX enum</notation>
				<notation>offset 2 reserved for the old VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHX enum</notation>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHX" extends="VkStructureType" offset="3"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHX" extends="VkStructureType" offset="4"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHX" extends="VkStructureType" offset="5"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHX" extends="VkStructureType" offset="6"/>
				<enum name="VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHX" extends="VkStructureType" offset="10"/>
				<defref name="VkPeerMemoryFeatureFlagsKHX"/>
				<defref name="VkPeerMemoryFeatureFlagBitsKHX"/>
				<defref name="VkMemoryAllocateFlagsKHX"/>
				<defref name="VkMemoryAllocateFlagBitsKHX"/>
				<defref name="VkMemoryAllocateFlagsInfoKHX"/>
				<defref name="VkDeviceGroupRenderPassBeginInfoKHX"/>
				<defref name="VkDeviceGroupCommandBufferBeginInfoKHX"/>
				<defref name="VkDeviceGroupSubmitInfoKHX"/>
				<defref name="VkDeviceGroupBindSparseInfoKHX"/>
				<commandref name="vkGetDeviceGroupPeerMemoryFeaturesKHX"/>
				<commandref name="vkCmdSetDeviceMaskKHX"/>
				<commandref name="vkCmdDispatchBaseKHX"/>
				<enum name="VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHX" extends="VkPipelineCreateFlagBits" bitpos="3"/>
				<enum name="VK_PIPELINE_CREATE_DISPATCH_BASE_KHX" extends="VkPipelineCreateFlagBits" bitpos="4"/>
				<enum name="VK_DEPENDENCY_DEVICE_GROUP_BIT_KHX" notation="Dependency is across devices" extends="VkDependencyFlagBits" bitpos="2"/>
			</require>
			<require extension="VK_KHR_bind_memory2">
				<enum name="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHX" extends="VkStructureType" offset="13"/>
				<enum name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHX" extends="VkStructureType" offset="14"/>
				<defref name="VkBindBufferMemoryDeviceGroupInfoKHX"/>
				<defref name="VkBindImageMemoryDeviceGroupInfoKHX"/>
				<enum name="VK_IMAGE_CREATE_BIND_SFR_BIT_KHX" notation="Allows using VkBindImageMemoryDeviceGroupInfoKHX::pSFRRects when binding memory to the image" extends="VkImageCreateFlagBits" bitpos="6"/>
			</require>
			<require extension="VK_KHR_surface">
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHX" extends="VkStructureType" offset="7"/>
				<defref name="VkDeviceGroupPresentModeFlagBitsKHX"/>
				<defref name="VkDeviceGroupPresentModeFlagsKHX"/>
				<defref name="VkDeviceGroupPresentCapabilitiesKHX"/>
				<commandref name="vkGetDeviceGroupPresentCapabilitiesKHX"/>
				<commandref name="vkGetDeviceGroupSurfacePresentModesKHX"/>
				<commandref name="vkGetPhysicalDevicePresentRectanglesKHX"/>
			</require>
			<require extension="VK_KHR_swapchain">
				<enum name="VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHX" extends="VkStructureType" offset="8"/>
				<enum name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHX" extends="VkStructureType" offset="9"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHX" extends="VkStructureType" offset="11"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHX" extends="VkStructureType" offset="12"/>
				<enum name="VK_SWAPCHAIN_CREATE_BIND_SFR_BIT_KHX" notation="Allow images with VK_IMAGE_CREATE_BIND_SFR_BIT_KHX" extends="VkSwapchainCreateFlagBitsKHR" bitpos="0"/>
				<defref name="VkImageSwapchainCreateInfoKHX"/>
				<defref name="VkBindImageMemorySwapchainInfoKHX"/>
				<defref name="VkAcquireNextImageInfoKHX"/>
				<defref name="VkDeviceGroupPresentInfoKHX"/>
				<defref name="VkDeviceGroupSwapchainCreateInfoKHX"/>
				<commandref name="vkAcquireNextImage2KHX"/>
			</require>
		</extension>
		<extension name="VK_EXT_validation_flags" number="62" contact="Tobin Ehlis @tobine" author="GOOGLE" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_EXT_VALIDATION_FLAGS_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME" string="VK_EXT_validation_flags"/>
				<enum name="VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT" extends="VkStructureType" offset="0"/>
				<defref name="VkValidationFlagsEXT"/>
			</require>
		</extension>
		<extension name="VK_NN_vi_surface" number="63" contact="Mathias Heyer @mheyer" define="VK_USE_PLATFORM_VI_NN" requires="VK_KHR_surface" author="NN" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_NN_VI_SURFACE_SPEC_VERSION" number="1"/>
				<constant name="VK_NN_VI_SURFACE_EXTENSION_NAME" string="VK_NN_vi_surface"/>
				<enum name="VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN" extends="VkStructureType" offset="0"/>
				<defref name="VkViSurfaceCreateFlagsNN"/>
				<defref name="VkViSurfaceCreateInfoNN"/>
				<commandref name="vkCreateViSurfaceNN"/>
			</require>
		</extension>
		<extension name="VK_KHR_shader_draw_parameters" number="64" contact="Daniel Koch @dgkoch" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME" string="VK_KHR_shader_draw_parameters"/>
			</require>
		</extension>
		<extension name="VK_EXT_shader_subgroup_ballot" number="65" contact="Daniel Koch @dgkoch" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME" string="VK_EXT_shader_subgroup_ballot"/>
			</require>
		</extension>
		<extension name="VK_EXT_shader_subgroup_vote" number="66" contact="Daniel Koch @dgkoch" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME" string="VK_EXT_shader_subgroup_vote"/>
			</require>
		</extension>
		<extension name="VK_ARM_extension_01" number="67" contact="Jan-Harald Fredriksen @janharald" author="ARM" disabled="true">
			<require>
				<constant name="VK_ARM_EXTENSION_01_SPEC_VERSION" number="0"/>
				<constant name="VK_ARM_EXTENSION_01_EXTENSION_NAME" string="VK_ARM_extension_01"/>
			</require>
		</extension>
		<extension name="VK_ARM_extension_02" number="68" contact="Jan-Harald Fredriksen @janharald" author="ARM" disabled="true">
			<require>
				<constant name="VK_ARM_EXTENSION_02_SPEC_VERSION" number="0"/>
				<constant name="VK_ARM_EXTENSION_02_EXTENSION_NAME" string="VK_ARM_extension_02"/>
			</require>
		</extension>
		<extension name="VK_IMG_extension_69" number="69" contact="Tobias Hector @tobias" author="IMG" disabled="true">
			<require>
				<constant name="VK_IMG_EXTENSION_69_SPEC_VERSION" number="0"/>
				<constant name="VK_IMG_EXTENSION_69_EXTENSION_NAME" string="VK_IMG_extension_69"/>
			</require>
		</extension>
		<extension name="VK_KHR_maintenance1" number="70" contact="Piers Daniell @pdaniell" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_MAINTENANCE1_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_MAINTENANCE1_EXTENSION_NAME" string="VK_KHR_maintenance1"/>
				<enum name="VK_ERROR_OUT_OF_POOL_MEMORY_KHR" extends="VkResult" offset="0" negate="true"/>
				<enum name="VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR" notation="Format can be used as the source image of image transfer commands" extends="VkFormatFeatureFlagBits" bitpos="14"/>
				<enum name="VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR" notation="Format can be used as the destination image of image transfer commands" extends="VkFormatFeatureFlagBits" bitpos="15"/>
				<enum name="VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR" notation="The 3D image can be viewed as a 2D or 2D array image" extends="VkImageCreateFlagBits" bitpos="5"/>
				<commandref name="vkTrimCommandPoolKHR"/>
			</require>
		</extension>
		<extension name="VK_KHX_device_group_creation" number="71" contact="Jeff Bolz @jbolz" author="KHX" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHX_DEVICE_GROUP_CREATION_SPEC_VERSION" number="1"/>
				<constant name="VK_KHX_DEVICE_GROUP_CREATION_EXTENSION_NAME" string="VK_KHX_device_group_creation"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHX" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHX" extends="VkStructureType" offset="1"/>
				<enumref name="VK_MAX_DEVICE_GROUP_SIZE_KHX"/>
				<defref name="VkPhysicalDeviceGroupPropertiesKHX"/>
				<defref name="VkDeviceGroupDeviceCreateInfoKHX"/>
				<commandref name="vkEnumeratePhysicalDeviceGroupsKHX"/>
				<enum name="VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHX" notation="If set, heap allocations allocate multiple instances by default" extends="VkMemoryHeapFlagBits" bitpos="1"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_memory_capabilities" number="72" contact="James Jones @cubanismo" requires="VK_KHR_get_physical_device_properties2" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME" string="VK_KHR_external_memory_capabilities"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR" extends="VkStructureType" offset="3"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR" extends="VkStructureType" offset="4"/>
				<enumref name="VK_LUID_SIZE_KHR"/>
				<defref name="VkExternalMemoryHandleTypeFlagsKHR"/>
				<defref name="VkExternalMemoryHandleTypeFlagBitsKHR"/>
				<defref name="VkExternalMemoryFeatureFlagsKHR"/>
				<defref name="VkExternalMemoryFeatureFlagBitsKHR"/>
				<defref name="VkExternalMemoryPropertiesKHR"/>
				<defref name="VkPhysicalDeviceExternalImageFormatInfoKHR"/>
				<defref name="VkExternalImageFormatPropertiesKHR"/>
				<defref name="VkPhysicalDeviceExternalBufferInfoKHR"/>
				<defref name="VkExternalBufferPropertiesKHR"/>
				<defref name="VkPhysicalDeviceIDPropertiesKHR"/>
				<commandref name="vkGetPhysicalDeviceExternalBufferPropertiesKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_memory" number="73" contact="James Jones @cubanismo" requires="VK_KHR_external_memory_capabilities" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME" string="VK_KHR_external_memory"/>
				<enum name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR" extends="VkStructureType" offset="2"/>
				<enum name="VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR" extends="VkResult" offset="3" negate="true"/>
				<enumref name="VK_QUEUE_FAMILY_EXTERNAL_KHR"/>
				<defref name="VkExternalMemoryImageCreateInfoKHR"/>
				<defref name="VkExternalMemoryBufferCreateInfoKHR"/>
				<defref name="VkExportMemoryAllocateInfoKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_memory_win32" number="74" contact="James Jones @cubanismo" define="VK_USE_PLATFORM_WIN32_KHR" requires="VK_KHR_external_memory" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME" string="VK_KHR_external_memory_win32"/>
				<enum name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR" extends="VkStructureType" offset="3"/>
				<defref name="VkImportMemoryWin32HandleInfoKHR"/>
				<defref name="VkExportMemoryWin32HandleInfoKHR"/>
				<defref name="VkMemoryWin32HandlePropertiesKHR"/>
				<defref name="VkMemoryGetWin32HandleInfoKHR"/>
				<commandref name="vkGetMemoryWin32HandleKHR"/>
				<commandref name="vkGetMemoryWin32HandlePropertiesKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_memory_fd" number="75" contact="James Jones @cubanismo" requires="VK_KHR_external_memory" author="KHX" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME" string="VK_KHR_external_memory_fd"/>
				<enum name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR" extends="VkStructureType" offset="2"/>
				<defref name="VkImportMemoryFdInfoKHR"/>
				<defref name="VkMemoryFdPropertiesKHR"/>
				<defref name="VkMemoryGetFdInfoKHR"/>
				<commandref name="vkGetMemoryFdKHR"/>
				<commandref name="vkGetMemoryFdPropertiesKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_win32_keyed_mutex" number="76" contact="Carsten Rohde" define="VK_USE_PLATFORM_WIN32_KHR" requires="VK_KHR_external_memory_win32" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME" string="VK_KHR_win32_keyed_mutex"/>
				<enum name="VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkWin32KeyedMutexAcquireReleaseInfoKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_semaphore_capabilities" number="77" contact="James Jones @cubanismo" requires="VK_KHR_get_physical_device_properties2" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME" string="VK_KHR_external_semaphore_capabilities"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR" extends="VkStructureType" offset="1"/>
				<enumref name="VK_LUID_SIZE_KHR"/>
				<defref name="VkExternalSemaphoreHandleTypeFlagsKHR"/>
				<defref name="VkExternalSemaphoreHandleTypeFlagBitsKHR"/>
				<defref name="VkExternalSemaphoreFeatureFlagsKHR"/>
				<defref name="VkExternalSemaphoreFeatureFlagBitsKHR"/>
				<defref name="VkPhysicalDeviceExternalSemaphoreInfoKHR"/>
				<defref name="VkExternalSemaphorePropertiesKHR"/>
				<defref name="VkPhysicalDeviceIDPropertiesKHR"/>
				<commandref name="vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_semaphore" number="78" contact="James Jones @cubanismo" requires="VK_KHR_external_semaphore_capabilities" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME" string="VK_KHR_external_semaphore"/>
				<enum name="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkSemaphoreImportFlagsKHR"/>
				<defref name="VkSemaphoreImportFlagBitsKHR"/>
				<defref name="VkExportSemaphoreCreateInfoKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_semaphore_win32" number="79" contact="James Jones @cubanismo" define="VK_USE_PLATFORM_WIN32_KHR" requires="VK_KHR_external_semaphore" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME" string="VK_KHR_external_semaphore_win32"/>
				<enum name="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR" extends="VkStructureType" offset="3"/>
				<defref name="VkImportSemaphoreWin32HandleInfoKHR"/>
				<defref name="VkExportSemaphoreWin32HandleInfoKHR"/>
				<defref name="VkD3D12FenceSubmitInfoKHR"/>
				<defref name="VkSemaphoreGetWin32HandleInfoKHR"/>
				<commandref name="vkImportSemaphoreWin32HandleKHR"/>
				<commandref name="vkGetSemaphoreWin32HandleKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_semaphore_fd" number="80" contact="James Jones @cubanismo" requires="VK_KHR_external_semaphore" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME" string="VK_KHR_external_semaphore_fd"/>
				<enum name="VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR" extends="VkStructureType" offset="1"/>
				<defref name="VkImportSemaphoreFdInfoKHR"/>
				<defref name="VkSemaphoreGetFdInfoKHR"/>
				<commandref name="vkImportSemaphoreFdKHR"/>
				<commandref name="vkGetSemaphoreFdKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_push_descriptor" number="81" contact="Jeff Bolz @jbolz" requires="VK_KHR_get_physical_device_properties2" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME" string="VK_KHR_push_descriptor"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR" notation="Descriptors are pushed via flink:vkCmdPushDescriptorSetKHR" extends="VkDescriptorSetLayoutCreateFlagBits" bitpos="0"/>
				<commandref name="vkCmdPushDescriptorSetKHR"/>
				<defref name="VkPhysicalDevicePushDescriptorPropertiesKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_extension_82" number="82" contact="Jeff Bolz @jbolz" author="KHR" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_82_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_82_EXTENSION_NAME" string="VK_KHR_extension_82"/>
			</require>
		</extension>
		<extension name="VK_KHR_extension_83" number="83" contact="Jan-Harald Fredriksen @janharald" author="KHR" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_83_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_83_EXTENSION_NAME" string="VK_KHR_extension_83"/>
			</require>
		</extension>
		<extension name="VK_KHR_16bit_storage" number="84" contact="Jan-Harald Fredriksen @janharald" requires="VK_KHR_get_physical_device_properties2,VK_KHR_storage_buffer_storage_class" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_16BIT_STORAGE_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_16BIT_STORAGE_EXTENSION_NAME" string="VK_KHR_16bit_storage"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkPhysicalDevice16BitStorageFeaturesKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_incremental_present" number="85" contact="Ian Elliott ianelliott@google.com" requires="VK_KHR_swapchain" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME" string="VK_KHR_incremental_present"/>
				<enum name="VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkPresentRegionsKHR"/>
				<defref name="VkPresentRegionKHR"/>
				<defref name="VkRectLayerKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_descriptor_update_template" number="86" contact="Markus Tavenrath @mtavenrath" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME" string="VK_KHR_descriptor_update_template"/>
				<enum name="VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT" extends="VkDebugReportObjectTypeEXT" offset="0"/>
				<enum name="VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR" notation="VkDescriptorUpdateTemplateKHR" extends="VkObjectType" offset="0"/>
				<commandref name="vkCreateDescriptorUpdateTemplateKHR"/>
				<commandref name="vkDestroyDescriptorUpdateTemplateKHR"/>
				<commandref name="vkUpdateDescriptorSetWithTemplateKHR"/>
				<commandref name="vkCmdPushDescriptorSetWithTemplateKHR"/>
				<defref name="VkDescriptorUpdateTemplateKHR"/>
				<defref name="VkDescriptorUpdateTemplateCreateFlagsKHR"/>
				<defref name="VkDescriptorUpdateTemplateTypeKHR"/>
				<defref name="VkDescriptorUpdateTemplateEntryKHR"/>
				<defref name="VkDescriptorUpdateTemplateCreateInfoKHR"/>
			</require>
		</extension>
		<extension name="VK_NVX_device_generated_commands" number="87" contact="Christoph Kubisch @pixeljetstream" author="NVX" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION" number="3"/>
				<constant name="VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME" string="VK_NVX_device_generated_commands"/>
				<enum name="VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX" extends="VkStructureType" offset="3"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX" extends="VkStructureType" offset="4"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX" extends="VkStructureType" offset="5"/>
				<enum name="VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX" extends="VkPipelineStageFlagBits" bitpos="17"/>
				<enum name="VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX" extends="VkAccessFlagBits" bitpos="17"/>
				<enum name="VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX" extends="VkAccessFlagBits" bitpos="18"/>
				<enum name="VK_OBJECT_TYPE_OBJECT_TABLE_NVX" notation="VkobjectTableNVX" extends="VkObjectType" offset="0"/>
				<enum name="VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX" notation="VkIndirectCommandsLayoutNVX" extends="VkObjectType" offset="1"/>
				<defref name="VkObjectTableNVX"/>
				<defref name="VkIndirectCommandsLayoutNVX"/>
				<defref name="VkIndirectCommandsLayoutUsageFlagsNVX"/>
				<defref name="VkObjectEntryUsageFlagsNVX"/>
				<defref name="VkIndirectCommandsLayoutUsageFlagBitsNVX"/>
				<defref name="VkIndirectCommandsTokenTypeNVX"/>
				<defref name="VkObjectEntryUsageFlagBitsNVX"/>
				<defref name="VkObjectEntryTypeNVX"/>
				<defref name="VkDeviceGeneratedCommandsFeaturesNVX"/>
				<defref name="VkDeviceGeneratedCommandsLimitsNVX"/>
				<defref name="VkIndirectCommandsTokenNVX"/>
				<defref name="VkIndirectCommandsLayoutTokenNVX"/>
				<defref name="VkIndirectCommandsLayoutCreateInfoNVX"/>
				<defref name="VkCmdProcessCommandsInfoNVX"/>
				<defref name="VkCmdReserveSpaceForCommandsInfoNVX"/>
				<defref name="VkObjectTableCreateInfoNVX"/>
				<defref name="VkObjectTableEntryNVX"/>
				<defref name="VkObjectTablePipelineEntryNVX"/>
				<defref name="VkObjectTableDescriptorSetEntryNVX"/>
				<defref name="VkObjectTableVertexBufferEntryNVX"/>
				<defref name="VkObjectTableIndexBufferEntryNVX"/>
				<defref name="VkObjectTablePushConstantEntryNVX"/>
				<commandref name="vkCmdProcessCommandsNVX"/>
				<commandref name="vkCmdReserveSpaceForCommandsNVX"/>
				<commandref name="vkCreateIndirectCommandsLayoutNVX"/>
				<commandref name="vkDestroyIndirectCommandsLayoutNVX"/>
				<commandref name="vkCreateObjectTableNVX"/>
				<commandref name="vkDestroyObjectTableNVX"/>
				<commandref name="vkRegisterObjectsNVX"/>
				<commandref name="vkUnregisterObjectsNVX"/>
				<commandref name="vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX"/>
			</require>
		</extension>
		<extension name="VK_NV_clip_space_w_scaling" number="88" contact="Eric Werness @ewerness" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME" string="VK_NV_clip_space_w_scaling"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV" extends="VkStructureType" offset="0"/>
				<enum name="VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV" extends="VkDynamicState" offset="0"/>
				<defref name="VkViewportWScalingNV"/>
				<defref name="VkPipelineViewportWScalingStateCreateInfoNV"/>
				<commandref name="vkCmdSetViewportWScalingNV"/>
			</require>
		</extension>
		<extension name="VK_EXT_direct_mode_display" number="89" contact="James Jones @cubanismo" requires="VK_KHR_display" author="NV" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME" string="VK_EXT_direct_mode_display"/>
				<commandref name="vkReleaseDisplayEXT"/>
			</require>
		</extension>
		<extension name="VK_EXT_acquire_xlib_display" number="90" contact="James Jones @cubanismo" define="VK_USE_PLATFORM_XLIB_XRANDR_EXT" requires="VK_EXT_direct_mode_display" author="NV" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME" string="VK_EXT_acquire_xlib_display"/>
				<commandref name="vkAcquireXlibDisplayEXT"/>
				<commandref name="vkGetRandROutputDisplayEXT"/>
			</require>
		</extension>
		<extension name="VK_EXT_display_surface_counter" number="91" contact="James Jones @cubanismo" requires="VK_KHR_display" author="NV" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME" string="VK_EXT_display_surface_counter"/>
				<enum name="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT" extends="VkStructureType" offset="0"/>
				<constant name="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT" enumref="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT"/>
				<defref name="VkSurfaceCounterFlagsEXT"/>
				<defref name="VkSurfaceCounterFlagBitsEXT"/>
				<defref name="VkSurfaceCapabilities2EXT"/>
				<commandref name="vkGetPhysicalDeviceSurfaceCapabilities2EXT"/>
			</require>
		</extension>
		<extension name="VK_EXT_display_control" number="92" contact="James Jones @cubanismo" requires="VK_EXT_display_surface_counter,VK_KHR_swapchain" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_DISPLAY_CONTROL_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME" string="VK_EXT_display_control"/>
				<enum name="VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT" extends="VkStructureType" offset="3"/>
				<defref name="VkDisplayPowerStateEXT"/>
				<defref name="VkDeviceEventTypeEXT"/>
				<defref name="VkDisplayEventTypeEXT"/>
				<defref name="VkDisplayPowerInfoEXT"/>
				<defref name="VkDeviceEventInfoEXT"/>
				<defref name="VkDisplayEventInfoEXT"/>
				<defref name="VkSwapchainCounterCreateInfoEXT"/>
				<commandref name="vkDisplayPowerControlEXT"/>
				<commandref name="vkRegisterDeviceEventEXT"/>
				<commandref name="vkRegisterDisplayEventEXT"/>
				<commandref name="vkGetSwapchainCounterEXT"/>
			</require>
		</extension>
		<extension name="VK_GOOGLE_display_timing" number="93" contact="Ian Elliott ianelliott@google.com" requires="VK_KHR_swapchain" author="GOOGLE" match-api="vulkan" type="device">
			<require>
				<constant name="VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION" number="1"/>
				<constant name="VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME" string="VK_GOOGLE_display_timing"/>
				<enum name="VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE" extends="VkStructureType" offset="0"/>
				<defref name="VkRefreshCycleDurationGOOGLE"/>
				<defref name="VkPastPresentationTimingGOOGLE"/>
				<defref name="VkPresentTimesInfoGOOGLE"/>
				<defref name="VkPresentTimeGOOGLE"/>
				<commandref name="vkGetRefreshCycleDurationGOOGLE"/>
				<commandref name="vkGetPastPresentationTimingGOOGLE"/>
			</require>
		</extension>
		<extension name="VK_KHR_extension_94" number="94" contact="Neil Henning @neil_henning" author="Codeplay" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_94_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_94_EXTENSION_NAME" string="VK_KHR_extension_94"/>
			</require>
		</extension>
		<extension name="VK_NV_sample_mask_override_coverage" number="95" contact="Piers Daniell @pdaniell" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME" string="VK_NV_sample_mask_override_coverage"/>
			</require>
		</extension>
		<extension name="VK_NV_geometry_shader_passthrough" number="96" contact="Daniel Koch @dgkoch" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME" string="VK_NV_geometry_shader_passthrough"/>
			</require>
		</extension>
		<extension name="VK_NV_viewport_array2" number="97" contact="Daniel Koch @dgkoch" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME" string="VK_NV_viewport_array2"/>
			</require>
		</extension>
		<extension name="VK_NVX_multiview_per_view_attributes" number="98" contact="Jeff Bolz @jbolz" requires="VK_KHX_multiview" author="NVX" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION" number="1"/>
				<constant name="VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME" string="VK_NVX_multiview_per_view_attributes"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX" extends="VkStructureType" offset="0"/>
				<enum name="VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX" extends="VkSubpassDescriptionFlagBits" bitpos="0"/>
				<enum name="VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX" extends="VkSubpassDescriptionFlagBits" bitpos="1"/>
				<defref name="VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"/>
			</require>
		</extension>
		<extension name="VK_NV_viewport_swizzle" number="99" contact="Piers Daniell @pdaniell" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME" string="VK_NV_viewport_swizzle"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV" extends="VkStructureType" offset="0"/>
				<defref name="VkViewportSwizzleNV"/>
				<defref name="VkViewportCoordinateSwizzleNV"/>
				<defref name="VkPipelineViewportSwizzleStateCreateInfoNV"/>
				<defref name="VkPipelineViewportSwizzleStateCreateFlagsNV"/>
			</require>
		</extension>
		<extension name="VK_EXT_discard_rectangles" number="100" contact="Piers Daniell @pdaniell" requires="VK_KHR_get_physical_device_properties2" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME" string="VK_EXT_discard_rectangles"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT" extends="VkStructureType" offset="1"/>
				<enum name="VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT" extends="VkDynamicState" offset="0"/>
				<defref name="VkPhysicalDeviceDiscardRectanglePropertiesEXT"/>
				<defref name="VkPipelineDiscardRectangleStateCreateInfoEXT"/>
				<defref name="VkPipelineDiscardRectangleStateCreateFlagsEXT"/>
				<defref name="VkDiscardRectangleModeEXT"/>
				<commandref name="vkCmdSetDiscardRectangleEXT"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_101" number="101" contact="Daniel Koch @dgkoch" author="NV" disabled="true">
			<require>
				<constant name="VK_NV_EXTENSION_101_SPEC_VERSION" number="0"/>
				<constant name="VK_NV_EXTENSION_101_EXTENSION_NAME" string="VK_NV_extension_101"/>
			</require>
		</extension>
		<extension name="VK_EXT_conservative_rasterization" number="102" contact="Piers Daniell @pdaniell" requires="VK_KHR_get_physical_device_properties2" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME" string="VK_EXT_conservative_rasterization"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT" extends="VkStructureType" offset="1"/>
				<defref name="VkPhysicalDeviceConservativeRasterizationPropertiesEXT"/>
				<defref name="VkPipelineRasterizationConservativeStateCreateInfoEXT"/>
				<defref name="VkPipelineRasterizationConservativeStateCreateFlagsEXT"/>
				<defref name="VkConservativeRasterizationModeEXT"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_103" number="103" contact="Daniel Koch @dgkoch" author="NV" disabled="true">
			<require>
				<constant name="VK_NV_EXTENSION_103_SPEC_VERSION" number="0"/>
				<constant name="VK_NV_EXTENSION_103_EXTENSION_NAME" string="VK_NV_extension_103"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_104" number="104" contact="Mathias Schott @mschott" author="NV" disabled="true">
			<require>
				<constant name="VK_NV_EXTENSION_104_SPEC_VERSION" number="0"/>
				<constant name="VK_NV_EXTENSION_104_EXTENSION_NAME" string="VK_NV_extension_104"/>
			</require>
		</extension>
		<extension name="VK_EXT_swapchain_colorspace" number="105" contact="Courtney Goeltzenleuchter @courtneygo" requires="VK_KHR_surface" author="GOOGLE" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION" number="3"/>
				<constant name="VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME" string="VK_EXT_swapchain_colorspace"/>
				<enum name="VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT" extends="VkColorSpaceKHR" offset="1"/>
				<enum name="VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT" extends="VkColorSpaceKHR" offset="2"/>
				<enum name="VK_COLOR_SPACE_DCI_P3_LINEAR_EXT" extends="VkColorSpaceKHR" offset="3"/>
				<enum name="VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT" extends="VkColorSpaceKHR" offset="4"/>
				<enum name="VK_COLOR_SPACE_BT709_LINEAR_EXT" extends="VkColorSpaceKHR" offset="5"/>
				<enum name="VK_COLOR_SPACE_BT709_NONLINEAR_EXT" extends="VkColorSpaceKHR" offset="6"/>
				<enum name="VK_COLOR_SPACE_BT2020_LINEAR_EXT" extends="VkColorSpaceKHR" offset="7"/>
				<enum name="VK_COLOR_SPACE_HDR10_ST2084_EXT" extends="VkColorSpaceKHR" offset="8"/>
				<enum name="VK_COLOR_SPACE_DOLBYVISION_EXT" extends="VkColorSpaceKHR" offset="9"/>
				<enum name="VK_COLOR_SPACE_HDR10_HLG_EXT" extends="VkColorSpaceKHR" offset="10"/>
				<enum name="VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT" extends="VkColorSpaceKHR" offset="11"/>
				<enum name="VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT" extends="VkColorSpaceKHR" offset="12"/>
				<enum name="VK_COLOR_SPACE_PASS_THROUGH_EXT" extends="VkColorSpaceKHR" offset="13"/>
				<enum name="VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT" extends="VkColorSpaceKHR" offset="14"/>
			</require>
		</extension>
		<extension name="VK_EXT_hdr_metadata" number="106" contact="Courtney Goeltzenleuchter @courtneygo" requires="VK_KHR_swapchain" author="GOOGLE" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_HDR_METADATA_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_HDR_METADATA_EXTENSION_NAME" string="VK_EXT_hdr_metadata"/>
				<enum name="VK_STRUCTURE_TYPE_HDR_METADATA_EXT" extends="VkStructureType" offset="0"/>
				<defref name="VkHdrMetadataEXT"/>
				<defref name="VkXYColorEXT"/>
				<commandref name="vkSetHdrMetadataEXT"/>
			</require>
		</extension>
		<extension name="VK_IMG_extension_107" number="107" contact="Michael Worcester @michaelworcester" author="IMG" disabled="true">
			<require>
				<constant name="VK_IMG_EXTENSION_107_SPEC_VERSION" number="0"/>
				<constant name="VK_IMG_EXTENSION_107_EXTENSION_NAME" string="VK_IMG_extension_107"/>
			</require>
		</extension>
		<extension name="VK_IMG_extension_108" number="108" contact="Michael Worcester @michaelworcester" author="IMG" disabled="true">
			<require>
				<constant name="VK_IMG_EXTENSION_108_SPEC_VERSION" number="0"/>
				<constant name="VK_IMG_EXTENSION_108_EXTENSION_NAME" string="VK_IMG_extension_108"/>
			</require>
		</extension>
		<extension name="VK_IMG_extension_109" number="109" contact="Michael Worcester @michaelworcester" author="IMG" disabled="true">
			<require>
				<constant name="VK_IMG_EXTENSION_109_SPEC_VERSION" number="0"/>
				<constant name="VK_IMG_EXTENSION_109_EXTENSION_NAME" string="VK_IMG_extension_109"/>
			</require>
		</extension>
		<extension name="VK_IMG_extension_110" number="110" contact="Michael Worcester @michaelworcester" author="IMG" disabled="true">
			<require>
				<constant name="VK_IMG_EXTENSION_110_SPEC_VERSION" number="0"/>
				<constant name="VK_IMG_EXTENSION_110_EXTENSION_NAME" string="VK_IMG_extension_110"/>
			</require>
		</extension>
		<extension name="VK_IMG_extension_111" number="111" contact="Michael Worcester @michaelworcester" author="IMG" disabled="true">
			<require>
				<constant name="VK_IMG_EXTENSION_111_SPEC_VERSION" number="0"/>
				<constant name="VK_IMG_EXTENSION_111_EXTENSION_NAME" string="VK_IMG_extension_111"/>
			</require>
		</extension>
		<extension name="VK_KHR_shared_presentable_image" number="112" contact="Alon Or-bach @alonorbach" requires="VK_KHR_swapchain,VK_KHR_get_physical_device_properties2,VK_KHR_get_surface_capabilities2" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME" string="VK_KHR_shared_presentable_image"/>
				<enum name="VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR" extends="VkPresentModeKHR" offset="0"/>
				<enum name="VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR" extends="VkPresentModeKHR" offset="1"/>
				<enum name="VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR" extends="VkImageLayout" offset="0"/>
				<defref name="VkSharedPresentSurfaceCapabilitiesKHR"/>
				<commandref name="vkGetSwapchainStatusKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_fence_capabilities" number="113" contact="Jesse Hall @jessehall" requires="VK_KHR_get_physical_device_properties2" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME" string="VK_KHR_external_fence_capabilities"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR" extends="VkStructureType" offset="1"/>
				<enumref name="VK_LUID_SIZE_KHR"/>
				<defref name="VkExternalFenceHandleTypeFlagsKHR"/>
				<defref name="VkExternalFenceHandleTypeFlagBitsKHR"/>
				<defref name="VkExternalFenceFeatureFlagsKHR"/>
				<defref name="VkExternalFenceFeatureFlagBitsKHR"/>
				<defref name="VkPhysicalDeviceExternalFenceInfoKHR"/>
				<defref name="VkExternalFencePropertiesKHR"/>
				<defref name="VkPhysicalDeviceIDPropertiesKHR"/>
				<commandref name="vkGetPhysicalDeviceExternalFencePropertiesKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_fence" number="114" contact="Jesse Hall @jessehall" requires="VK_KHR_external_fence_capabilities" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_EXTERNAL_FENCE_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME" string="VK_KHR_external_fence"/>
				<enum name="VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkFenceImportFlagsKHR"/>
				<defref name="VkFenceImportFlagBitsKHR"/>
				<defref name="VkExportFenceCreateInfoKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_fence_win32" number="115" contact="Jesse Hall @jessehall" define="VK_USE_PLATFORM_WIN32_KHR" requires="VK_KHR_external_fence" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME" string="VK_KHR_external_fence_win32"/>
				<enum name="VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR" extends="VkStructureType" offset="2"/>
				<defref name="VkImportFenceWin32HandleInfoKHR"/>
				<defref name="VkExportFenceWin32HandleInfoKHR"/>
				<defref name="VkFenceGetWin32HandleInfoKHR"/>
				<commandref name="vkImportFenceWin32HandleKHR"/>
				<commandref name="vkGetFenceWin32HandleKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_external_fence_fd" number="116" contact="Jesse Hall @jessehall" requires="VK_KHR_external_fence" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME" string="VK_KHR_external_fence_fd"/>
				<enum name="VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR" extends="VkStructureType" offset="1"/>
				<defref name="VkImportFenceFdInfoKHR"/>
				<defref name="VkFenceGetFdInfoKHR"/>
				<commandref name="vkImportFenceFdKHR"/>
				<commandref name="vkGetFenceFdKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_extension_117" number="117" contact="Kenneth Benzie @kbenzie" author="KHR" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_117_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_117_EXTENSION_NAME" string="VK_KHR_extension_117"/>
			</require>
		</extension>
		<extension name="VK_KHR_maintenance2" number="118" contact="Michael Worcester @michaelworcester" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_MAINTENANCE2_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_MAINTENANCE2_EXTENSION_NAME" string="VK_KHR_maintenance2"/>
				<enum name="VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR" extends="VkImageCreateFlagBits" bitpos="7"/>
				<enum name="VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR" extends="VkImageCreateFlagBits" bitpos="8"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR" extends="VkStructureType" offset="3"/>
				<enum name="VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR" extends="VkImageLayout" offset="0"/>
				<enum name="VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR" extends="VkImageLayout" offset="1"/>
				<defref name="VkPhysicalDevicePointClippingPropertiesKHR"/>
				<defref name="VkPointClippingBehaviorKHR"/>
				<defref name="VkRenderPassInputAttachmentAspectCreateInfoKHR"/>
				<defref name="VkInputAttachmentAspectReferenceKHR"/>
				<defref name="VkImageViewUsageCreateInfoKHR"/>
				<defref name="VkTessellationDomainOriginKHR"/>
				<defref name="VkPipelineTessellationDomainOriginStateCreateInfoKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_extension_119" number="119" contact="Michael Worcester @michaelworcester" author="KHR" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_119_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_119_EXTENSION_NAME" string="VK_KHR_extension_119"/>
			</require>
		</extension>
		<extension name="VK_KHR_get_surface_capabilities2" number="120" contact="James Jones @cubanismo" requires="VK_KHR_surface" author="KHR" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME" string="VK_KHR_get_surface_capabilities2"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR" extends="VkStructureType" offset="2"/>
				<defref name="VkPhysicalDeviceSurfaceInfo2KHR"/>
				<defref name="VkSurfaceCapabilities2KHR"/>
				<defref name="VkSurfaceFormat2KHR"/>
				<commandref name="vkGetPhysicalDeviceSurfaceCapabilities2KHR"/>
				<commandref name="vkGetPhysicalDeviceSurfaceFormats2KHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_variable_pointers" number="121" contact="Jesse Hall @jessehall" requires="VK_KHR_get_physical_device_properties2,VK_KHR_storage_buffer_storage_class" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_VARIABLE_POINTERS_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME" string="VK_KHR_variable_pointers"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkPhysicalDeviceVariablePointerFeaturesKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_extension_122" number="122" contact="James Jones @cubanismo" author="KHR" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_122_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_122_EXTENSION_NAME" string="VK_KHR_extension_122"/>
			</require>
		</extension>
		<extension name="VK_MVK_ios_surface" number="123" contact="Bill Hollings @billhollings" define="VK_USE_PLATFORM_IOS_MVK" requires="VK_KHR_surface" author="MVK" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_MVK_IOS_SURFACE_SPEC_VERSION" number="2"/>
				<constant name="VK_MVK_IOS_SURFACE_EXTENSION_NAME" string="VK_MVK_ios_surface"/>
				<enum name="VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK" extends="VkStructureType" offset="0"/>
				<defref name="VkIOSSurfaceCreateFlagsMVK"/>
				<defref name="VkIOSSurfaceCreateInfoMVK"/>
				<commandref name="vkCreateIOSSurfaceMVK"/>
			</require>
		</extension>
		<extension name="VK_MVK_macos_surface" number="124" contact="Bill Hollings @billhollings" define="VK_USE_PLATFORM_MACOS_MVK" requires="VK_KHR_surface" author="MVK" match-api="vulkan" type="instance">
			<require>
				<constant name="VK_MVK_MACOS_SURFACE_SPEC_VERSION" number="2"/>
				<constant name="VK_MVK_MACOS_SURFACE_EXTENSION_NAME" string="VK_MVK_macos_surface"/>
				<enum name="VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK" extends="VkStructureType" offset="0"/>
				<defref name="VkMacOSSurfaceCreateFlagsMVK"/>
				<defref name="VkMacOSSurfaceCreateInfoMVK"/>
				<commandref name="vkCreateMacOSSurfaceMVK"/>
			</require>
		</extension>
		<extension name="VK_MVK_moltenvk" number="125" contact="Bill Hollings @billhollings" author="MVK" disabled="true">
			<require>
				<constant name="VK_MVK_MOLTENVK_SPEC_VERSION" number="0"/>
				<constant name="VK_MVK_MOLTENVK_EXTENSION_NAME" string="VK_MVK_moltenvk"/>
			</require>
		</extension>
		<extension name="VK_EXT_external_memory_dma_buf" number="126" contact="Chad Versace @chadversary" requires="VK_KHR_external_memory_fd" author="EXT" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME" string="VK_EXT_external_memory_dma_buf"/>
				<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT" extends="VkExternalMemoryHandleTypeFlagBitsKHR" bitpos="9"/>
			</require>
		</extension>
		<extension name="VK_EXT_queue_family_foreign" number="127" contact="Chad Versace @chadversary" requires="VK_KHR_external_memory" author="EXT" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME" string="VK_EXT_queue_family_foreign"/>
				<enumref name="VK_QUEUE_FAMILY_FOREIGN_EXT"/>
			</require>
		</extension>
		<extension name="VK_KHR_dedicated_allocation" number="128" contact="James Jones @cubanismo" requires="VK_KHR_get_memory_requirements2" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION" number="3"/>
				<constant name="VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME" string="VK_KHR_dedicated_allocation"/>
				<enum name="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR" extends="VkStructureType" offset="1"/>
				<defref name="VkMemoryDedicatedRequirementsKHR"/>
				<defref name="VkMemoryDedicatedAllocateInfoKHR"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_129" number="129" contact="Mark Young @MarkY_LunarG" author="LUNARG" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_129_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_129_EXTENSION_NAME" string="VK_EXT_extension_129"/>
			</require>
		</extension>
		<extension name="VK_KHR_extension_130" number="130" contact="Jesse Hall @jessehall" author="KHR" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_130_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_130_EXTENSION_NAME" string="VK_KHR_extension_130"/>
			</require>
		</extension>
		<extension name="VK_EXT_sampler_filter_minmax" number="131" contact="Jeff Bolz @jbolz" requires="VK_KHR_get_physical_device_properties2" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME" string="VK_EXT_sampler_filter_minmax"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT" extends="VkStructureType" offset="1"/>
				<enum name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT" notation="Format can be used with min/max reduction filtering" extends="VkFormatFeatureFlagBits" bitpos="16"/>
				<defref name="VkSamplerReductionModeEXT"/>
				<defref name="VkSamplerReductionModeCreateInfoEXT"/>
				<defref name="VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT"/>
			</require>
		</extension>
		<extension name="VK_KHR_storage_buffer_storage_class" number="132" contact="Alexander Galazin @debater" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME" string="VK_KHR_storage_buffer_storage_class"/>
			</require>
		</extension>
		<extension name="VK_AMD_gpu_shader_int16" number="133" contact="quentin.lin@amd.com" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_GPU_SHADER_INT16_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME" string="VK_AMD_gpu_shader_int16"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_134" number="134" contact="Mais Alnasser @malnasse" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_134_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_134_EXTENSION_NAME" string="VK_AMD_extension_134"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_135" number="135" contact="Mais Alnasser @malnasse" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_135_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_135_EXTENSION_NAME" string="VK_AMD_extension_135"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_136" number="136" contact="Mais Alnasser @malnasse" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_136_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_136_EXTENSION_NAME" string="VK_AMD_extension_136"/>
			</require>
		</extension>
		<extension name="VK_AMD_mixed_attachment_samples" number="137" contact="Matthaeus G. Chajdas @anteru" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME" string="VK_AMD_mixed_attachment_samples"/>
			</require>
		</extension>
		<extension name="VK_AMD_shader_fragment_mask" number="138" contact="Aaron Hagan @ahagan" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME" string="VK_AMD_shader_fragment_mask"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_139" number="139" contact="Mais Alnasser @malnasse" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_139_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_139_EXTENSION_NAME" string="VK_AMD_extension_139"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_140" number="140" contact="Mais Alnasser @malnasse" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_140_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_140_EXTENSION_NAME" string="VK_AMD_extension_140"/>
			</require>
		</extension>
		<extension name="VK_EXT_shader_stencil_export" number="141" contact="dominik.witczak@amd.com" author="EXT" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME" string="VK_EXT_shader_stencil_export"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_142" number="142" contact="Mais Alnasser @malnasse" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_142_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_142_EXTENSION_NAME" string="VK_AMD_extension_142"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_143" number="143" contact="Mais Alnasser @malnasse" author="AMD" disabled="true">
			<require>
				<constant name="VK_AMD_EXTENSION_143_SPEC_VERSION" number="0"/>
				<constant name="VK_AMD_EXTENSION_143_EXTENSION_NAME" string="VK_AMD_extension_143"/>
			</require>
		</extension>
		<extension name="VK_EXT_sample_locations" number="144" contact="Daniel Rakos @aqnuep" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME" string="VK_EXT_sample_locations"/>
				<enum name="VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT" extends="VkImageCreateFlagBits" bitpos="12"/>
				<enum name="VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT" extends="VkStructureType" offset="3"/>
				<enum name="VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT" extends="VkStructureType" offset="4"/>
				<enum name="VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT" extends="VkDynamicState" offset="0"/>
				<defref name="VkSampleLocationEXT"/>
				<defref name="VkSampleLocationsInfoEXT"/>
				<defref name="VkAttachmentSampleLocationsEXT"/>
				<defref name="VkSubpassSampleLocationsEXT"/>
				<defref name="VkRenderPassSampleLocationsBeginInfoEXT"/>
				<defref name="VkPipelineSampleLocationsStateCreateInfoEXT"/>
				<defref name="VkPhysicalDeviceSampleLocationsPropertiesEXT"/>
				<defref name="VkMultisamplePropertiesEXT"/>
				<commandref name="vkCmdSetSampleLocationsEXT"/>
				<commandref name="vkGetPhysicalDeviceMultisamplePropertiesEXT"/>
			</require>
		</extension>
		<extension name="VK_KHR_relaxed_block_layout" number="145" contact="John Kessenich @johnk" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME" string="VK_KHR_relaxed_block_layout"/>
			</require>
		</extension>
		<extension name="VK_KHR_extension_146" number="146" contact="Bill Licea-Kane @billl" author="KHR" disabled="true">
			<require>
				<constant name="VK_KHR_extension_146_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_extension_146_EXTENSION_NAME" string="VK_KHR_extension_146"/>
			</require>
		</extension>
		<extension name="VK_KHR_get_memory_requirements2" number="147" contact="Jason Ekstrand @jekstrand" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME" string="VK_KHR_get_memory_requirements2"/>
				<enum name="VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR" extends="VkStructureType" offset="3"/>
				<enum name="VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR" extends="VkStructureType" offset="4"/>
				<defref name="VkBufferMemoryRequirementsInfo2KHR"/>
				<defref name="VkImageMemoryRequirementsInfo2KHR"/>
				<defref name="VkImageSparseMemoryRequirementsInfo2KHR"/>
				<defref name="VkMemoryRequirements2KHR"/>
				<defref name="VkSparseImageMemoryRequirements2KHR"/>
				<commandref name="vkGetImageMemoryRequirements2KHR"/>
				<commandref name="vkGetBufferMemoryRequirements2KHR"/>
				<commandref name="vkGetImageSparseMemoryRequirements2KHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_image_format_list" number="148" contact="Jason Ekstrand @jekstrand" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME" string="VK_KHR_image_format_list"/>
				<enum name="VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<defref name="VkImageFormatListCreateInfoKHR"/>
			</require>
		</extension>
		<extension name="VK_EXT_blend_operation_advanced" number="149" contact="Jeff Bolz @jbolz" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION" number="2"/>
				<constant name="VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME" string="VK_EXT_blend_operation_advanced"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT" extends="VkStructureType" offset="2"/>
				<defref name="VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"/>
				<defref name="VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"/>
				<defref name="VkPipelineColorBlendAdvancedStateCreateInfoEXT"/>
				<defref name="VkBlendOverlapEXT"/>
				<enum name="VK_BLEND_OP_ZERO_EXT" extends="VkBlendOp" offset="0"/>
				<enum name="VK_BLEND_OP_SRC_EXT" extends="VkBlendOp" offset="1"/>
				<enum name="VK_BLEND_OP_DST_EXT" extends="VkBlendOp" offset="2"/>
				<enum name="VK_BLEND_OP_SRC_OVER_EXT" extends="VkBlendOp" offset="3"/>
				<enum name="VK_BLEND_OP_DST_OVER_EXT" extends="VkBlendOp" offset="4"/>
				<enum name="VK_BLEND_OP_SRC_IN_EXT" extends="VkBlendOp" offset="5"/>
				<enum name="VK_BLEND_OP_DST_IN_EXT" extends="VkBlendOp" offset="6"/>
				<enum name="VK_BLEND_OP_SRC_OUT_EXT" extends="VkBlendOp" offset="7"/>
				<enum name="VK_BLEND_OP_DST_OUT_EXT" extends="VkBlendOp" offset="8"/>
				<enum name="VK_BLEND_OP_SRC_ATOP_EXT" extends="VkBlendOp" offset="9"/>
				<enum name="VK_BLEND_OP_DST_ATOP_EXT" extends="VkBlendOp" offset="10"/>
				<enum name="VK_BLEND_OP_XOR_EXT" extends="VkBlendOp" offset="11"/>
				<enum name="VK_BLEND_OP_MULTIPLY_EXT" extends="VkBlendOp" offset="12"/>
				<enum name="VK_BLEND_OP_SCREEN_EXT" extends="VkBlendOp" offset="13"/>
				<enum name="VK_BLEND_OP_OVERLAY_EXT" extends="VkBlendOp" offset="14"/>
				<enum name="VK_BLEND_OP_DARKEN_EXT" extends="VkBlendOp" offset="15"/>
				<enum name="VK_BLEND_OP_LIGHTEN_EXT" extends="VkBlendOp" offset="16"/>
				<enum name="VK_BLEND_OP_COLORDODGE_EXT" extends="VkBlendOp" offset="17"/>
				<enum name="VK_BLEND_OP_COLORBURN_EXT" extends="VkBlendOp" offset="18"/>
				<enum name="VK_BLEND_OP_HARDLIGHT_EXT" extends="VkBlendOp" offset="19"/>
				<enum name="VK_BLEND_OP_SOFTLIGHT_EXT" extends="VkBlendOp" offset="20"/>
				<enum name="VK_BLEND_OP_DIFFERENCE_EXT" extends="VkBlendOp" offset="21"/>
				<enum name="VK_BLEND_OP_EXCLUSION_EXT" extends="VkBlendOp" offset="22"/>
				<enum name="VK_BLEND_OP_INVERT_EXT" extends="VkBlendOp" offset="23"/>
				<enum name="VK_BLEND_OP_INVERT_RGB_EXT" extends="VkBlendOp" offset="24"/>
				<enum name="VK_BLEND_OP_LINEARDODGE_EXT" extends="VkBlendOp" offset="25"/>
				<enum name="VK_BLEND_OP_LINEARBURN_EXT" extends="VkBlendOp" offset="26"/>
				<enum name="VK_BLEND_OP_VIVIDLIGHT_EXT" extends="VkBlendOp" offset="27"/>
				<enum name="VK_BLEND_OP_LINEARLIGHT_EXT" extends="VkBlendOp" offset="28"/>
				<enum name="VK_BLEND_OP_PINLIGHT_EXT" extends="VkBlendOp" offset="29"/>
				<enum name="VK_BLEND_OP_HARDMIX_EXT" extends="VkBlendOp" offset="30"/>
				<enum name="VK_BLEND_OP_HSL_HUE_EXT" extends="VkBlendOp" offset="31"/>
				<enum name="VK_BLEND_OP_HSL_SATURATION_EXT" extends="VkBlendOp" offset="32"/>
				<enum name="VK_BLEND_OP_HSL_COLOR_EXT" extends="VkBlendOp" offset="33"/>
				<enum name="VK_BLEND_OP_HSL_LUMINOSITY_EXT" extends="VkBlendOp" offset="34"/>
				<enum name="VK_BLEND_OP_PLUS_EXT" extends="VkBlendOp" offset="35"/>
				<enum name="VK_BLEND_OP_PLUS_CLAMPED_EXT" extends="VkBlendOp" offset="36"/>
				<enum name="VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT" extends="VkBlendOp" offset="37"/>
				<enum name="VK_BLEND_OP_PLUS_DARKER_EXT" extends="VkBlendOp" offset="38"/>
				<enum name="VK_BLEND_OP_MINUS_EXT" extends="VkBlendOp" offset="39"/>
				<enum name="VK_BLEND_OP_MINUS_CLAMPED_EXT" extends="VkBlendOp" offset="40"/>
				<enum name="VK_BLEND_OP_CONTRAST_EXT" extends="VkBlendOp" offset="41"/>
				<enum name="VK_BLEND_OP_INVERT_OVG_EXT" extends="VkBlendOp" offset="42"/>
				<enum name="VK_BLEND_OP_RED_EXT" extends="VkBlendOp" offset="43"/>
				<enum name="VK_BLEND_OP_GREEN_EXT" extends="VkBlendOp" offset="44"/>
				<enum name="VK_BLEND_OP_BLUE_EXT" extends="VkBlendOp" offset="45"/>
				<enum name="VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT" extends="VkAccessFlagBits" bitpos="19"/>
			</require>
		</extension>
		<extension name="VK_NV_fragment_coverage_to_color" number="150" contact="Jeff Bolz @jbolz" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME" string="VK_NV_fragment_coverage_to_color"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV" extends="VkStructureType" offset="0"/>
				<defref name="VkPipelineCoverageToColorStateCreateFlagsNV"/>
				<defref name="VkPipelineCoverageToColorStateCreateInfoNV"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_151" number="151" contact="Jeff Bolz @jbolz" author="NV" disabled="true">
			<require>
				<constant name="VK_NV_EXTENSION_151_SPEC_VERSION" number="0"/>
				<constant name="VK_NV_EXTENSION_151_EXTENSION_NAME" string="VK_NV_extension_151"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_152" number="152" contact="Jeff Bolz @jbolz" author="NV" disabled="true">
			<require>
				<constant name="VK_NV_EXTENSION_152_SPEC_VERSION" number="0"/>
				<constant name="VK_NV_EXTENSION_152_EXTENSION_NAME" string="VK_NV_extension_152"/>
			</require>
		</extension>
		<extension name="VK_NV_framebuffer_mixed_samples" number="153" contact="Jeff Bolz @jbolz" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME" string="VK_NV_framebuffer_mixed_samples"/>
				<enum name="VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV" extends="VkStructureType" offset="0"/>
				<defref name="VkPipelineCoverageModulationStateCreateInfoNV"/>
				<defref name="VkPipelineCoverageModulationStateCreateFlagsNV"/>
				<defref name="VkCoverageModulationModeNV"/>
			</require>
		</extension>
		<extension name="VK_NV_fill_rectangle" number="154" contact="Jeff Bolz @jbolz" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_NV_FILL_RECTANGLE_SPEC_VERSION" number="1"/>
				<constant name="VK_NV_FILL_RECTANGLE_EXTENSION_NAME" string="VK_NV_fill_rectangle"/>
				<enum name="VK_POLYGON_MODE_FILL_RECTANGLE_NV" extends="VkPolygonMode" offset="0"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_155" number="155" contact="Jeff Bolz @jbolz" author="NV" disabled="true">
			<require>
				<constant name="VK_NV_EXTENSION_155_SPEC_VERSION" number="0"/>
				<constant name="VK_NV_EXTENSION_155_EXTENSION_NAME" string="VK_NV_extension_155"/>
			</require>
		</extension>
		<extension name="VK_EXT_post_depth_coverage" number="156" contact="Daniel Koch @dgkoch" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME" string="VK_EXT_post_depth_coverage"/>
			</require>
		</extension>
		<extension name="VK_KHR_sampler_ycbcr_conversion" number="157" contact="Andrew Garrard @fluppeteer" requires="VK_KHR_maintenance1,VK_KHR_bind_memory2,VK_KHR_get_memory_requirements2,VK_KHR_get_physical_device_properties2" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME" string="VK_KHR_sampler_ycbcr_conversion"/>
				<enum name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR" extends="VkStructureType" offset="2"/>
				<enum name="VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR" extends="VkStructureType" offset="3"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR" extends="VkStructureType" offset="4"/>
				<enum name="VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR" extends="VkStructureType" offset="5"/>
				<enum name="VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT" extends="VkDebugReportObjectTypeEXT" offset="0"/>
				<enum name="VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR" extends="VkObjectType" offset="0"/>
				<enum name="VK_FORMAT_G8B8G8R8_422_UNORM_KHR" extends="VkFormat" offset="0"/>
				<enum name="VK_FORMAT_B8G8R8G8_422_UNORM_KHR" extends="VkFormat" offset="1"/>
				<enum name="VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR" extends="VkFormat" offset="2"/>
				<enum name="VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR" extends="VkFormat" offset="3"/>
				<enum name="VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR" extends="VkFormat" offset="4"/>
				<enum name="VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR" extends="VkFormat" offset="5"/>
				<enum name="VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR" extends="VkFormat" offset="6"/>
				<enum name="VK_FORMAT_R10X6_UNORM_PACK16_KHR" extends="VkFormat" offset="7"/>
				<enum name="VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR" extends="VkFormat" offset="8"/>
				<enum name="VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR" extends="VkFormat" offset="9"/>
				<enum name="VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR" extends="VkFormat" offset="10"/>
				<enum name="VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR" extends="VkFormat" offset="11"/>
				<enum name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR" extends="VkFormat" offset="12"/>
				<enum name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR" extends="VkFormat" offset="13"/>
				<enum name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR" extends="VkFormat" offset="14"/>
				<enum name="VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR" extends="VkFormat" offset="15"/>
				<enum name="VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR" extends="VkFormat" offset="16"/>
				<enum name="VK_FORMAT_R12X4_UNORM_PACK16_KHR" extends="VkFormat" offset="17"/>
				<enum name="VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR" extends="VkFormat" offset="18"/>
				<enum name="VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR" extends="VkFormat" offset="19"/>
				<enum name="VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR" extends="VkFormat" offset="20"/>
				<enum name="VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR" extends="VkFormat" offset="21"/>
				<enum name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR" extends="VkFormat" offset="22"/>
				<enum name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR" extends="VkFormat" offset="23"/>
				<enum name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR" extends="VkFormat" offset="24"/>
				<enum name="VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR" extends="VkFormat" offset="25"/>
				<enum name="VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR" extends="VkFormat" offset="26"/>
				<enum name="VK_FORMAT_G16B16G16R16_422_UNORM_KHR" extends="VkFormat" offset="27"/>
				<enum name="VK_FORMAT_B16G16R16G16_422_UNORM_KHR" extends="VkFormat" offset="28"/>
				<enum name="VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR" extends="VkFormat" offset="29"/>
				<enum name="VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR" extends="VkFormat" offset="30"/>
				<enum name="VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR" extends="VkFormat" offset="31"/>
				<enum name="VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR" extends="VkFormat" offset="32"/>
				<enum name="VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR" extends="VkFormat" offset="33"/>
				<enum name="VK_IMAGE_ASPECT_PLANE_0_BIT_KHR" extends="VkImageAspectFlagBits" bitpos="4"/>
				<enum name="VK_IMAGE_ASPECT_PLANE_1_BIT_KHR" extends="VkImageAspectFlagBits" bitpos="5"/>
				<enum name="VK_IMAGE_ASPECT_PLANE_2_BIT_KHR" extends="VkImageAspectFlagBits" bitpos="6"/>
				<enum name="VK_IMAGE_CREATE_DISJOINT_BIT_KHR" extends="VkImageCreateFlagBits" bitpos="9"/>
				<enum name="VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR" notation="Format can have midpoint rather than cosited chroma samples" extends="VkFormatFeatureFlagBits" bitpos="17"/>
				<enum name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR" notation="Format can be used with linear filtering whilst color conversion is enabled" extends="VkFormatFeatureFlagBits" bitpos="18"/>
				<enum name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR" notation="Format can have different chroma, min and mag filters" extends="VkFormatFeatureFlagBits" bitpos="19"/>
				<enum name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR" extends="VkFormatFeatureFlagBits" bitpos="20"/>
				<enum name="VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR" extends="VkFormatFeatureFlagBits" bitpos="21"/>
				<enum name="VK_FORMAT_FEATURE_DISJOINT_BIT_KHR" notation="Format supports disjoint planes" extends="VkFormatFeatureFlagBits" bitpos="22"/>
				<enum name="VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR" notation="Format can have cosited rather than midpoint chroma samples" extends="VkFormatFeatureFlagBits" bitpos="23"/>
				<defref name="VkSamplerYcbcrConversionCreateInfoKHR"/>
				<defref name="VkSamplerYcbcrConversionInfoKHR"/>
				<defref name="VkBindImagePlaneMemoryInfoKHR"/>
				<defref name="VkImagePlaneMemoryRequirementsInfoKHR"/>
				<defref name="VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"/>
				<defref name="VkSamplerYcbcrConversionImageFormatPropertiesKHR"/>
				<commandref name="vkCreateSamplerYcbcrConversionKHR"/>
				<commandref name="vkDestroySamplerYcbcrConversionKHR"/>
			</require>
		</extension>
		<extension name="VK_KHR_bind_memory2" number="158" contact="Tobias Hector @tobias" author="KHR" match-api="vulkan" type="device">
			<require>
				<constant name="VK_KHR_BIND_MEMORY_2_SPEC_VERSION" number="1"/>
				<constant name="VK_KHR_BIND_MEMORY_2_EXTENSION_NAME" string="VK_KHR_bind_memory2"/>
				<commandref name="vkBindBufferMemory2KHR"/>
				<commandref name="vkBindImageMemory2KHR"/>
				<enum name="VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR" extends="VkStructureType" offset="1"/>
				<enum name="VK_IMAGE_CREATE_ALIAS_BIT_KHR" extends="VkImageCreateFlagBits" bitpos="10"/>
				<defref name="VkBindBufferMemoryInfoKHR"/>
				<defref name="VkBindImageMemoryInfoKHR"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_159" number="159" contact="Chad Versace @chadversary" author="EXT" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_159_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_159_EXTENSION_NAME" string="VK_EXT_extension_159"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_160" number="160" contact="Mark Young @MarkY_LunarG" author="EXT" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_160_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_160_EXTENSION_NAME" string="VK_EXT_extension_160"/>
			</require>
		</extension>
		<extension name="VK_EXT_validation_cache" number="161" contact="Cort Stratton @cdwfs" author="GOOGLE" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_VALIDATION_CACHE_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_VALIDATION_CACHE_EXTENSION_NAME" string="VK_EXT_validation_cache"/>
				<enum name="VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT" extends="VkStructureType" offset="1"/>
				<enum name="VK_OBJECT_TYPE_VALIDATION_CACHE_EXT" notation="VkValidationCacheEXT" extends="VkObjectType" offset="0"/>
				<constant name="VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT" enumref="VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT"/>
				<defref name="VkValidationCacheEXT"/>
				<defref name="VkValidationCacheCreateInfoEXT"/>
				<defref name="VkShaderModuleValidationCacheCreateInfoEXT"/>
				<defref name="VkValidationCacheHeaderVersionEXT"/>
				<defref name="VkValidationCacheCreateFlagsEXT"/>
				<commandref name="vkCreateValidationCacheEXT"/>
				<commandref name="vkDestroyValidationCacheEXT"/>
				<commandref name="vkMergeValidationCachesEXT"/>
				<commandref name="vkGetValidationCacheDataEXT"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_162" number="162" contact="Jeff Bolz @jbolz" author="NV" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_162_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_162_EXTENSION_NAME" string="VK_EXT_extension_162"/>
			</require>
		</extension>
		<extension name="VK_EXT_shader_viewport_index_layer" number="163" contact="Daniel Koch @dgkoch" author="NV" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME" string="VK_EXT_shader_viewport_index_layer"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_164" number="164" contact="Daniel Koch @dgkoch" author="NV" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_164_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_164_EXTENSION_NAME" string="VK_NV_extension_164"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_165" number="165" contact="Daniel Koch @dgkoch" author="NV" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_165_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_165_EXTENSION_NAME" string="VK_NV_extension_165"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_166" number="166" contact="Daniel Koch @dgkoch" author="NV" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_166_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_166_EXTENSION_NAME" string="VK_NV_extension_166"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_167" number="167" contact="Daniel Koch @dgkoch" author="NV" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_167_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_167_EXTENSION_NAME" string="VK_NV_extension_167"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_168" number="168" contact="Daniel Koch @dgkoch" author="NV" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_168_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_168_EXTENSION_NAME" string="VK_NV_extension_168"/>
			</require>
		</extension>
		<extension name="VK_KHR_extension_169" number="169" contact="Jeff Bolz @jbolz" author="KHR" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_169_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_169_EXTENSION_NAME" string="VK_KHR_extension_169"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_170" number="170" contact="Piers Daniell @pdaniell" author="NV" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_170_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_170_EXTENSION_NAME" string="VK_EXT_extension_170"/>
			</require>
		</extension>
		<extension name="VK_QCOM_extension_171" number="171" contact="Bill Licea-Kane @billl" author="QCOM" disabled="true">
			<require>
				<constant name="VK_QCOM_extension_171_SPEC_VERSION" number="0"/>
				<constant name="VK_QCOM_extension_171_EXTENSION_NAME" string="VK_QCOM_extension_171"/>
			</require>
		</extension>
		<extension name="VK_QCOM_extension_172" number="172" contact="Bill Licea-Kane @billl" author="QCOM" disabled="true">
			<require>
				<constant name="VK_QCOM_extension_172_SPEC_VERSION" number="0"/>
				<constant name="VK_QCOM_extension_172_EXTENSION_NAME" string="VK_QCOM_extension_172"/>
			</require>
		</extension>
		<extension name="VK_QCOM_extension_173" number="173" contact="Bill Licea-Kane @billl" author="QCOM" disabled="true">
			<require>
				<constant name="VK_QCOM_extension_173_SPEC_VERSION" number="0"/>
				<constant name="VK_QCOM_extension_173_EXTENSION_NAME" string="VK_QCOM_extension_173"/>
			</require>
		</extension>
		<extension name="VK_QCOM_extension_174" number="174" contact="Bill Licea-Kane @billl" author="QCOM" disabled="true">
			<require>
				<constant name="VK_QCOM_extension_174_SPEC_VERSION" number="0"/>
				<constant name="VK_QCOM_extension_174_EXTENSION_NAME" string="VK_QCOM_extension_174"/>
			</require>
		</extension>
		<extension name="VK_EXT_global_priority" number="175" contact="Andres Rodriguez @lostgoat" author="EXT" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION" number="2"/>
				<constant name="VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME" string="VK_EXT_global_priority"/>
				<enum name="VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_ERROR_NOT_PERMITTED_EXT" extends="VkResult" offset="1" negate="true"/>
				<defref name="VkDeviceQueueGlobalPriorityCreateInfoEXT"/>
				<defref name="VkQueueGlobalPriorityEXT"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_176" number="176" contact="Neil Henning @neil_henning" author="EXT" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_176_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_176_EXTENSION_NAME" string="VK_KHR_extension_176"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_177" number="177" contact="Neil Henning @neil_henning" author="EXT" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_177_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_177_EXTENSION_NAME" string="VK_KHR_extension_177"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_178" number="178" contact="Alexander Galazin @debater" author="EXT" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_178_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_178_EXTENSION_NAME" string="VK_KHR_extension_178"/>
			</require>
		</extension>
		<extension name="VK_EXT_external_memory_host" number="179" contact="Daniel Rakos @aqnuep" requires="VK_KHR_external_memory" author="EXT" match-api="vulkan" type="device">
			<require>
				<constant name="VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION" number="1"/>
				<constant name="VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME" string="VK_EXT_external_memory_host"/>
				<enum name="VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT" extends="VkStructureType" offset="0"/>
				<enum name="VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT" extends="VkStructureType" offset="1"/>
				<enum name="VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT" extends="VkStructureType" offset="2"/>
				<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT" extends="VkExternalMemoryHandleTypeFlagBitsKHR" bitpos="7"/>
				<enum name="VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT" extends="VkExternalMemoryHandleTypeFlagBitsKHR" bitpos="8"/>
				<defref name="VkImportMemoryHostPointerInfoEXT"/>
				<defref name="VkMemoryHostPointerPropertiesEXT"/>
				<defref name="VkPhysicalDeviceExternalMemoryHostPropertiesEXT"/>
				<commandref name="vkGetMemoryHostPointerPropertiesEXT"/>
			</require>
		</extension>
		<extension name="VK_AMD_buffer_marker" number="180" contact="Daniel Rakos @aqnuep" author="AMD" match-api="vulkan" type="device">
			<require>
				<constant name="VK_AMD_BUFFER_MARKER_SPEC_VERSION" number="1"/>
				<constant name="VK_AMD_BUFFER_MARKER_EXTENSION_NAME" string="VK_AMD_buffer_marker"/>
				<commandref name="vkCmdWriteBufferMarkerAMD"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_181" number="181" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_181_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_181_EXTENSION_NAME" string="VK_AMD_extension_181"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_182" number="182" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_182_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_182_EXTENSION_NAME" string="VK_AMD_extension_182"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_183" number="183" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_183_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_183_EXTENSION_NAME" string="VK_AMD_extension_183"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_184" number="184" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_184_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_184_EXTENSION_NAME" string="VK_AMD_extension_184"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_185" number="185" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_185_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_185_EXTENSION_NAME" string="VK_AMD_extension_185"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_186" number="186" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_186_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_186_EXTENSION_NAME" string="VK_AMD_extension_186"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_187" number="187" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_187_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_187_EXTENSION_NAME" string="VK_AMD_extension_187"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_188" number="188" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_188_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_188_EXTENSION_NAME" string="VK_AMD_extension_188"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_189" number="189" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_189_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_189_EXTENSION_NAME" string="VK_AMD_extension_189"/>
			</require>
		</extension>
		<extension name="VK_AMD_extension_190" number="190" contact="Daniel Rakos @aqnuep" author="AMD" disabled="true">
			<require>
				<constant name="VK_KHR_EXTENSION_190_SPEC_VERSION" number="0"/>
				<constant name="VK_KHR_EXTENSION_190_EXTENSION_NAME" string="VK_AMD_extension_190"/>
			</require>
		</extension>
		<extension name="VK_NV_extension_191" number="191" contact="Vikram Kushwaha @vkushwaha" author="NV" disabled="true">
			<require>
				<constant name="VK_NV_EXTENSION_191_SPEC_VERSION" number="0"/>
				<constant name="VK_NV_EXTENSION_191_EXTENSION_NAME" string="VK_NV_extension_191"/>
			</require>
		</extension>
		<extension name="VK_GOOGLE_extension_192" number="192" contact="Jean-Francois Roy @jfroy" author="GOOGLE" disabled="true">
			<require>
				<constant name="VK_GOOGLE_EXTENSION_192_SPEC_VERSION" number="0"/>
				<constant name="VK_GOOGLE_EXTENSION_192_EXTENSION_NAME" string="VK_GOOGLE_extension_192"/>
			</require>
		</extension>
		<extension name="VK_GOOGLE_extension_193" number="193" contact="Jean-Francois Roy @jfroy" author="GOOGLE" disabled="true">
			<require>
				<constant name="VK_GOOGLE_EXTENSION_193_SPEC_VERSION" number="0"/>
				<constant name="VK_GOOGLE_EXTENSION_193_EXTENSION_NAME" string="VK_GOOGLE_extension_193"/>
			</require>
		</extension>
		<extension name="VK_GOOGLE_extension_194" number="194" contact="Jean-Francois Roy @jfroy" author="GOOGLE" disabled="true">
			<require>
				<constant name="VK_GOOGLE_EXTENSION_194_SPEC_VERSION" number="0"/>
				<constant name="VK_GOOGLE_EXTENSION_194_EXTENSION_NAME" string="VK_GOOGLE_extension_194"/>
			</require>
		</extension>
		<extension name="VK_GOOGLE_extension_195" number="195" contact="Jean-Francois Roy @jfroy" author="GOOGLE" disabled="true">
			<require>
				<constant name="VK_GOOGLE_EXTENSION_195_SPEC_VERSION" number="0"/>
				<constant name="VK_GOOGLE_EXTENSION_195_EXTENSION_NAME" string="VK_GOOGLE_extension_195"/>
			</require>
		</extension>
		<extension name="VK_GOOGLE_extension_196" number="196" contact="Jean-Francois Roy @jfroy" author="GOOGLE" disabled="true">
			<require>
				<constant name="VK_GOOGLE_EXTENSION_196_SPEC_VERSION" number="0"/>
				<constant name="VK_GOOGLE_EXTENSION_196_EXTENSION_NAME" string="VK_GOOGLE_extension_196"/>
			</require>
		</extension>
		<extension name="VK_EXT_extension_197" number="197" contact="baldurk@baldurk.org" author="Baldur Karlsson" disabled="true">
			<require>
				<constant name="VK_EXT_EXTENSION_197_SPEC_VERSION" number="0"/>
				<constant name="VK_EXT_EXTENSION_197_EXTENSION_NAME" string="VK_EXT_extension_197"/>
			</require>
		</extension>
	</extensions>
</registry>